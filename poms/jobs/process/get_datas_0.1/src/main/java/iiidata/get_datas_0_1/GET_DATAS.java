// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package iiidata.get_datas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: GET_DATAS Purpose: <br>
 * Description: Collect data from differents doucres <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class GET_DATAS implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (baer_api != null) {

				this.setProperty("baer_api", baer_api.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public java.lang.String baer_api;

		public java.lang.String getBaer_api() {
			return this.baer_api;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GET_DATAS";
	private final String projectName = "IIIDATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GET_DATAS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GET_DATAS.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_sirets_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class save_clientsStruct implements routines.system.IPersistableRow<save_clientsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(save_clientsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rejectsStruct implements routines.system.IPersistableRow<rejectsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rejectsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				save_clientsStruct save_clients = new save_clientsStruct();
				rejectsStruct rejects = new rejectsStruct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "save_clients");
				}

				int tos_count_tHashOutput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_GET_DATAS_" + pid + "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "rejects");
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;
				boolean headerIsInserted_tFileOutputExcel_1 = false;

				String fileName_tFileOutputExcel_1 = "/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/IIIDATA/rejects_clients.xlsx";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
				xlsxTool_tFileOutputExcel_1.setSheet("rejects");
				xlsxTool_tFileOutputExcel_1.setAppend(false, false, false);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_1) {

					xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);

				}

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("ID");

					xlsxTool_tFileOutputExcel_1.addCellValue("Metier");

					xlsxTool_tFileOutputExcel_1.addCellValue("Code_COMPTA");

					xlsxTool_tFileOutputExcel_1.addCellValue("NOMS_CLIENTS");

					xlsxTool_tFileOutputExcel_1.addCellValue("SIREN_SIRET");

					xlsxTool_tFileOutputExcel_1.addCellValue("CODE_FACTU");

					xlsxTool_tFileOutputExcel_1.addCellValue("ADRESSE_FACTU");

					xlsxTool_tFileOutputExcel_1.addCellValue("CP");

					xlsxTool_tFileOutputExcel_1.addCellValue("VILLE");

					xlsxTool_tFileOutputExcel_1.addCellValue("PAYS");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_GENRE");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_NOM");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_PRENOM");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT1_MAIL");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT1_TEL_FIXE");

					xlsxTool_tFileOutputExcel_1.addCellValue("errorCode");

					xlsxTool_tFileOutputExcel_1.addCellValue("errorMessage");

					nb_line_tFileOutputExcel_1++;
					headerIsInserted_tFileOutputExcel_1 = true;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:+E5P9FIp4qylstjPdQCWGczQBqGYWsdfi0NuBg==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/IIIDATA/Projet_de_reprise_Client_Zen.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							save_clients = null;
							rejects = null;
							int tempRowLength_tFileInputExcel_1 = 15;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							save_clients = new save_clientsStruct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ID";

									save_clients.ID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									save_clients.ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Metier";

									save_clients.Metier = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.Metier = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Code_COMPTA";

									save_clients.Code_COMPTA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.Code_COMPTA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "NOMS_CLIENTS";

									save_clients.NOMS_CLIENTS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.NOMS_CLIENTS = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "SIREN_SIRET";

									save_clients.SIREN_SIRET = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.SIREN_SIRET = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CODE_FACTU";

									save_clients.CODE_FACTU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CODE_FACTU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ADRESSE_FACTU";

									save_clients.ADRESSE_FACTU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.ADRESSE_FACTU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CP";

									save_clients.CP = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									save_clients.CP = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "VILLE";

									save_clients.VILLE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.VILLE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "PAYS";

									save_clients.PAYS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.PAYS = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_GENRE";

									save_clients.CONTACT_GENRE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_GENRE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_NOM";

									save_clients.CONTACT_NOM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_NOM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_PRENOM";

									save_clients.CONTACT_PRENOM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_PRENOM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT1_MAIL";

									save_clients.CONTACT1_MAIL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT1_MAIL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT1_TEL_FIXE";

									save_clients.CONTACT1_TEL_FIXE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT1_TEL_FIXE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								rejects = new rejectsStruct();
								rejects.ID = save_clients.ID;
								rejects.Metier = save_clients.Metier;
								rejects.Code_COMPTA = save_clients.Code_COMPTA;
								rejects.NOMS_CLIENTS = save_clients.NOMS_CLIENTS;
								rejects.SIREN_SIRET = save_clients.SIREN_SIRET;
								rejects.CODE_FACTU = save_clients.CODE_FACTU;
								rejects.ADRESSE_FACTU = save_clients.ADRESSE_FACTU;
								rejects.CP = save_clients.CP;
								rejects.VILLE = save_clients.VILLE;
								rejects.PAYS = save_clients.PAYS;
								rejects.CONTACT_GENRE = save_clients.CONTACT_GENRE;
								rejects.CONTACT_NOM = save_clients.CONTACT_NOM;
								rejects.CONTACT_PRENOM = save_clients.CONTACT_PRENOM;
								rejects.CONTACT1_MAIL = save_clients.CONTACT1_MAIL;
								rejects.CONTACT1_TEL_FIXE = save_clients.CONTACT1_TEL_FIXE;
								rejects.errorMessage = e.getMessage() + " - Line: " + tos_count_tFileInputExcel_1
										+ " column: " + curColName_tFileInputExcel_1 + " (No. "
										+ curColNum_tFileInputExcel_1 + ")";
								save_clients = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "save_clients"
							if (save_clients != null) {

								/**
								 * [tHashOutput_1 main ] start
								 */

								currentComponent = "tHashOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "save_clients"

									);
								}

								save_clientsStruct oneRow_tHashOutput_1 = new save_clientsStruct();

								oneRow_tHashOutput_1.ID = save_clients.ID;
								oneRow_tHashOutput_1.Metier = save_clients.Metier;
								oneRow_tHashOutput_1.Code_COMPTA = save_clients.Code_COMPTA;
								oneRow_tHashOutput_1.NOMS_CLIENTS = save_clients.NOMS_CLIENTS;
								oneRow_tHashOutput_1.SIREN_SIRET = save_clients.SIREN_SIRET;
								oneRow_tHashOutput_1.CODE_FACTU = save_clients.CODE_FACTU;
								oneRow_tHashOutput_1.ADRESSE_FACTU = save_clients.ADRESSE_FACTU;
								oneRow_tHashOutput_1.CP = save_clients.CP;
								oneRow_tHashOutput_1.VILLE = save_clients.VILLE;
								oneRow_tHashOutput_1.PAYS = save_clients.PAYS;
								oneRow_tHashOutput_1.CONTACT_GENRE = save_clients.CONTACT_GENRE;
								oneRow_tHashOutput_1.CONTACT_NOM = save_clients.CONTACT_NOM;
								oneRow_tHashOutput_1.CONTACT_PRENOM = save_clients.CONTACT_PRENOM;
								oneRow_tHashOutput_1.CONTACT1_MAIL = save_clients.CONTACT1_MAIL;
								oneRow_tHashOutput_1.CONTACT1_TEL_FIXE = save_clients.CONTACT1_TEL_FIXE;

								tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
								nb_line_tHashOutput_1++;

								tos_count_tHashOutput_1++;

								/**
								 * [tHashOutput_1 main ] stop
								 */

								/**
								 * [tHashOutput_1 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_1";

								/**
								 * [tHashOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_1 process_data_end ] start
								 */

								currentComponent = "tHashOutput_1";

								/**
								 * [tHashOutput_1 process_data_end ] stop
								 */

							} // End of branch "save_clients"

// Start of branch "rejects"
							if (rejects != null) {

								/**
								 * [tFileOutputExcel_1 main ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "rejects"

									);
								}

								xlsxTool_tFileOutputExcel_1.addRow();

								if (rejects.ID != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String.valueOf(rejects.ID)));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.Metier != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.Metier));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.Code_COMPTA != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.Code_COMPTA));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.NOMS_CLIENTS != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.NOMS_CLIENTS));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.SIREN_SIRET != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.SIREN_SIRET));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CODE_FACTU != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CODE_FACTU));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.ADRESSE_FACTU != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.ADRESSE_FACTU));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CP != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String.valueOf(rejects.CP)));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.VILLE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.VILLE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.PAYS != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.PAYS));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_GENRE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_GENRE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_NOM != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_NOM));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_PRENOM != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_PRENOM));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT1_MAIL != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT1_MAIL));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT1_TEL_FIXE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT1_TEL_FIXE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.errorCode != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.errorCode));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.errorMessage != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.errorMessage));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								nb_line_tFileOutputExcel_1++;

								tos_count_tFileOutputExcel_1++;

								/**
								 * [tFileOutputExcel_1 main ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_end ] stop
								 */

							} // End of branch "rejects"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "save_clients");
				}

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1, true);

				if (headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0) {
					nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;
				}
				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				if (isFileGenerated_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 == 0) {

					file_tFileOutputExcel_1.delete();

				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "rejects");
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tHashInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfrejetcsStruct implements routines.system.IPersistableRow<copyOfrejetcsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfrejetcsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class save_siretStruct implements routines.system.IPersistableRow<save_siretStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(save_siretStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class siretStruct implements routines.system.IPersistableRow<siretStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(siretStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class siret_to_apiStruct implements routines.system.IPersistableRow<siret_to_apiStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public String SIRET;

		public String getSIRET() {
			return this.SIRET;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.SIRET = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.SIRET = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SIRET, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SIRET, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SIRET=" + SIRET);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(siret_to_apiStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class extract_siertStruct implements routines.system.IPersistableRow<extract_siertStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(extract_siertStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				extract_siertStruct extract_siert = new extract_siertStruct();
				extract_siertStruct row5 = extract_siert;
				siret_to_apiStruct siret_to_api = new siret_to_apiStruct();
				row3Struct row3 = new row3Struct();
				siretStruct siret = new siretStruct();
				siretStruct save_siret = siret;
				row4Struct row4 = new row4Struct();
				copyOfrejetcsStruct copyOfrejetcs = new copyOfrejetcsStruct();

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;

//===============================input xml init part===============================
				class XML_API_tXMLMap_2_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
				siretStruct siret_tmp = new siretStruct();
				siretStruct siret_save = null;
//the aggregate variable
				siretStruct siret_aggregate = null;
//init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_2", allOutsForAggregate_tXMLMap_2);
// ###############################
				class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Short get_Short(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Short(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}

					Long get_Long(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Long(content);
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					java.util.Date get_Date(String xpath, String pattern) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Date(content, pattern);
					}

					Boolean get_Boolean(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Boolean(content);
					}
				}
				TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_2_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfrejetcs");
				}

				int tos_count_tFileOutputExcel_3 = 0;

				int columnIndex_tFileOutputExcel_3 = 0;
				boolean headerIsInserted_tFileOutputExcel_3 = false;

				String fileName_tFileOutputExcel_3 = "/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/IIIDATA/rejects_clients_api.xlsx";
				java.io.File file_tFileOutputExcel_3 = new java.io.File(fileName_tFileOutputExcel_3);
				boolean isFileGenerated_tFileOutputExcel_3 = true;
				if (file_tFileOutputExcel_3.exists()) {
					isFileGenerated_tFileOutputExcel_3 = false;
				}
				int nb_line_tFileOutputExcel_3 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_3.setTruncateExceedingCharacters(false);
				xlsxTool_tFileOutputExcel_3.setSheet("rejects");
				xlsxTool_tFileOutputExcel_3.setAppend(true, false, false);
				xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_3.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_3) {

					xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);

				}

				xlsxTool_tFileOutputExcel_3.setFont("");

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfrejetcsStruct copyOfrejetcs_tmp = new copyOfrejetcsStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRESTClient_2 begin ] start
				 */

				ok_Hash.put("tRESTClient_2", false);
				start_Hash.put("tRESTClient_2", System.currentTimeMillis());

				currentComponent = "tRESTClient_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "siret_to_api");
				}

				int tos_count_tRESTClient_2 = 0;

				/**
				 * [tRESTClient_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String siren;
					String siret;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				siret_to_apiStruct siret_to_api_tmp = new siret_to_apiStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "extract_siert");
				}

				int tos_count_tLogRow_2 = 0;

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tHashInput_3 begin ] start
				 */

				ok_Hash.put("tHashInput_3", false);
				start_Hash.put("tHashInput_3", System.currentTimeMillis());

				currentComponent = "tHashInput_3";

				int tos_count_tHashInput_3 = 0;

				int nb_line_tHashInput_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct> tHashFile_tHashInput_3 = mf_tHashInput_3
						.getAdvancedMemoryHashFile("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_3 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<save_clientsStruct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
				while (iterator_tHashInput_3.hasNext()) {
					save_clientsStruct next_tHashInput_3 = iterator_tHashInput_3.next();

					extract_siert.ID = next_tHashInput_3.ID;
					extract_siert.Metier = next_tHashInput_3.Metier;
					extract_siert.Code_COMPTA = next_tHashInput_3.Code_COMPTA;
					extract_siert.NOMS_CLIENTS = next_tHashInput_3.NOMS_CLIENTS;
					extract_siert.SIREN_SIRET = next_tHashInput_3.SIREN_SIRET;
					extract_siert.CODE_FACTU = next_tHashInput_3.CODE_FACTU;
					extract_siert.ADRESSE_FACTU = next_tHashInput_3.ADRESSE_FACTU;
					extract_siert.CP = next_tHashInput_3.CP;
					extract_siert.VILLE = next_tHashInput_3.VILLE;
					extract_siert.PAYS = next_tHashInput_3.PAYS;
					extract_siert.CONTACT_GENRE = next_tHashInput_3.CONTACT_GENRE;
					extract_siert.CONTACT_NOM = next_tHashInput_3.CONTACT_NOM;
					extract_siert.CONTACT_PRENOM = next_tHashInput_3.CONTACT_PRENOM;
					extract_siert.CONTACT1_MAIL = next_tHashInput_3.CONTACT1_MAIL;
					extract_siert.CONTACT1_TEL_FIXE = next_tHashInput_3.CONTACT1_TEL_FIXE;

					/**
					 * [tHashInput_3 begin ] stop
					 */

					/**
					 * [tHashInput_3 main ] start
					 */

					currentComponent = "tHashInput_3";

					tos_count_tHashInput_3++;

					/**
					 * [tHashInput_3 main ] stop
					 */

					/**
					 * [tHashInput_3 process_data_begin ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "extract_siert"

						);
					}

					row5 = extract_siert;

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row5"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;
						Var.siren = StringHandling.LEFT(row5.SIREN_SIRET, StringHandling.INDEX(row5.SIREN_SIRET, "_"));
						Var.siret = StringHandling.RIGHT(row5.SIREN_SIRET,
								StringHandling.LEN(row5.SIREN_SIRET) - StringHandling.INDEX(row5.SIREN_SIRET, "_") - 1);// ###############################
						// ###############################
						// # Output tables

						siret_to_api = null;

// # Output table : 'siret_to_api'
// # Filter conditions 
						if (

						!Var.siret.equals("")

						) {
							siret_to_api_tmp.SIRET = Var.siret;
							siret_to_api = siret_to_api_tmp;
						} // closing filter/reject
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "siret_to_api"
					if (siret_to_api != null) {

						/**
						 * [tRESTClient_2 main ] start
						 */

						currentComponent = "tRESTClient_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "siret_to_api"

							);
						}

						row4 = null;
						row3 = null;

// expected response body
						Object responseDoc_tRESTClient_2 = null;

						try {
							// request body
							org.dom4j.Document requestDoc_tRESTClient_2 = null;
							String requestString_tRESTClient_2 = null;

							Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null
									? requestDoc_tRESTClient_2
									: requestString_tRESTClient_2;

							// resposne class name
							Class<?> responseClass_tRESTClient_2 = org.dom4j.Document.class;

							// create web client instance
							org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

							boolean inOSGi = routines.system.BundleUtils.inOSGi();

							final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

							String url = "https://api.insee.fr/entreprises/sirene/V3/siret/" + siret_to_api.SIRET;
							// {baseUri}tRESTClient
							factoryBean_tRESTClient_2.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
							factoryBean_tRESTClient_2.setAddress(url);

							factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);

							java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
							providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
								// workaround for https://jira.talendforge.org/browse/TESB-7276
								public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
										java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
										javax.ws.rs.core.MediaType mt,
										javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
										throws IOException, javax.ws.rs.WebApplicationException {
									String contentLength = headers.getFirst("Content-Length");
									if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
											&& Integer.valueOf(contentLength) <= 0) {
										try {
											return org.dom4j.DocumentHelper.parseText("<root/>");
										} catch (org.dom4j.DocumentException e_tRESTClient_2) {
											e_tRESTClient_2.printStackTrace();
										}
										return null;
									}
									return super.readFrom(cls, type, anns, mt, headers, is);
								}
							});
							org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
							jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
							jsonProvider_tRESTClient_2.setAttributesToElements(true);

							jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
							jsonProvider_tRESTClient_2.setWrapperName("root");

							jsonProvider_tRESTClient_2.setDropRootElement(false);
							jsonProvider_tRESTClient_2.setConvertTypesToStrings(false);
							providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
							factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
							factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

							boolean use_auth_tRESTClient_2 = true;

							if (use_auth_tRESTClient_2 && "SAML".equals("OAUTH2_BEARER")) {
								if (!inOSGi) {
									throw new IllegalArgumentException(
											"SAML based security scenarios are not supported in Studio (standalone)");
								}
								// set SAML Token authentication

								final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
										.decryptPassword(
												"enc:routine.encryption.key.v1:KfkQOlNwi+Z3KhRANRI9TKy2vaxco7Y/qaUjxboFxSLqFowi");

								org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
										.createSTSClient(factoryBean_tRESTClient_2.getBus(), "username",
												decryptedPassword_tRESTClient_2);

								org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_2,
										stsClient);
							}

							org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2
									.createWebClient();

							// set request path
							webClient_tRESTClient_2.path("");

							// set connection properties
							org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient
									.getConfig(webClient_tRESTClient_2);
							org.apache.cxf.transport.http.auth.HttpAuthSupplier httpAuthSupplerHttpConduit = null;
							org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2
									.getHttpConduit();

							if (clientConfig_tRESTClient_2.getEndpoint() != null) {
								org.apache.cxf.service.model.EndpointInfo endpointInfo_tRESTClient_2 = clientConfig_tRESTClient_2
										.getEndpoint().getEndpointInfo();
								if (endpointInfo_tRESTClient_2 != null) {
									endpointInfo_tRESTClient_2.setProperty("enable.webclient.operation.reporting",
											true);
								}
							}

							if (use_auth_tRESTClient_2 && "BASIC".equals("OAUTH2_BEARER")) {
								// set BASIC auth

								final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
										.decryptPassword(
												"enc:routine.encryption.key.v1:cc/Q1annKl6lpAsFXlRnNIO3TG8bSltOIqYBhEXrXCrPiI0P");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_2.setAuthorizationType("Basic");
								authPolicy_tRESTClient_2.setUserName("username");
								authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
								conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
							} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("OAUTH2_BEARER")) {
								// set Digest auth

								final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
										.decryptPassword(
												"enc:routine.encryption.key.v1:TcUc+R51VW7RVlkZX09MGxDk6RtM7ScZS9ZpFXV6gfU9Wjfe");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_2.setAuthorizationType("Digest");
								authPolicy_tRESTClient_2.setUserName("username");
								authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
								conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
							}

							if (!inOSGi) {
								conduit_tRESTClient_2.getClient().setReceiveTimeout((long) (60 * 1000L));
								conduit_tRESTClient_2.getClient().setConnectionTimeout((long) (30 * 1000L));
								boolean use_proxy_tRESTClient_2 = false;

							}

							// set Accept-Type
							webClient_tRESTClient_2.accept("application/json");

							// set optional query and header properties if any

							if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
								// set oAuth2 bearer token
								org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier authSupplier = new org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier();
								authSupplier.setAccessToken("dd9f5535-85da-3b77-aeea-77da9c95fb4b");
								conduit_tRESTClient_2.setAuthSupplier(authSupplier);
							}

							if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {

								final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
										.decryptPassword(
												"enc:routine.encryption.key.v1:5iM/05OxkBNWWOkyCUWnweNnE+PJy90R6b8w3LuhIQKs4mQ0");

								String username_tRESTClient_2 = "username";
								String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

								String bearerHeader_tRESTClient_2 = null;

								try {
									if (!inOSGi) {
										org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 = new org.springframework.context.support.ClassPathXmlApplicationContext(
												"META-INF/tesb/oidc-context.xml");
										org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2
												.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
										bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2,
														oidcConfiguration_tRESTClient_2);
									} else {
										bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
												.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
									}
								} catch (Exception ex) {
									throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ",
											ex);
								}

								webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
							}

							// if FORM request then capture query parameters into Form, otherwise set them
							// as queries

							try {
								// start send request

								responseDoc_tRESTClient_2 = webClient_tRESTClient_2.get();
								javax.ws.rs.core.Response responseObjBase_tRESTClient_2 = (javax.ws.rs.core.Response) responseDoc_tRESTClient_2;
								int status_tRESTClient_2 = responseObjBase_tRESTClient_2.getStatus();
								if (status_tRESTClient_2 != 304 && status_tRESTClient_2 >= 300
										&& responseClass_tRESTClient_2 != javax.ws.rs.core.Response.class) {
									throw org.apache.cxf.jaxrs.utils.ExceptionUtils.toWebApplicationException(
											(javax.ws.rs.core.Response) responseObjBase_tRESTClient_2);
								}
								if (responseObjBase_tRESTClient_2.getEntity() != null) {
									responseDoc_tRESTClient_2 = responseObjBase_tRESTClient_2
											.readEntity(responseClass_tRESTClient_2);
								}

								int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse()
										.getStatus();
								if (webClientResponseStatus_tRESTClient_2 >= 300) {
									throw new javax.ws.rs.WebApplicationException(
											webClient_tRESTClient_2.getResponse());
								}

								if (row3 == null) {
									row3 = new row3Struct();
								}

								row3.statusCode = webClientResponseStatus_tRESTClient_2;
								row3.string = "";

								{
									Object responseObj_tRESTClient_2 = responseDoc_tRESTClient_2;

									if (responseObj_tRESTClient_2 != null) {
										if (responseClass_tRESTClient_2 == String.class
												&& responseObj_tRESTClient_2 instanceof String) {
											row3.string = (String) responseObj_tRESTClient_2;
										} else {
											routines.system.Document responseTalendDoc_tRESTClient_2 = null;
											if (null != responseObj_tRESTClient_2) {
												responseTalendDoc_tRESTClient_2 = new routines.system.Document();
												if (responseObj_tRESTClient_2 instanceof org.dom4j.Document) {
													responseTalendDoc_tRESTClient_2.setDocument(
															(org.dom4j.Document) responseObj_tRESTClient_2);
												}
											}
											row3.body = responseTalendDoc_tRESTClient_2;
										}
									}
								}

								globalMap.put("tRESTClient_2_HEADERS",
										webClient_tRESTClient_2.getResponse().getHeaders());
								globalMap.put("tRESTClient_2_COOKIES",
										webClient_tRESTClient_2.getResponse().getCookies());

							} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {
								globalMap.put("tRESTClient_2_ERROR_MESSAGE", ex_tRESTClient_2.getMessage());

								if (row4 == null) {
									row4 = new row4Struct();
								}
								row4.errorCode = ex_tRESTClient_2.getResponse().getStatus();

								String errorMessage_tRESTClient_2 = null;
								try {
									errorMessage_tRESTClient_2 = ex_tRESTClient_2.getResponse()
											.readEntity(String.class);
								} catch (Exception exe_tRESTClient_2) {
									// ignore
								}
								if (null == errorMessage_tRESTClient_2
										|| 0 == errorMessage_tRESTClient_2.trim().length()) {
									errorMessage_tRESTClient_2 = ex_tRESTClient_2.getMessage();
								}
								row4.errorMessage = errorMessage_tRESTClient_2;

								globalMap.put("tRESTClient_2_HEADERS", ex_tRESTClient_2.getResponse().getHeaders());
								globalMap.put("tRESTClient_2_COOKIES", ex_tRESTClient_2.getResponse().getCookies());

							}

						} catch (Exception e_tRESTClient_2) {
							globalMap.put("tRESTClient_2_ERROR_MESSAGE", e_tRESTClient_2.getMessage());

							throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);

						}

						tos_count_tRESTClient_2++;

						/**
						 * [tRESTClient_2 main ] stop
						 */

						/**
						 * [tRESTClient_2 process_data_begin ] start
						 */

						currentComponent = "tRESTClient_2";

						/**
						 * [tRESTClient_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tXMLMap_2_TXMLMAP_OUT main ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_OUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
							boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

							// init document to flat tool
							routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setOriginalLoop("/root");
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setIsOptional(false);
							if (row3.body == null || row3.body.getDocument() == null) {
								throw new RuntimeException("row3.body can't be empty");
							}
							org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = row3.body.getDocument();
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(false);
							docToFlat_tXMLMap_2_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);

							// old version, find NS from doc
							nsTool_tXMLMap_2_TXMLMAP_OUT.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT.getRootElement());
							java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;

							docToFlat_tXMLMap_2_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);

							String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[83];
							String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[83];

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "row3.body:/root/etablissement/activitePrincipaleRegistreMetiersEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "etablissement/activitePrincipaleRegistreMetiersEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "row3.body:/root/etablissement/uniteLegale/denominationUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "etablissement/uniteLegale/denominationUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "row3.body:/root/etablissement/uniteLegale/activitePrincipaleUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "etablissement/uniteLegale/activitePrincipaleUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[3] = "row3.body:/root/etablissement/adresseEtablissement/libellePaysEtrangerEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[3] = "etablissement/adresseEtablissement/libellePaysEtrangerEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[4] = "row3.body:/root/etablissement/uniteLegale/sigleUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[4] = "etablissement/uniteLegale/sigleUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[5] = "row3.body:/root/etablissement/siren";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[5] = "etablissement/siren";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[6] = "row3.body:/root/etablissement/uniteLegale/nomUsageUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[6] = "etablissement/uniteLegale/nomUsageUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[7] = "row3.body:/root/etablissement/periodesEtablissement/caractereEmployeurEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[7] = "etablissement/periodesEtablissement/caractereEmployeurEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[8] = "row3.body:/root/etablissement/uniteLegale/prenom1UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[8] = "etablissement/uniteLegale/prenom1UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[9] = "row3.body:/root/etablissement/periodesEtablissement/enseigne2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[9] = "etablissement/periodesEtablissement/enseigne2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[10] = "row3.body:/root/etablissement/adresse2Etablissement/libellePaysEtranger2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[10] = "etablissement/adresse2Etablissement/libellePaysEtranger2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[11] = "row3.body:/root/etablissement/uniteLegale/prenomUsuelUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[11] = "etablissement/uniteLegale/prenomUsuelUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[12] = "row3.body:/root/etablissement/uniteLegale/dateDernierTraitementUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[12] = "etablissement/uniteLegale/dateDernierTraitementUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[13] = "row3.body:/root/etablissement/uniteLegale/economieSocialeSolidaireUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[13] = "etablissement/uniteLegale/economieSocialeSolidaireUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[14] = "row3.body:/root/etablissement/uniteLegale/categorieJuridiqueUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[14] = "etablissement/uniteLegale/categorieJuridiqueUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[15] = "row3.body:/root/etablissement/uniteLegale/caractereEmployeurUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[15] = "etablissement/uniteLegale/caractereEmployeurUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[16] = "row3.body:/root/etablissement/uniteLegale/categorieEntreprise";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[16] = "etablissement/uniteLegale/categorieEntreprise";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[17] = "row3.body:/root/etablissement/adresse2Etablissement/codePostal2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[17] = "etablissement/adresse2Etablissement/codePostal2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[18] = "row3.body:/root/etablissement/periodesEtablissement/changementEtatAdministratifEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[18] = "etablissement/periodesEtablissement/changementEtatAdministratifEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[19] = "row3.body:/root/etablissement/siret";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[19] = "etablissement/siret";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[20] = "row3.body:/root/etablissement/uniteLegale/statutDiffusionUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[20] = "etablissement/uniteLegale/statutDiffusionUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[21] = "row3.body:/root/etablissement/adresseEtablissement/codeCommuneEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[21] = "etablissement/adresseEtablissement/codeCommuneEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[22] = "row3.body:/root/etablissement/trancheEffectifsEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[22] = "etablissement/trancheEffectifsEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[23] = "row3.body:/root/etablissement/nombrePeriodesEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[23] = "etablissement/nombrePeriodesEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[24] = "row3.body:/root/etablissement/uniteLegale/denominationUsuelle3UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[24] = "etablissement/uniteLegale/denominationUsuelle3UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[25] = "row3.body:/root/etablissement/uniteLegale/nomUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[25] = "etablissement/uniteLegale/nomUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[26] = "row3.body:/root/etablissement/adresse2Etablissement/typeVoie2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[26] = "etablissement/adresse2Etablissement/typeVoie2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[27] = "row3.body:/root/etablissement/dateDernierTraitementEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[27] = "etablissement/dateDernierTraitementEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[28] = "row3.body:/root/etablissement/uniteLegale/pseudonymeUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[28] = "etablissement/uniteLegale/pseudonymeUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[29] = "row3.body:/root/etablissement/periodesEtablissement/nomenclatureActivitePrincipaleEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[29] = "etablissement/periodesEtablissement/nomenclatureActivitePrincipaleEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[30] = "row3.body:/root/etablissement/periodesEtablissement/changementActivitePrincipaleEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[30] = "etablissement/periodesEtablissement/changementActivitePrincipaleEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[31] = "row3.body:/root/etablissement/nic";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[31] = "etablissement/nic";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[32] = "row3.body:/root/etablissement/statutDiffusionEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[32] = "etablissement/statutDiffusionEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[33] = "row3.body:/root/etablissement/uniteLegale/denominationUsuelle2UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[33] = "etablissement/uniteLegale/denominationUsuelle2UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[34] = "row3.body:/root/etablissement/adresseEtablissement/complementAdresseEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[34] = "etablissement/adresseEtablissement/complementAdresseEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[35] = "row3.body:/root/etablissement/adresse2Etablissement/codePaysEtranger2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[35] = "etablissement/adresse2Etablissement/codePaysEtranger2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[36] = "row3.body:/root/etablissement/adresse2Etablissement/libelleCedex2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[36] = "etablissement/adresse2Etablissement/libelleCedex2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[37] = "row3.body:/root/etablissement/uniteLegale/etatAdministratifUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[37] = "etablissement/uniteLegale/etatAdministratifUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[38] = "row3.body:/root/etablissement/adresseEtablissement/codeCedexEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[38] = "etablissement/adresseEtablissement/codeCedexEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[39] = "row3.body:/root/etablissement/uniteLegale/nicSiegeUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[39] = "etablissement/uniteLegale/nicSiegeUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[40] = "row3.body:/root/etablissement/adresse2Etablissement/complementAdresse2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[40] = "etablissement/adresse2Etablissement/complementAdresse2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[41] = "row3.body:/root/etablissement/adresse2Etablissement/codeCommune2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[41] = "etablissement/adresse2Etablissement/codeCommune2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[42] = "row3.body:/root/etablissement/periodesEtablissement/enseigne3Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[42] = "etablissement/periodesEtablissement/enseigne3Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[43] = "row3.body:/root/etablissement/uniteLegale/anneeCategorieEntreprise";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[43] = "etablissement/uniteLegale/anneeCategorieEntreprise";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[44] = "row3.body:/root/etablissement/periodesEtablissement/denominationUsuelleEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[44] = "etablissement/periodesEtablissement/denominationUsuelleEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[45] = "row3.body:/root/etablissement/adresseEtablissement/typeVoieEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[45] = "etablissement/adresseEtablissement/typeVoieEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[46] = "row3.body:/root/etablissement/adresseEtablissement/libelleVoieEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[46] = "etablissement/adresseEtablissement/libelleVoieEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[47] = "row3.body:/root/etablissement/adresse2Etablissement/libelleVoie2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[47] = "etablissement/adresse2Etablissement/libelleVoie2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[48] = "row3.body:/root/etablissement/adresse2Etablissement/libelleCommuneEtranger2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[48] = "etablissement/adresse2Etablissement/libelleCommuneEtranger2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[49] = "row3.body:/root/etablissement/periodesEtablissement/enseigne1Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[49] = "etablissement/periodesEtablissement/enseigne1Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[50] = "row3.body:/root/etablissement/uniteLegale/prenom3UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[50] = "etablissement/uniteLegale/prenom3UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[51] = "row3.body:/root/etablissement/periodesEtablissement/dateDebut";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[51] = "etablissement/periodesEtablissement/dateDebut";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[52] = "row3.body:/root/etablissement/adresseEtablissement/distributionSpecialeEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[52] = "etablissement/adresseEtablissement/distributionSpecialeEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[53] = "row3.body:/root/etablissement/dateCreationEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[53] = "etablissement/dateCreationEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[54] = "row3.body:/root/etablissement/etablissementSiege";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[54] = "etablissement/etablissementSiege";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[55] = "row3.body:/root/etablissement/uniteLegale/nomenclatureActivitePrincipaleUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[55] = "etablissement/uniteLegale/nomenclatureActivitePrincipaleUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[56] = "row3.body:/root/etablissement/adresseEtablissement/libelleCedexEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[56] = "etablissement/adresseEtablissement/libelleCedexEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[57] = "row3.body:/root/etablissement/periodesEtablissement/changementCaractereEmployeurEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[57] = "etablissement/periodesEtablissement/changementCaractereEmployeurEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[58] = "row3.body:/root/etablissement/adresseEtablissement/libelleCommuneEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[58] = "etablissement/adresseEtablissement/libelleCommuneEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[59] = "row3.body:/root/etablissement/adresse2Etablissement/indiceRepetition2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[59] = "etablissement/adresse2Etablissement/indiceRepetition2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[60] = "row3.body:/root/etablissement/uniteLegale/denominationUsuelle1UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[60] = "etablissement/uniteLegale/denominationUsuelle1UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[61] = "row3.body:/root/etablissement/uniteLegale/prenom2UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[61] = "etablissement/uniteLegale/prenom2UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[62] = "row3.body:/root/etablissement/adresseEtablissement/codePostalEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[62] = "etablissement/adresseEtablissement/codePostalEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[63] = "row3.body:/root/etablissement/periodesEtablissement/activitePrincipaleEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[63] = "etablissement/periodesEtablissement/activitePrincipaleEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[64] = "row3.body:/root/etablissement/uniteLegale/trancheEffectifsUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[64] = "etablissement/uniteLegale/trancheEffectifsUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[65] = "row3.body:/root/etablissement/uniteLegale/identifiantAssociationUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[65] = "etablissement/uniteLegale/identifiantAssociationUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[66] = "row3.body:/root/etablissement/adresse2Etablissement/numeroVoie2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[66] = "etablissement/adresse2Etablissement/numeroVoie2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[67] = "row3.body:/root/etablissement/uniteLegale/dateCreationUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[67] = "etablissement/uniteLegale/dateCreationUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[68] = "row3.body:/root/etablissement/adresse2Etablissement/codeCedex2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[68] = "etablissement/adresse2Etablissement/codeCedex2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[69] = "row3.body:/root/etablissement/periodesEtablissement/etatAdministratifEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[69] = "etablissement/periodesEtablissement/etatAdministratifEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[70] = "row3.body:/root/etablissement/adresseEtablissement/indiceRepetitionEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[70] = "etablissement/adresseEtablissement/indiceRepetitionEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[71] = "row3.body:/root/etablissement/adresseEtablissement/codePaysEtrangerEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[71] = "etablissement/adresseEtablissement/codePaysEtrangerEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[72] = "row3.body:/root/etablissement/periodesEtablissement/dateFin";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[72] = "etablissement/periodesEtablissement/dateFin";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[73] = "row3.body:/root/etablissement/adresseEtablissement/libelleCommuneEtrangerEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[73] = "etablissement/adresseEtablissement/libelleCommuneEtrangerEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[74] = "row3.body:/root/etablissement/periodesEtablissement/changementEnseigneEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[74] = "etablissement/periodesEtablissement/changementEnseigneEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[75] = "row3.body:/root/etablissement/adresse2Etablissement/libelleCommune2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[75] = "etablissement/adresse2Etablissement/libelleCommune2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[76] = "row3.body:/root/etablissement/adresseEtablissement/numeroVoieEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[76] = "etablissement/adresseEtablissement/numeroVoieEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[77] = "row3.body:/root/etablissement/uniteLegale/anneeEffectifsUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[77] = "etablissement/uniteLegale/anneeEffectifsUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[78] = "row3.body:/root/etablissement/anneeEffectifsEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[78] = "etablissement/anneeEffectifsEtablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[79] = "row3.body:/root/etablissement/uniteLegale/sexeUniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[79] = "etablissement/uniteLegale/sexeUniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[80] = "row3.body:/root/etablissement/adresse2Etablissement/distributionSpeciale2Etablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[80] = "etablissement/adresse2Etablissement/distributionSpeciale2Etablissement";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[81] = "row3.body:/root/etablissement/uniteLegale/prenom4UniteLegale";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[81] = "etablissement/uniteLegale/prenom4UniteLegale";

							absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[82] = "row3.body:/root/etablissement/periodesEtablissement/changementDenominationUsuelleEtablissement";
							relativePathMappings_tXMLMap_2_TXMLMAP_OUT[82] = "etablissement/periodesEtablissement/changementDenominationUsuelleEtablissement";

							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
							docToFlat_tXMLMap_2_TXMLMAP_OUT
									.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
							// generate document to flat data
							docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
							// get flat data
							java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT
									.getResultSet();

							for (java.util.Map<String, String> oneRow_tXMLMap_2_TXMLMAP_OUT : resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
								nb_line_tXMLMap_2_TXMLMAP_OUT++;
								rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
								mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
								isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

								treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
								for (java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT
										.entrySet()) {
									treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT.getKey(),
											entry_tXMLMap_2_TXMLMAP_OUT.getValue());
								}

								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
									// ###############################
									// # Output tables

									siret = null;

// # Output table : 'siret'

									siret_tmp = new siretStruct();
									siret_tmp.siren = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Long("row3.body:/root/etablissement/siren");
									siret_tmp.nic = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Integer("row3.body:/root/etablissement/nic");
									siret_tmp.siret = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Long("row3.body:/root/etablissement/siret");
									siret_tmp.statutDiffusionEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/statutDiffusionEtablissement");
									siret_tmp.dateCreationEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date(
											"row3.body:/root/etablissement/dateCreationEtablissement", "dd-MM-yyyy");
									siret_tmp.trancheEffectifsEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/trancheEffectifsEtablissement");
									siret_tmp.anneeEffectifsEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/anneeEffectifsEtablissement");
									siret_tmp.activitePrincipaleRegistreMetiersEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/activitePrincipaleRegistreMetiersEtablissement");
									siret_tmp.dateDernierTraitementEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Date(
													"row3.body:/root/etablissement/dateDernierTraitementEtablissement",
													"yyyy-MM-dd'T'HH:mm:ss");
									siret_tmp.etablissementSiege = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean("row3.body:/root/etablissement/etablissementSiege");
									siret_tmp.nombrePeriodesEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Long("row3.body:/root/etablissement/nombrePeriodesEtablissement");
									siret_tmp.etatAdministratifUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/etatAdministratifUniteLegale");
									siret_tmp.statutDiffusionUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/statutDiffusionUniteLegale");
									siret_tmp.dateCreationUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date(
											"row3.body:/root/etablissement/uniteLegale/dateCreationUniteLegale",
											"dd-MM-yyyy");
									siret_tmp.categorieJuridiqueUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Long(
													"row3.body:/root/etablissement/uniteLegale/categorieJuridiqueUniteLegale");
									siret_tmp.denominationUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/denominationUniteLegale");
									siret_tmp.sigleUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/sigleUniteLegale");
									siret_tmp.denominationUsuelle1UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/denominationUsuelle1UniteLegale");
									siret_tmp.denominationUsuelle2UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/denominationUsuelle2UniteLegale");
									siret_tmp.denominationUsuelle3UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/denominationUsuelle3UniteLegale");
									siret_tmp.sexeUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/sexeUniteLegale");
									siret_tmp.nomUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/nomUniteLegale");
									siret_tmp.nomUsageUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/nomUsageUniteLegale");
									siret_tmp.prenom1UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/prenom1UniteLegale");
									siret_tmp.prenom2UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/prenom2UniteLegale");
									siret_tmp.prenom3UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/prenom3UniteLegale");
									siret_tmp.prenom4UniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/uniteLegale/prenom4UniteLegale");
									siret_tmp.prenomUsuelUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/prenomUsuelUniteLegale");
									siret_tmp.pseudonymeUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/pseudonymeUniteLegale");
									siret_tmp.activitePrincipaleUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/activitePrincipaleUniteLegale");
									siret_tmp.nomenclatureActivitePrincipaleUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/nomenclatureActivitePrincipaleUniteLegale");
									siret_tmp.identifiantAssociationUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/identifiantAssociationUniteLegale");
									siret_tmp.economieSocialeSolidaireUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/economieSocialeSolidaireUniteLegale");
									siret_tmp.caractereEmployeurUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/caractereEmployeurUniteLegale");
									siret_tmp.trancheEffectifsUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/uniteLegale/trancheEffectifsUniteLegale");
									siret_tmp.anneeEffectifsUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/anneeEffectifsUniteLegale");
									siret_tmp.nicSiegeUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Long("row3.body:/root/etablissement/uniteLegale/nicSiegeUniteLegale");
									siret_tmp.dateDernierTraitementUniteLegale = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Date(
													"row3.body:/root/etablissement/uniteLegale/dateDernierTraitementUniteLegale",
													"yyyy-MM-dd'T'HH:mm:ss");
									siret_tmp.categorieEntreprise = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/uniteLegale/categorieEntreprise");
									siret_tmp.anneeCategorieEntreprise = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Long(
											"row3.body:/root/etablissement/uniteLegale/anneeCategorieEntreprise");
									siret_tmp.complementAdresseEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/complementAdresseEtablissement");
									siret_tmp.numeroVoieEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/numeroVoieEtablissement");
									siret_tmp.indiceRepetitionEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/indiceRepetitionEtablissement");
									siret_tmp.typeVoieEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/typeVoieEtablissement");
									siret_tmp.libelleVoieEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/libelleVoieEtablissement");
									siret_tmp.codePostalEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/codePostalEtablissement");
									siret_tmp.libelleCommuneEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/libelleCommuneEtablissement");
									siret_tmp.libelleCommuneEtrangerEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/libelleCommuneEtrangerEtablissement");
									siret_tmp.distributionSpecialeEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/distributionSpecialeEtablissement");
									siret_tmp.codeCommuneEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/codeCommuneEtablissement");
									siret_tmp.codeCedexEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/codeCedexEtablissement");
									siret_tmp.libelleCedexEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresseEtablissement/libelleCedexEtablissement");
									siret_tmp.codePaysEtrangerEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/codePaysEtrangerEtablissement");
									siret_tmp.libellePaysEtrangerEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresseEtablissement/libellePaysEtrangerEtablissement");
									siret_tmp.complementAdresse2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/complementAdresse2Etablissement");
									siret_tmp.numeroVoie2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/numeroVoie2Etablissement");
									siret_tmp.indiceRepetition2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/indiceRepetition2Etablissement");
									siret_tmp.typeVoie2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/typeVoie2Etablissement");
									siret_tmp.libelleVoie2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/libelleVoie2Etablissement");
									siret_tmp.codePostal2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/codePostal2Etablissement");
									siret_tmp.libelleCommune2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/libelleCommune2Etablissement");
									siret_tmp.libelleCommuneEtranger2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/libelleCommuneEtranger2Etablissement");
									siret_tmp.distributionSpeciale2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/distributionSpeciale2Etablissement");
									siret_tmp.codeCommune2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/codeCommune2Etablissement");
									siret_tmp.codeCedex2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/codeCedex2Etablissement");
									siret_tmp.libelleCedex2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/adresse2Etablissement/libelleCedex2Etablissement");
									siret_tmp.codePaysEtranger2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/codePaysEtranger2Etablissement");
									siret_tmp.libellePaysEtranger2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/adresse2Etablissement/libellePaysEtranger2Etablissement");
									siret_tmp.dateFin = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String("row3.body:/root/etablissement/periodesEtablissement/dateFin");
									siret_tmp.dateDebut = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_Date(
											"row3.body:/root/etablissement/periodesEtablissement/dateDebut",
											"dd-MM-yyyy");
									siret_tmp.etatAdministratifEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/periodesEtablissement/etatAdministratifEtablissement");
									siret_tmp.changementEtatAdministratifEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean(
													"row3.body:/root/etablissement/periodesEtablissement/changementEtatAdministratifEtablissement");
									siret_tmp.enseigne1Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/periodesEtablissement/enseigne1Etablissement");
									siret_tmp.enseigne2Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/periodesEtablissement/enseigne2Etablissement");
									siret_tmp.enseigne3Etablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String(
											"row3.body:/root/etablissement/periodesEtablissement/enseigne3Etablissement");
									siret_tmp.changementEnseigneEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean(
													"row3.body:/root/etablissement/periodesEtablissement/changementEnseigneEtablissement");
									siret_tmp.denominationUsuelleEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/periodesEtablissement/denominationUsuelleEtablissement");
									siret_tmp.changementDenominationUsuelleEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean(
													"row3.body:/root/etablissement/periodesEtablissement/changementDenominationUsuelleEtablissement");
									siret_tmp.activitePrincipaleEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/periodesEtablissement/activitePrincipaleEtablissement");
									siret_tmp.nomenclatureActivitePrincipaleEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/periodesEtablissement/nomenclatureActivitePrincipaleEtablissement");
									siret_tmp.changementActivitePrincipaleEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean(
													"row3.body:/root/etablissement/periodesEtablissement/changementActivitePrincipaleEtablissement");
									siret_tmp.caractereEmployeurEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_String(
													"row3.body:/root/etablissement/periodesEtablissement/caractereEmployeurEtablissement");
									siret_tmp.changementCaractereEmployeurEtablissement = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
											.get_Boolean(
													"row3.body:/root/etablissement/periodesEtablissement/changementCaractereEmployeurEtablissement");
									allOutsForAggregate_tXMLMap_2.add(siret_tmp);

// ###############################

								} // end of Var scope

								rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

							} // G_TXM_M_001 close

							tos_count_tXMLMap_2_TXMLMAP_OUT++;

							/**
							 * [tXMLMap_2_TXMLMAP_OUT main ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_OUT";

							/**
							 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_OUT";

							/**
							 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] stop
							 */

						} // End of branch "row3"

// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfrejetcs = null;

// # Output table : 'copyOfrejetcs'
								copyOfrejetcs_tmp.errorCode = row4.errorCode;
								copyOfrejetcs_tmp.errorMessage = row4.errorMessage;
								copyOfrejetcs = copyOfrejetcs_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "copyOfrejetcs"
							if (copyOfrejetcs != null) {

								/**
								 * [tFileOutputExcel_3 main ] start
								 */

								currentComponent = "tFileOutputExcel_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "copyOfrejetcs"

									);
								}

								xlsxTool_tFileOutputExcel_3.addRow();

								if (copyOfrejetcs.errorCode != null) {

									xlsxTool_tFileOutputExcel_3
											.addCellValue(Double.parseDouble(String.valueOf(copyOfrejetcs.errorCode)));
								} else {
									xlsxTool_tFileOutputExcel_3.addCellNullValue();
								}

								if (copyOfrejetcs.errorMessage != null) {

									xlsxTool_tFileOutputExcel_3
											.addCellValue(String.valueOf(copyOfrejetcs.errorMessage));
								} else {
									xlsxTool_tFileOutputExcel_3.addCellNullValue();
								}

								nb_line_tFileOutputExcel_3++;

								tos_count_tFileOutputExcel_3++;

								/**
								 * [tFileOutputExcel_3 main ] stop
								 */

								/**
								 * [tFileOutputExcel_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputExcel_3";

								/**
								 * [tFileOutputExcel_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputExcel_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputExcel_3";

								/**
								 * [tFileOutputExcel_3 process_data_end ] stop
								 */

							} // End of branch "copyOfrejetcs"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tRESTClient_2 process_data_end ] start
						 */

						currentComponent = "tRESTClient_2";

						/**
						 * [tRESTClient_2 process_data_end ] stop
						 */

					} // End of branch "siret_to_api"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 process_data_end ] start
					 */

					currentComponent = "tHashInput_3";

					/**
					 * [tHashInput_3 process_data_end ] stop
					 */

					/**
					 * [tHashInput_3 end ] start
					 */

					currentComponent = "tHashInput_3";

					nb_line_tHashInput_3++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);

				ok_Hash.put("tHashInput_3", true);
				end_Hash.put("tHashInput_3", System.currentTimeMillis());

				/**
				 * [tHashInput_3 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "extract_siert");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tRESTClient_2 end ] start
				 */

				currentComponent = "tRESTClient_2";

				if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
					globalMap.put("tRESTClient_2_NB_LINE", 1);
				}

// [tRESTCliend_end]
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "siret_to_api");
				}

				ok_Hash.put("tRESTClient_2", true);
				end_Hash.put("tRESTClient_2", System.currentTimeMillis());

				/**
				 * [tRESTClient_2 end ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tHashOutput_3 begin ] start
				 */

				ok_Hash.put("tHashOutput_3", false);
				start_Hash.put("tHashOutput_3", System.currentTimeMillis());

				currentComponent = "tHashOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "save_siret");
				}

				int tos_count_tHashOutput_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_siretStruct> tHashFile_tHashOutput_3 = null;
				String hashKey_tHashOutput_3 = "tHashFile_GET_DATAS_" + pid + "_tHashOutput_3";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_3)) {
					if (mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null) {
						mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_siretStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
					} else {
						tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
					}
				}
				int nb_line_tHashOutput_3 = 0;

				/**
				 * [tHashOutput_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "siret");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/siret.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("siren");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nic");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("siret");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("statutDiffusionEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateCreationEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("trancheEffectifsEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("anneeEffectifsEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("activitePrincipaleRegistreMetiersEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateDernierTraitementEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("etablissementSiege");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nombrePeriodesEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("etatAdministratifUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("statutDiffusionUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateCreationUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("categorieJuridiqueUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("denominationUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sigleUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("denominationUsuelle1UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("denominationUsuelle2UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("denominationUsuelle3UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sexeUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nomUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nomUsageUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("prenom1UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("prenom2UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("prenom3UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("prenom4UniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("prenomUsuelUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("pseudonymeUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("activitePrincipaleUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nomenclatureActivitePrincipaleUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("identifiantAssociationUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("economieSocialeSolidaireUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("caractereEmployeurUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("trancheEffectifsUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("anneeEffectifsUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nicSiegeUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateDernierTraitementUniteLegale");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("categorieEntreprise");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("anneeCategorieEntreprise");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("complementAdresseEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("numeroVoieEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("indiceRepetitionEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("typeVoieEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleVoieEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codePostalEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCommuneEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCommuneEtrangerEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("distributionSpecialeEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codeCommuneEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codeCedexEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCedexEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codePaysEtrangerEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libellePaysEtrangerEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("complementAdresse2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("numeroVoie2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("indiceRepetition2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("typeVoie2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleVoie2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codePostal2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCommune2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCommuneEtranger2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("distributionSpeciale2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codeCommune2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codeCedex2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libelleCedex2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("codePaysEtranger2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("libellePaysEtranger2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateFin");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("dateDebut");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("etatAdministratifEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("changementEtatAdministratifEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("enseigne1Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("enseigne2Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("enseigne3Etablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("changementEnseigneEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("denominationUsuelleEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("changementDenominationUsuelleEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("activitePrincipaleEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("nomenclatureActivitePrincipaleEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("changementActivitePrincipaleEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("caractereEmployeurEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("changementCaractereEmployeurEtablissement");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				int tos_count_tXMLMap_2_TXMLMAP_IN = 0;

				java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_2");
				for (Object row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {// TD512

					/**
					 * [tXMLMap_2_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					siret = null;
					if (row_out_tXMLMap_2_TXMLMAP_IN != null && row_out_tXMLMap_2_TXMLMAP_IN instanceof siretStruct) {
						siret = (siretStruct) row_out_tXMLMap_2_TXMLMAP_IN;
					}

					tos_count_tXMLMap_2_TXMLMAP_IN++;

					/**
					 * [tXMLMap_2_TXMLMAP_IN main ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					/**
					 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] stop
					 */
// Start of branch "siret"
					if (siret != null) {

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "siret"

							);
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (siret.siren != null) {
							sb_tFileOutputDelimited_2.append(siret.siren);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nic != null) {
							sb_tFileOutputDelimited_2.append(siret.nic);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.siret != null) {
							sb_tFileOutputDelimited_2.append(siret.siret);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.statutDiffusionEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.statutDiffusionEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateCreationEtablissement != null) {
							sb_tFileOutputDelimited_2
									.append(FormatterUtils.format_Date(siret.dateCreationEtablissement, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.trancheEffectifsEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.trancheEffectifsEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.anneeEffectifsEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.anneeEffectifsEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.activitePrincipaleRegistreMetiersEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.activitePrincipaleRegistreMetiersEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateDernierTraitementEtablissement != null) {
							sb_tFileOutputDelimited_2.append(FormatterUtils
									.format_Date(siret.dateDernierTraitementEtablissement, "yyyy-MM-dd'T'HH:mm:ss"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.etablissementSiege != null) {
							sb_tFileOutputDelimited_2.append(siret.etablissementSiege);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nombrePeriodesEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.nombrePeriodesEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.etatAdministratifUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.etatAdministratifUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.statutDiffusionUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.statutDiffusionUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateCreationUniteLegale != null) {
							sb_tFileOutputDelimited_2
									.append(FormatterUtils.format_Date(siret.dateCreationUniteLegale, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.categorieJuridiqueUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.categorieJuridiqueUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.denominationUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.denominationUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.sigleUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.sigleUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.denominationUsuelle1UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.denominationUsuelle1UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.denominationUsuelle2UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.denominationUsuelle2UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.denominationUsuelle3UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.denominationUsuelle3UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.sexeUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.sexeUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nomUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.nomUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nomUsageUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.nomUsageUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.prenom1UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.prenom1UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.prenom2UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.prenom2UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.prenom3UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.prenom3UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.prenom4UniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.prenom4UniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.prenomUsuelUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.prenomUsuelUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.pseudonymeUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.pseudonymeUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.activitePrincipaleUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.activitePrincipaleUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nomenclatureActivitePrincipaleUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.nomenclatureActivitePrincipaleUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.identifiantAssociationUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.identifiantAssociationUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.economieSocialeSolidaireUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.economieSocialeSolidaireUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.caractereEmployeurUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.caractereEmployeurUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.trancheEffectifsUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.trancheEffectifsUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.anneeEffectifsUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.anneeEffectifsUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nicSiegeUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(siret.nicSiegeUniteLegale);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateDernierTraitementUniteLegale != null) {
							sb_tFileOutputDelimited_2.append(FormatterUtils
									.format_Date(siret.dateDernierTraitementUniteLegale, "yyyy-MM-dd'T'HH:mm:ss"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.categorieEntreprise != null) {
							sb_tFileOutputDelimited_2.append(siret.categorieEntreprise);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.anneeCategorieEntreprise != null) {
							sb_tFileOutputDelimited_2.append(siret.anneeCategorieEntreprise);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.complementAdresseEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.complementAdresseEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.numeroVoieEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.numeroVoieEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.indiceRepetitionEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.indiceRepetitionEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.typeVoieEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.typeVoieEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleVoieEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleVoieEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codePostalEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codePostalEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCommuneEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCommuneEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCommuneEtrangerEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCommuneEtrangerEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.distributionSpecialeEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.distributionSpecialeEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codeCommuneEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codeCommuneEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codeCedexEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codeCedexEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCedexEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCedexEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codePaysEtrangerEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codePaysEtrangerEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libellePaysEtrangerEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libellePaysEtrangerEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.complementAdresse2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.complementAdresse2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.numeroVoie2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.numeroVoie2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.indiceRepetition2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.indiceRepetition2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.typeVoie2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.typeVoie2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleVoie2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleVoie2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codePostal2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codePostal2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCommune2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCommune2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCommuneEtranger2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCommuneEtranger2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.distributionSpeciale2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.distributionSpeciale2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codeCommune2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codeCommune2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codeCedex2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codeCedex2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libelleCedex2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libelleCedex2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.codePaysEtranger2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.codePaysEtranger2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.libellePaysEtranger2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.libellePaysEtranger2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateFin != null) {
							sb_tFileOutputDelimited_2.append(siret.dateFin);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.dateDebut != null) {
							sb_tFileOutputDelimited_2.append(FormatterUtils.format_Date(siret.dateDebut, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.etatAdministratifEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.etatAdministratifEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.changementEtatAdministratifEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.changementEtatAdministratifEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.enseigne1Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.enseigne1Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.enseigne2Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.enseigne2Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.enseigne3Etablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.enseigne3Etablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.changementEnseigneEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.changementEnseigneEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.denominationUsuelleEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.denominationUsuelleEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.changementDenominationUsuelleEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.changementDenominationUsuelleEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.activitePrincipaleEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.activitePrincipaleEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.nomenclatureActivitePrincipaleEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.nomenclatureActivitePrincipaleEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.changementActivitePrincipaleEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.changementActivitePrincipaleEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.caractereEmployeurEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.caractereEmployeurEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (siret.changementCaractereEmployeurEtablissement != null) {
							sb_tFileOutputDelimited_2.append(siret.changementCaractereEmployeurEtablissement);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

						save_siret = siret;

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_3 main ] start
						 */

						currentComponent = "tHashOutput_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "save_siret"

							);
						}

						save_siretStruct oneRow_tHashOutput_3 = new save_siretStruct();

						oneRow_tHashOutput_3.siren = save_siret.siren;
						oneRow_tHashOutput_3.nic = save_siret.nic;
						oneRow_tHashOutput_3.siret = save_siret.siret;
						oneRow_tHashOutput_3.statutDiffusionEtablissement = save_siret.statutDiffusionEtablissement;
						oneRow_tHashOutput_3.dateCreationEtablissement = save_siret.dateCreationEtablissement;
						oneRow_tHashOutput_3.trancheEffectifsEtablissement = save_siret.trancheEffectifsEtablissement;
						oneRow_tHashOutput_3.anneeEffectifsEtablissement = save_siret.anneeEffectifsEtablissement;
						oneRow_tHashOutput_3.activitePrincipaleRegistreMetiersEtablissement = save_siret.activitePrincipaleRegistreMetiersEtablissement;
						oneRow_tHashOutput_3.dateDernierTraitementEtablissement = save_siret.dateDernierTraitementEtablissement;
						oneRow_tHashOutput_3.etablissementSiege = save_siret.etablissementSiege;
						oneRow_tHashOutput_3.nombrePeriodesEtablissement = save_siret.nombrePeriodesEtablissement;
						oneRow_tHashOutput_3.etatAdministratifUniteLegale = save_siret.etatAdministratifUniteLegale;
						oneRow_tHashOutput_3.statutDiffusionUniteLegale = save_siret.statutDiffusionUniteLegale;
						oneRow_tHashOutput_3.dateCreationUniteLegale = save_siret.dateCreationUniteLegale;
						oneRow_tHashOutput_3.categorieJuridiqueUniteLegale = save_siret.categorieJuridiqueUniteLegale;
						oneRow_tHashOutput_3.denominationUniteLegale = save_siret.denominationUniteLegale;
						oneRow_tHashOutput_3.sigleUniteLegale = save_siret.sigleUniteLegale;
						oneRow_tHashOutput_3.denominationUsuelle1UniteLegale = save_siret.denominationUsuelle1UniteLegale;
						oneRow_tHashOutput_3.denominationUsuelle2UniteLegale = save_siret.denominationUsuelle2UniteLegale;
						oneRow_tHashOutput_3.denominationUsuelle3UniteLegale = save_siret.denominationUsuelle3UniteLegale;
						oneRow_tHashOutput_3.sexeUniteLegale = save_siret.sexeUniteLegale;
						oneRow_tHashOutput_3.nomUniteLegale = save_siret.nomUniteLegale;
						oneRow_tHashOutput_3.nomUsageUniteLegale = save_siret.nomUsageUniteLegale;
						oneRow_tHashOutput_3.prenom1UniteLegale = save_siret.prenom1UniteLegale;
						oneRow_tHashOutput_3.prenom2UniteLegale = save_siret.prenom2UniteLegale;
						oneRow_tHashOutput_3.prenom3UniteLegale = save_siret.prenom3UniteLegale;
						oneRow_tHashOutput_3.prenom4UniteLegale = save_siret.prenom4UniteLegale;
						oneRow_tHashOutput_3.prenomUsuelUniteLegale = save_siret.prenomUsuelUniteLegale;
						oneRow_tHashOutput_3.pseudonymeUniteLegale = save_siret.pseudonymeUniteLegale;
						oneRow_tHashOutput_3.activitePrincipaleUniteLegale = save_siret.activitePrincipaleUniteLegale;
						oneRow_tHashOutput_3.nomenclatureActivitePrincipaleUniteLegale = save_siret.nomenclatureActivitePrincipaleUniteLegale;
						oneRow_tHashOutput_3.identifiantAssociationUniteLegale = save_siret.identifiantAssociationUniteLegale;
						oneRow_tHashOutput_3.economieSocialeSolidaireUniteLegale = save_siret.economieSocialeSolidaireUniteLegale;
						oneRow_tHashOutput_3.caractereEmployeurUniteLegale = save_siret.caractereEmployeurUniteLegale;
						oneRow_tHashOutput_3.trancheEffectifsUniteLegale = save_siret.trancheEffectifsUniteLegale;
						oneRow_tHashOutput_3.anneeEffectifsUniteLegale = save_siret.anneeEffectifsUniteLegale;
						oneRow_tHashOutput_3.nicSiegeUniteLegale = save_siret.nicSiegeUniteLegale;
						oneRow_tHashOutput_3.dateDernierTraitementUniteLegale = save_siret.dateDernierTraitementUniteLegale;
						oneRow_tHashOutput_3.categorieEntreprise = save_siret.categorieEntreprise;
						oneRow_tHashOutput_3.anneeCategorieEntreprise = save_siret.anneeCategorieEntreprise;
						oneRow_tHashOutput_3.complementAdresseEtablissement = save_siret.complementAdresseEtablissement;
						oneRow_tHashOutput_3.numeroVoieEtablissement = save_siret.numeroVoieEtablissement;
						oneRow_tHashOutput_3.indiceRepetitionEtablissement = save_siret.indiceRepetitionEtablissement;
						oneRow_tHashOutput_3.typeVoieEtablissement = save_siret.typeVoieEtablissement;
						oneRow_tHashOutput_3.libelleVoieEtablissement = save_siret.libelleVoieEtablissement;
						oneRow_tHashOutput_3.codePostalEtablissement = save_siret.codePostalEtablissement;
						oneRow_tHashOutput_3.libelleCommuneEtablissement = save_siret.libelleCommuneEtablissement;
						oneRow_tHashOutput_3.libelleCommuneEtrangerEtablissement = save_siret.libelleCommuneEtrangerEtablissement;
						oneRow_tHashOutput_3.distributionSpecialeEtablissement = save_siret.distributionSpecialeEtablissement;
						oneRow_tHashOutput_3.codeCommuneEtablissement = save_siret.codeCommuneEtablissement;
						oneRow_tHashOutput_3.codeCedexEtablissement = save_siret.codeCedexEtablissement;
						oneRow_tHashOutput_3.libelleCedexEtablissement = save_siret.libelleCedexEtablissement;
						oneRow_tHashOutput_3.codePaysEtrangerEtablissement = save_siret.codePaysEtrangerEtablissement;
						oneRow_tHashOutput_3.libellePaysEtrangerEtablissement = save_siret.libellePaysEtrangerEtablissement;
						oneRow_tHashOutput_3.complementAdresse2Etablissement = save_siret.complementAdresse2Etablissement;
						oneRow_tHashOutput_3.numeroVoie2Etablissement = save_siret.numeroVoie2Etablissement;
						oneRow_tHashOutput_3.indiceRepetition2Etablissement = save_siret.indiceRepetition2Etablissement;
						oneRow_tHashOutput_3.typeVoie2Etablissement = save_siret.typeVoie2Etablissement;
						oneRow_tHashOutput_3.libelleVoie2Etablissement = save_siret.libelleVoie2Etablissement;
						oneRow_tHashOutput_3.codePostal2Etablissement = save_siret.codePostal2Etablissement;
						oneRow_tHashOutput_3.libelleCommune2Etablissement = save_siret.libelleCommune2Etablissement;
						oneRow_tHashOutput_3.libelleCommuneEtranger2Etablissement = save_siret.libelleCommuneEtranger2Etablissement;
						oneRow_tHashOutput_3.distributionSpeciale2Etablissement = save_siret.distributionSpeciale2Etablissement;
						oneRow_tHashOutput_3.codeCommune2Etablissement = save_siret.codeCommune2Etablissement;
						oneRow_tHashOutput_3.codeCedex2Etablissement = save_siret.codeCedex2Etablissement;
						oneRow_tHashOutput_3.libelleCedex2Etablissement = save_siret.libelleCedex2Etablissement;
						oneRow_tHashOutput_3.codePaysEtranger2Etablissement = save_siret.codePaysEtranger2Etablissement;
						oneRow_tHashOutput_3.libellePaysEtranger2Etablissement = save_siret.libellePaysEtranger2Etablissement;
						oneRow_tHashOutput_3.dateFin = save_siret.dateFin;
						oneRow_tHashOutput_3.dateDebut = save_siret.dateDebut;
						oneRow_tHashOutput_3.etatAdministratifEtablissement = save_siret.etatAdministratifEtablissement;
						oneRow_tHashOutput_3.changementEtatAdministratifEtablissement = save_siret.changementEtatAdministratifEtablissement;
						oneRow_tHashOutput_3.enseigne1Etablissement = save_siret.enseigne1Etablissement;
						oneRow_tHashOutput_3.enseigne2Etablissement = save_siret.enseigne2Etablissement;
						oneRow_tHashOutput_3.enseigne3Etablissement = save_siret.enseigne3Etablissement;
						oneRow_tHashOutput_3.changementEnseigneEtablissement = save_siret.changementEnseigneEtablissement;
						oneRow_tHashOutput_3.denominationUsuelleEtablissement = save_siret.denominationUsuelleEtablissement;
						oneRow_tHashOutput_3.changementDenominationUsuelleEtablissement = save_siret.changementDenominationUsuelleEtablissement;
						oneRow_tHashOutput_3.activitePrincipaleEtablissement = save_siret.activitePrincipaleEtablissement;
						oneRow_tHashOutput_3.nomenclatureActivitePrincipaleEtablissement = save_siret.nomenclatureActivitePrincipaleEtablissement;
						oneRow_tHashOutput_3.changementActivitePrincipaleEtablissement = save_siret.changementActivitePrincipaleEtablissement;
						oneRow_tHashOutput_3.caractereEmployeurEtablissement = save_siret.caractereEmployeurEtablissement;
						oneRow_tHashOutput_3.changementCaractereEmployeurEtablissement = save_siret.changementCaractereEmployeurEtablissement;

						tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
						nb_line_tHashOutput_3++;

						tos_count_tHashOutput_3++;

						/**
						 * [tHashOutput_3 main ] stop
						 */

						/**
						 * [tHashOutput_3 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_3";

						/**
						 * [tHashOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_3 process_data_end ] start
						 */

						currentComponent = "tHashOutput_3";

						/**
						 * [tHashOutput_3 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

					} // End of branch "siret"

					/**
					 * [tXMLMap_2_TXMLMAP_IN process_data_end ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					/**
					 * [tXMLMap_2_TXMLMAP_IN process_data_end ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

				} // TD512

				ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_2_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "siret");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tHashOutput_3 end ] start
				 */

				currentComponent = "tHashOutput_3";

				globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "save_siret");
				}

				ok_Hash.put("tHashOutput_3", true);
				end_Hash.put("tHashOutput_3", System.currentTimeMillis());

				/**
				 * [tHashOutput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3, true);

				if (headerIsInserted_tFileOutputExcel_3 && nb_line_tFileOutputExcel_3 > 0) {
					nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 - 1;
				}
				globalMap.put("tFileOutputExcel_3_NB_LINE", nb_line_tFileOutputExcel_3);

				if (isFileGenerated_tFileOutputExcel_3 && nb_line_tFileOutputExcel_3 == 0) {

					file_tFileOutputExcel_3.delete();

				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfrejetcs");
				}

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tHashInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_3 finally ] start
				 */

				currentComponent = "tHashInput_3";

				/**
				 * [tHashInput_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tRESTClient_2 finally ] start
				 */

				currentComponent = "tRESTClient_2";

				/**
				 * [tRESTClient_2 finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tHashOutput_3 finally ] start
				 */

				currentComponent = "tHashOutput_3";

				/**
				 * [tHashOutput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}

	public static class all_datasStruct implements routines.system.IPersistableRow<all_datasStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append(",siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(all_datasStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clients_siret_sirenStruct
			implements routines.system.IPersistableRow<clients_siret_sirenStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clients_siret_sirenStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_7Process(globalMap);

				clients_siret_sirenStruct clients_siret_siren = new clients_siret_sirenStruct();
				all_datasStruct all_datas = new all_datasStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "all_datas");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("entreprises");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("entreprises");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "epsi";
				dbUser_tDBOutput_1 = "romain";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:voYPeO4gzMwHUGJKdmffa50btn1tyHFIdYDQL0B/R1KPtg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(("entreprises"))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"ID\" INT4 ,\"Metier\" VARCHAR(150)  ,\"Code_COMPTA\" VARCHAR(150)  ,\"NOMS_CLIENTS\" VARCHAR(150)  ,\"SIREN_SIRET\" VARCHAR(150)  ,\"CODE_FACTU\" VARCHAR(80)  ,\"ADRESSE_FACTU\" VARCHAR(500)  ,\"CP\" INT4 ,\"VILLE\" VARCHAR(150)  ,\"PAYS\" VARCHAR(150)  ,\"CONTACT_GENRE\" VARCHAR(150)  ,\"CONTACT_NOM\" VARCHAR(150)  ,\"CONTACT_PRENOM\" VARCHAR(150)  ,\"CONTACT1_MAIL\" VARCHAR(150)  ,\"CONTACT1_TEL_FIXE\" VARCHAR(150)  ,\"siren\" INT8 ,\"nic\" INT4 ,\"siret\" INT8 ,\"statutDiffusionEtablissement\" VARCHAR ,\"dateCreationEtablissement\" TIMESTAMP ,\"trancheEffectifsEtablissement\" VARCHAR ,\"anneeEffectifsEtablissement\" VARCHAR ,\"activitePrincipaleRegistreMetiersEtablissement\" VARCHAR ,\"dateDernierTraitementEtablissement\" TIMESTAMP ,\"etablissementSiege\" BOOL ,\"nombrePeriodesEtablissement\" INT8 ,\"etatAdministratifUniteLegale\" VARCHAR ,\"statutDiffusionUniteLegale\" VARCHAR ,\"dateCreationUniteLegale\" TIMESTAMP ,\"categorieJuridiqueUniteLegale\" INT8 ,\"denominationUniteLegale\" VARCHAR ,\"sigleUniteLegale\" VARCHAR ,\"denominationUsuelle1UniteLegale\" VARCHAR ,\"denominationUsuelle2UniteLegale\" VARCHAR ,\"denominationUsuelle3UniteLegale\" VARCHAR ,\"sexeUniteLegale\" VARCHAR ,\"nomUniteLegale\" VARCHAR ,\"nomUsageUniteLegale\" VARCHAR ,\"prenom1UniteLegale\" VARCHAR ,\"prenom2UniteLegale\" VARCHAR ,\"prenom3UniteLegale\" VARCHAR ,\"prenom4UniteLegale\" VARCHAR ,\"prenomUsuelUniteLegale\" VARCHAR ,\"pseudonymeUniteLegale\" VARCHAR ,\"activitePrincipaleUniteLegale\" VARCHAR ,\"nomenclatureActivitePrincipaleUniteLegale\" VARCHAR ,\"identifiantAssociationUniteLegale\" VARCHAR ,\"economieSocialeSolidaireUniteLegale\" VARCHAR ,\"caractereEmployeurUniteLegale\" VARCHAR ,\"trancheEffectifsUniteLegale\" VARCHAR ,\"anneeEffectifsUniteLegale\" VARCHAR ,\"nicSiegeUniteLegale\" INT8 ,\"dateDernierTraitementUniteLegale\" TIMESTAMP ,\"categorieEntreprise\" VARCHAR ,\"anneeCategorieEntreprise\" INT8 ,\"complementAdresseEtablissement\" VARCHAR ,\"numeroVoieEtablissement\" VARCHAR ,\"indiceRepetitionEtablissement\" VARCHAR ,\"typeVoieEtablissement\" VARCHAR ,\"libelleVoieEtablissement\" VARCHAR ,\"codePostalEtablissement\" VARCHAR ,\"libelleCommuneEtablissement\" VARCHAR ,\"libelleCommuneEtrangerEtablissement\" VARCHAR ,\"distributionSpecialeEtablissement\" VARCHAR ,\"codeCommuneEtablissement\" VARCHAR ,\"codeCedexEtablissement\" VARCHAR ,\"libelleCedexEtablissement\" VARCHAR ,\"codePaysEtrangerEtablissement\" VARCHAR ,\"libellePaysEtrangerEtablissement\" VARCHAR ,\"complementAdresse2Etablissement\" VARCHAR ,\"numeroVoie2Etablissement\" VARCHAR ,\"indiceRepetition2Etablissement\" VARCHAR ,\"typeVoie2Etablissement\" VARCHAR ,\"libelleVoie2Etablissement\" VARCHAR ,\"codePostal2Etablissement\" VARCHAR ,\"libelleCommune2Etablissement\" VARCHAR ,\"libelleCommuneEtranger2Etablissement\" VARCHAR ,\"distributionSpeciale2Etablissement\" VARCHAR ,\"codeCommune2Etablissement\" VARCHAR ,\"codeCedex2Etablissement\" VARCHAR ,\"libelleCedex2Etablissement\" VARCHAR ,\"codePaysEtranger2Etablissement\" VARCHAR ,\"libellePaysEtranger2Etablissement\" VARCHAR ,\"dateFin\" VARCHAR ,\"dateDebut\" TIMESTAMP ,\"etatAdministratifEtablissement\" VARCHAR ,\"changementEtatAdministratifEtablissement\" BOOL ,\"enseigne1Etablissement\" VARCHAR ,\"enseigne2Etablissement\" VARCHAR ,\"enseigne3Etablissement\" VARCHAR ,\"changementEnseigneEtablissement\" BOOL ,\"denominationUsuelleEtablissement\" VARCHAR ,\"changementDenominationUsuelleEtablissement\" BOOL ,\"activitePrincipaleEtablissement\" VARCHAR ,\"nomenclatureActivitePrincipaleEtablissement\" VARCHAR ,\"changementActivitePrincipaleEtablissement\" BOOL ,\"caractereEmployeurEtablissement\" VARCHAR ,\"changementCaractereEmployeurEtablissement\" BOOL )");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID\",\"Metier\",\"Code_COMPTA\",\"NOMS_CLIENTS\",\"SIREN_SIRET\",\"CODE_FACTU\",\"ADRESSE_FACTU\",\"CP\",\"VILLE\",\"PAYS\",\"CONTACT_GENRE\",\"CONTACT_NOM\",\"CONTACT_PRENOM\",\"CONTACT1_MAIL\",\"CONTACT1_TEL_FIXE\",\"siren\",\"nic\",\"siret\",\"statutDiffusionEtablissement\",\"dateCreationEtablissement\",\"trancheEffectifsEtablissement\",\"anneeEffectifsEtablissement\",\"activitePrincipaleRegistreMetiersEtablissement\",\"dateDernierTraitementEtablissement\",\"etablissementSiege\",\"nombrePeriodesEtablissement\",\"etatAdministratifUniteLegale\",\"statutDiffusionUniteLegale\",\"dateCreationUniteLegale\",\"categorieJuridiqueUniteLegale\",\"denominationUniteLegale\",\"sigleUniteLegale\",\"denominationUsuelle1UniteLegale\",\"denominationUsuelle2UniteLegale\",\"denominationUsuelle3UniteLegale\",\"sexeUniteLegale\",\"nomUniteLegale\",\"nomUsageUniteLegale\",\"prenom1UniteLegale\",\"prenom2UniteLegale\",\"prenom3UniteLegale\",\"prenom4UniteLegale\",\"prenomUsuelUniteLegale\",\"pseudonymeUniteLegale\",\"activitePrincipaleUniteLegale\",\"nomenclatureActivitePrincipaleUniteLegale\",\"identifiantAssociationUniteLegale\",\"economieSocialeSolidaireUniteLegale\",\"caractereEmployeurUniteLegale\",\"trancheEffectifsUniteLegale\",\"anneeEffectifsUniteLegale\",\"nicSiegeUniteLegale\",\"dateDernierTraitementUniteLegale\",\"categorieEntreprise\",\"anneeCategorieEntreprise\",\"complementAdresseEtablissement\",\"numeroVoieEtablissement\",\"indiceRepetitionEtablissement\",\"typeVoieEtablissement\",\"libelleVoieEtablissement\",\"codePostalEtablissement\",\"libelleCommuneEtablissement\",\"libelleCommuneEtrangerEtablissement\",\"distributionSpecialeEtablissement\",\"codeCommuneEtablissement\",\"codeCedexEtablissement\",\"libelleCedexEtablissement\",\"codePaysEtrangerEtablissement\",\"libellePaysEtrangerEtablissement\",\"complementAdresse2Etablissement\",\"numeroVoie2Etablissement\",\"indiceRepetition2Etablissement\",\"typeVoie2Etablissement\",\"libelleVoie2Etablissement\",\"codePostal2Etablissement\",\"libelleCommune2Etablissement\",\"libelleCommuneEtranger2Etablissement\",\"distributionSpeciale2Etablissement\",\"codeCommune2Etablissement\",\"codeCedex2Etablissement\",\"libelleCedex2Etablissement\",\"codePaysEtranger2Etablissement\",\"libellePaysEtranger2Etablissement\",\"dateFin\",\"dateDebut\",\"etatAdministratifEtablissement\",\"changementEtatAdministratifEtablissement\",\"enseigne1Etablissement\",\"enseigne2Etablissement\",\"enseigne3Etablissement\",\"changementEnseigneEtablissement\",\"denominationUsuelleEtablissement\",\"changementDenominationUsuelleEtablissement\",\"activitePrincipaleEtablissement\",\"nomenclatureActivitePrincipaleEtablissement\",\"changementActivitePrincipaleEtablissement\",\"caractereEmployeurEtablissement\",\"changementCaractereEmployeurEtablissement\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clients_siret_siren");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct> tHash_Lookup_sirets = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct>) globalMap
						.get("tHash_Lookup_sirets"));

				siretsStruct siretsHashKey = new siretsStruct();
				siretsStruct siretsDefault = new siretsStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				all_datasStruct all_datas_tmp = new all_datasStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tHashInput_4 begin ] start
				 */

				ok_Hash.put("tHashInput_4", false);
				start_Hash.put("tHashInput_4", System.currentTimeMillis());

				currentComponent = "tHashInput_4";

				int tos_count_tHashInput_4 = 0;

				int nb_line_tHashInput_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct> tHashFile_tHashInput_4 = mf_tHashInput_4
						.getAdvancedMemoryHashFile("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<save_clientsStruct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
				while (iterator_tHashInput_4.hasNext()) {
					save_clientsStruct next_tHashInput_4 = iterator_tHashInput_4.next();

					clients_siret_siren.ID = next_tHashInput_4.ID;
					clients_siret_siren.Metier = next_tHashInput_4.Metier;
					clients_siret_siren.Code_COMPTA = next_tHashInput_4.Code_COMPTA;
					clients_siret_siren.NOMS_CLIENTS = next_tHashInput_4.NOMS_CLIENTS;
					clients_siret_siren.SIREN_SIRET = next_tHashInput_4.SIREN_SIRET;
					clients_siret_siren.CODE_FACTU = next_tHashInput_4.CODE_FACTU;
					clients_siret_siren.ADRESSE_FACTU = next_tHashInput_4.ADRESSE_FACTU;
					clients_siret_siren.CP = next_tHashInput_4.CP;
					clients_siret_siren.VILLE = next_tHashInput_4.VILLE;
					clients_siret_siren.PAYS = next_tHashInput_4.PAYS;
					clients_siret_siren.CONTACT_GENRE = next_tHashInput_4.CONTACT_GENRE;
					clients_siret_siren.CONTACT_NOM = next_tHashInput_4.CONTACT_NOM;
					clients_siret_siren.CONTACT_PRENOM = next_tHashInput_4.CONTACT_PRENOM;
					clients_siret_siren.CONTACT1_MAIL = next_tHashInput_4.CONTACT1_MAIL;
					clients_siret_siren.CONTACT1_TEL_FIXE = next_tHashInput_4.CONTACT1_TEL_FIXE;

					/**
					 * [tHashInput_4 begin ] stop
					 */

					/**
					 * [tHashInput_4 main ] start
					 */

					currentComponent = "tHashInput_4";

					tos_count_tHashInput_4++;

					/**
					 * [tHashInput_4 main ] stop
					 */

					/**
					 * [tHashInput_4 process_data_begin ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "clients_siret_siren"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "sirets"
					///////////////////////////////////////////////

					boolean forceLoopsirets = false;

					siretsStruct siretsObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4 = false;

						siretsHashKey.siret = Long.parseLong(StringHandling.RIGHT(clients_siret_siren.SIREN_SIRET,
								StringHandling.LEN(clients_siret_siren.SIREN_SIRET)
										- StringHandling.INDEX(clients_siret_siren.SIREN_SIRET, "_") - 1));

						siretsHashKey.hashCodeDirty = true;

						tHash_Lookup_sirets.lookup(siretsHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_sirets != null && tHash_Lookup_sirets.getCount(siretsHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'sirets' and it contains more one result from keys : sirets.siret = '" +
						// siretsHashKey.siret + "'");
					} // G 071

					siretsStruct sirets = null;

					siretsStruct fromLookup_sirets = null;
					sirets = siretsDefault;

					if (tHash_Lookup_sirets != null && tHash_Lookup_sirets.hasNext()) { // G 099

						fromLookup_sirets = tHash_Lookup_sirets.next();

					} // G 099

					if (fromLookup_sirets != null) {
						sirets = fromLookup_sirets;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
						// ###############################
						// # Output tables

						all_datas = null;

// # Output table : 'all_datas'
						all_datas_tmp.ID = clients_siret_siren.ID;
						all_datas_tmp.Metier = clients_siret_siren.Metier;
						all_datas_tmp.Code_COMPTA = clients_siret_siren.Code_COMPTA;
						all_datas_tmp.NOMS_CLIENTS = clients_siret_siren.NOMS_CLIENTS;
						all_datas_tmp.SIREN_SIRET = clients_siret_siren.SIREN_SIRET;
						all_datas_tmp.CODE_FACTU = clients_siret_siren.CODE_FACTU;
						all_datas_tmp.ADRESSE_FACTU = clients_siret_siren.ADRESSE_FACTU;
						all_datas_tmp.CP = clients_siret_siren.CP;
						all_datas_tmp.VILLE = clients_siret_siren.VILLE;
						all_datas_tmp.PAYS = clients_siret_siren.PAYS;
						all_datas_tmp.CONTACT_GENRE = clients_siret_siren.CONTACT_GENRE;
						all_datas_tmp.CONTACT_NOM = clients_siret_siren.CONTACT_NOM;
						all_datas_tmp.CONTACT_PRENOM = clients_siret_siren.CONTACT_PRENOM;
						all_datas_tmp.CONTACT1_MAIL = clients_siret_siren.CONTACT1_MAIL;
						all_datas_tmp.CONTACT1_TEL_FIXE = clients_siret_siren.CONTACT1_TEL_FIXE;
						all_datas_tmp.siren = sirets.siren;
						all_datas_tmp.nic = sirets.nic;
						all_datas_tmp.siret = sirets.siret;
						all_datas_tmp.statutDiffusionEtablissement = sirets.statutDiffusionEtablissement;
						all_datas_tmp.dateCreationEtablissement = sirets.dateCreationEtablissement;
						all_datas_tmp.trancheEffectifsEtablissement = sirets.trancheEffectifsEtablissement;
						all_datas_tmp.anneeEffectifsEtablissement = sirets.anneeEffectifsEtablissement;
						all_datas_tmp.activitePrincipaleRegistreMetiersEtablissement = sirets.activitePrincipaleRegistreMetiersEtablissement;
						all_datas_tmp.dateDernierTraitementEtablissement = sirets.dateDernierTraitementEtablissement;
						all_datas_tmp.etablissementSiege = sirets.etablissementSiege;
						all_datas_tmp.nombrePeriodesEtablissement = sirets.nombrePeriodesEtablissement;
						all_datas_tmp.etatAdministratifUniteLegale = sirets.etatAdministratifUniteLegale;
						all_datas_tmp.statutDiffusionUniteLegale = sirets.statutDiffusionUniteLegale;
						all_datas_tmp.dateCreationUniteLegale = sirets.dateCreationUniteLegale;
						all_datas_tmp.categorieJuridiqueUniteLegale = sirets.categorieJuridiqueUniteLegale;
						all_datas_tmp.denominationUniteLegale = sirets.denominationUniteLegale;
						all_datas_tmp.sigleUniteLegale = sirets.sigleUniteLegale;
						all_datas_tmp.denominationUsuelle1UniteLegale = sirets.denominationUsuelle1UniteLegale;
						all_datas_tmp.denominationUsuelle2UniteLegale = sirets.denominationUsuelle2UniteLegale;
						all_datas_tmp.denominationUsuelle3UniteLegale = sirets.denominationUsuelle3UniteLegale;
						all_datas_tmp.sexeUniteLegale = sirets.sexeUniteLegale;
						all_datas_tmp.nomUniteLegale = sirets.nomUniteLegale;
						all_datas_tmp.nomUsageUniteLegale = sirets.nomUsageUniteLegale;
						all_datas_tmp.prenom1UniteLegale = sirets.prenom1UniteLegale;
						all_datas_tmp.prenom2UniteLegale = sirets.prenom2UniteLegale;
						all_datas_tmp.prenom3UniteLegale = sirets.prenom3UniteLegale;
						all_datas_tmp.prenom4UniteLegale = sirets.prenom4UniteLegale;
						all_datas_tmp.prenomUsuelUniteLegale = sirets.prenomUsuelUniteLegale;
						all_datas_tmp.pseudonymeUniteLegale = sirets.pseudonymeUniteLegale;
						all_datas_tmp.activitePrincipaleUniteLegale = sirets.activitePrincipaleUniteLegale;
						all_datas_tmp.nomenclatureActivitePrincipaleUniteLegale = sirets.nomenclatureActivitePrincipaleUniteLegale;
						all_datas_tmp.identifiantAssociationUniteLegale = sirets.identifiantAssociationUniteLegale;
						all_datas_tmp.economieSocialeSolidaireUniteLegale = sirets.economieSocialeSolidaireUniteLegale;
						all_datas_tmp.caractereEmployeurUniteLegale = sirets.caractereEmployeurUniteLegale;
						all_datas_tmp.trancheEffectifsUniteLegale = sirets.trancheEffectifsUniteLegale;
						all_datas_tmp.anneeEffectifsUniteLegale = sirets.anneeEffectifsUniteLegale;
						all_datas_tmp.nicSiegeUniteLegale = sirets.nicSiegeUniteLegale;
						all_datas_tmp.dateDernierTraitementUniteLegale = sirets.dateDernierTraitementUniteLegale;
						all_datas_tmp.categorieEntreprise = sirets.categorieEntreprise;
						all_datas_tmp.anneeCategorieEntreprise = sirets.anneeCategorieEntreprise;
						all_datas_tmp.complementAdresseEtablissement = sirets.complementAdresseEtablissement;
						all_datas_tmp.numeroVoieEtablissement = sirets.numeroVoieEtablissement;
						all_datas_tmp.indiceRepetitionEtablissement = sirets.indiceRepetitionEtablissement;
						all_datas_tmp.typeVoieEtablissement = sirets.typeVoieEtablissement;
						all_datas_tmp.libelleVoieEtablissement = sirets.libelleVoieEtablissement;
						all_datas_tmp.codePostalEtablissement = sirets.codePostalEtablissement;
						all_datas_tmp.libelleCommuneEtablissement = sirets.libelleCommuneEtablissement;
						all_datas_tmp.libelleCommuneEtrangerEtablissement = sirets.libelleCommuneEtrangerEtablissement;
						all_datas_tmp.distributionSpecialeEtablissement = sirets.distributionSpecialeEtablissement;
						all_datas_tmp.codeCommuneEtablissement = sirets.codeCommuneEtablissement;
						all_datas_tmp.codeCedexEtablissement = sirets.codeCedexEtablissement;
						all_datas_tmp.libelleCedexEtablissement = sirets.libelleCedexEtablissement;
						all_datas_tmp.codePaysEtrangerEtablissement = sirets.codePaysEtrangerEtablissement;
						all_datas_tmp.libellePaysEtrangerEtablissement = sirets.libellePaysEtrangerEtablissement;
						all_datas_tmp.complementAdresse2Etablissement = sirets.complementAdresse2Etablissement;
						all_datas_tmp.numeroVoie2Etablissement = sirets.numeroVoie2Etablissement;
						all_datas_tmp.indiceRepetition2Etablissement = sirets.indiceRepetition2Etablissement;
						all_datas_tmp.typeVoie2Etablissement = sirets.typeVoie2Etablissement;
						all_datas_tmp.libelleVoie2Etablissement = sirets.libelleVoie2Etablissement;
						all_datas_tmp.codePostal2Etablissement = sirets.codePostal2Etablissement;
						all_datas_tmp.libelleCommune2Etablissement = sirets.libelleCommune2Etablissement;
						all_datas_tmp.libelleCommuneEtranger2Etablissement = sirets.libelleCommuneEtranger2Etablissement;
						all_datas_tmp.distributionSpeciale2Etablissement = sirets.distributionSpeciale2Etablissement;
						all_datas_tmp.codeCommune2Etablissement = sirets.codeCommune2Etablissement;
						all_datas_tmp.codeCedex2Etablissement = sirets.codeCedex2Etablissement;
						all_datas_tmp.libelleCedex2Etablissement = sirets.libelleCedex2Etablissement;
						all_datas_tmp.codePaysEtranger2Etablissement = sirets.codePaysEtranger2Etablissement;
						all_datas_tmp.libellePaysEtranger2Etablissement = sirets.libellePaysEtranger2Etablissement;
						all_datas_tmp.dateFin = sirets.dateFin;
						all_datas_tmp.dateDebut = sirets.dateDebut;
						all_datas_tmp.etatAdministratifEtablissement = sirets.etatAdministratifEtablissement;
						all_datas_tmp.changementEtatAdministratifEtablissement = sirets.changementEtatAdministratifEtablissement;
						all_datas_tmp.enseigne1Etablissement = sirets.enseigne1Etablissement;
						all_datas_tmp.enseigne2Etablissement = sirets.enseigne2Etablissement;
						all_datas_tmp.enseigne3Etablissement = sirets.enseigne3Etablissement;
						all_datas_tmp.changementEnseigneEtablissement = sirets.changementEnseigneEtablissement;
						all_datas_tmp.denominationUsuelleEtablissement = sirets.denominationUsuelleEtablissement;
						all_datas_tmp.changementDenominationUsuelleEtablissement = sirets.changementDenominationUsuelleEtablissement;
						all_datas_tmp.activitePrincipaleEtablissement = sirets.activitePrincipaleEtablissement;
						all_datas_tmp.nomenclatureActivitePrincipaleEtablissement = sirets.nomenclatureActivitePrincipaleEtablissement;
						all_datas_tmp.changementActivitePrincipaleEtablissement = sirets.changementActivitePrincipaleEtablissement;
						all_datas_tmp.caractereEmployeurEtablissement = sirets.caractereEmployeurEtablissement;
						all_datas_tmp.changementCaractereEmployeurEtablissement = sirets.changementCaractereEmployeurEtablissement;
						all_datas = all_datas_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */

					/**
					 * [tMap_4 process_data_begin ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_begin ] stop
					 */
// Start of branch "all_datas"
					if (all_datas != null) {

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "all_datas"

							);
						}

						whetherReject_tDBOutput_1 = false;
						if (all_datas.ID == null) {
							pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(1, all_datas.ID);
						}

						if (all_datas.Metier == null) {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2, all_datas.Metier);
						}

						if (all_datas.Code_COMPTA == null) {
							pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3, all_datas.Code_COMPTA);
						}

						if (all_datas.NOMS_CLIENTS == null) {
							pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, all_datas.NOMS_CLIENTS);
						}

						if (all_datas.SIREN_SIRET == null) {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, all_datas.SIREN_SIRET);
						}

						if (all_datas.CODE_FACTU == null) {
							pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6, all_datas.CODE_FACTU);
						}

						if (all_datas.ADRESSE_FACTU == null) {
							pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, all_datas.ADRESSE_FACTU);
						}

						if (all_datas.CP == null) {
							pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(8, all_datas.CP);
						}

						if (all_datas.VILLE == null) {
							pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, all_datas.VILLE);
						}

						if (all_datas.PAYS == null) {
							pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10, all_datas.PAYS);
						}

						if (all_datas.CONTACT_GENRE == null) {
							pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(11, all_datas.CONTACT_GENRE);
						}

						if (all_datas.CONTACT_NOM == null) {
							pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12, all_datas.CONTACT_NOM);
						}

						if (all_datas.CONTACT_PRENOM == null) {
							pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(13, all_datas.CONTACT_PRENOM);
						}

						if (all_datas.CONTACT1_MAIL == null) {
							pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14, all_datas.CONTACT1_MAIL);
						}

						if (all_datas.CONTACT1_TEL_FIXE == null) {
							pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(15, all_datas.CONTACT1_TEL_FIXE);
						}

						if (all_datas.siren == null) {
							pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(16, all_datas.siren);
						}

						if (all_datas.nic == null) {
							pstmt_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(17, all_datas.nic);
						}

						if (all_datas.siret == null) {
							pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(18, all_datas.siret);
						}

						if (all_datas.statutDiffusionEtablissement == null) {
							pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(19, all_datas.statutDiffusionEtablissement);
						}

						if (all_datas.dateCreationEtablissement != null) {
							pstmt_tDBOutput_1.setTimestamp(20,
									new java.sql.Timestamp(all_datas.dateCreationEtablissement.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
						}

						if (all_datas.trancheEffectifsEtablissement == null) {
							pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(21, all_datas.trancheEffectifsEtablissement);
						}

						if (all_datas.anneeEffectifsEtablissement == null) {
							pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(22, all_datas.anneeEffectifsEtablissement);
						}

						if (all_datas.activitePrincipaleRegistreMetiersEtablissement == null) {
							pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(23, all_datas.activitePrincipaleRegistreMetiersEtablissement);
						}

						if (all_datas.dateDernierTraitementEtablissement != null) {
							pstmt_tDBOutput_1.setTimestamp(24,
									new java.sql.Timestamp(all_datas.dateDernierTraitementEtablissement.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
						}

						if (all_datas.etablissementSiege == null) {
							pstmt_tDBOutput_1.setNull(25, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(25, all_datas.etablissementSiege);
						}

						if (all_datas.nombrePeriodesEtablissement == null) {
							pstmt_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(26, all_datas.nombrePeriodesEtablissement);
						}

						if (all_datas.etatAdministratifUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(27, all_datas.etatAdministratifUniteLegale);
						}

						if (all_datas.statutDiffusionUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(28, all_datas.statutDiffusionUniteLegale);
						}

						if (all_datas.dateCreationUniteLegale != null) {
							pstmt_tDBOutput_1.setTimestamp(29,
									new java.sql.Timestamp(all_datas.dateCreationUniteLegale.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(29, java.sql.Types.TIMESTAMP);
						}

						if (all_datas.categorieJuridiqueUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(30, all_datas.categorieJuridiqueUniteLegale);
						}

						if (all_datas.denominationUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(31, all_datas.denominationUniteLegale);
						}

						if (all_datas.sigleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(32, all_datas.sigleUniteLegale);
						}

						if (all_datas.denominationUsuelle1UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(33, all_datas.denominationUsuelle1UniteLegale);
						}

						if (all_datas.denominationUsuelle2UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(34, all_datas.denominationUsuelle2UniteLegale);
						}

						if (all_datas.denominationUsuelle3UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(35, all_datas.denominationUsuelle3UniteLegale);
						}

						if (all_datas.sexeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(36, all_datas.sexeUniteLegale);
						}

						if (all_datas.nomUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(37, all_datas.nomUniteLegale);
						}

						if (all_datas.nomUsageUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(38, all_datas.nomUsageUniteLegale);
						}

						if (all_datas.prenom1UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(39, all_datas.prenom1UniteLegale);
						}

						if (all_datas.prenom2UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40, all_datas.prenom2UniteLegale);
						}

						if (all_datas.prenom3UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(41, all_datas.prenom3UniteLegale);
						}

						if (all_datas.prenom4UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(42, all_datas.prenom4UniteLegale);
						}

						if (all_datas.prenomUsuelUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(43, all_datas.prenomUsuelUniteLegale);
						}

						if (all_datas.pseudonymeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(44, all_datas.pseudonymeUniteLegale);
						}

						if (all_datas.activitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(45, all_datas.activitePrincipaleUniteLegale);
						}

						if (all_datas.nomenclatureActivitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(46, all_datas.nomenclatureActivitePrincipaleUniteLegale);
						}

						if (all_datas.identifiantAssociationUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(47, all_datas.identifiantAssociationUniteLegale);
						}

						if (all_datas.economieSocialeSolidaireUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(48, all_datas.economieSocialeSolidaireUniteLegale);
						}

						if (all_datas.caractereEmployeurUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(49, all_datas.caractereEmployeurUniteLegale);
						}

						if (all_datas.trancheEffectifsUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(50, all_datas.trancheEffectifsUniteLegale);
						}

						if (all_datas.anneeEffectifsUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(51, all_datas.anneeEffectifsUniteLegale);
						}

						if (all_datas.nicSiegeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(52, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(52, all_datas.nicSiegeUniteLegale);
						}

						if (all_datas.dateDernierTraitementUniteLegale != null) {
							pstmt_tDBOutput_1.setTimestamp(53,
									new java.sql.Timestamp(all_datas.dateDernierTraitementUniteLegale.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(53, java.sql.Types.TIMESTAMP);
						}

						if (all_datas.categorieEntreprise == null) {
							pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(54, all_datas.categorieEntreprise);
						}

						if (all_datas.anneeCategorieEntreprise == null) {
							pstmt_tDBOutput_1.setNull(55, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(55, all_datas.anneeCategorieEntreprise);
						}

						if (all_datas.complementAdresseEtablissement == null) {
							pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(56, all_datas.complementAdresseEtablissement);
						}

						if (all_datas.numeroVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(57, all_datas.numeroVoieEtablissement);
						}

						if (all_datas.indiceRepetitionEtablissement == null) {
							pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(58, all_datas.indiceRepetitionEtablissement);
						}

						if (all_datas.typeVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(59, all_datas.typeVoieEtablissement);
						}

						if (all_datas.libelleVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(60, all_datas.libelleVoieEtablissement);
						}

						if (all_datas.codePostalEtablissement == null) {
							pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(61, all_datas.codePostalEtablissement);
						}

						if (all_datas.libelleCommuneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(62, all_datas.libelleCommuneEtablissement);
						}

						if (all_datas.libelleCommuneEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(63, all_datas.libelleCommuneEtrangerEtablissement);
						}

						if (all_datas.distributionSpecialeEtablissement == null) {
							pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(64, all_datas.distributionSpecialeEtablissement);
						}

						if (all_datas.codeCommuneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(65, all_datas.codeCommuneEtablissement);
						}

						if (all_datas.codeCedexEtablissement == null) {
							pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(66, all_datas.codeCedexEtablissement);
						}

						if (all_datas.libelleCedexEtablissement == null) {
							pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(67, all_datas.libelleCedexEtablissement);
						}

						if (all_datas.codePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(68, all_datas.codePaysEtrangerEtablissement);
						}

						if (all_datas.libellePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(69, all_datas.libellePaysEtrangerEtablissement);
						}

						if (all_datas.complementAdresse2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(70, all_datas.complementAdresse2Etablissement);
						}

						if (all_datas.numeroVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(71, all_datas.numeroVoie2Etablissement);
						}

						if (all_datas.indiceRepetition2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(72, all_datas.indiceRepetition2Etablissement);
						}

						if (all_datas.typeVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(73, all_datas.typeVoie2Etablissement);
						}

						if (all_datas.libelleVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(74, all_datas.libelleVoie2Etablissement);
						}

						if (all_datas.codePostal2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(75, all_datas.codePostal2Etablissement);
						}

						if (all_datas.libelleCommune2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(76, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(76, all_datas.libelleCommune2Etablissement);
						}

						if (all_datas.libelleCommuneEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(77, all_datas.libelleCommuneEtranger2Etablissement);
						}

						if (all_datas.distributionSpeciale2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(78, all_datas.distributionSpeciale2Etablissement);
						}

						if (all_datas.codeCommune2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(79, all_datas.codeCommune2Etablissement);
						}

						if (all_datas.codeCedex2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(80, all_datas.codeCedex2Etablissement);
						}

						if (all_datas.libelleCedex2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(81, all_datas.libelleCedex2Etablissement);
						}

						if (all_datas.codePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(82, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(82, all_datas.codePaysEtranger2Etablissement);
						}

						if (all_datas.libellePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(83, all_datas.libellePaysEtranger2Etablissement);
						}

						if (all_datas.dateFin == null) {
							pstmt_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(84, all_datas.dateFin);
						}

						if (all_datas.dateDebut != null) {
							pstmt_tDBOutput_1.setTimestamp(85, new java.sql.Timestamp(all_datas.dateDebut.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(85, java.sql.Types.TIMESTAMP);
						}

						if (all_datas.etatAdministratifEtablissement == null) {
							pstmt_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(86, all_datas.etatAdministratifEtablissement);
						}

						if (all_datas.changementEtatAdministratifEtablissement == null) {
							pstmt_tDBOutput_1.setNull(87, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(87, all_datas.changementEtatAdministratifEtablissement);
						}

						if (all_datas.enseigne1Etablissement == null) {
							pstmt_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(88, all_datas.enseigne1Etablissement);
						}

						if (all_datas.enseigne2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(89, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(89, all_datas.enseigne2Etablissement);
						}

						if (all_datas.enseigne3Etablissement == null) {
							pstmt_tDBOutput_1.setNull(90, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(90, all_datas.enseigne3Etablissement);
						}

						if (all_datas.changementEnseigneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(91, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(91, all_datas.changementEnseigneEtablissement);
						}

						if (all_datas.denominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(92, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(92, all_datas.denominationUsuelleEtablissement);
						}

						if (all_datas.changementDenominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(93, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(93, all_datas.changementDenominationUsuelleEtablissement);
						}

						if (all_datas.activitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(94, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(94, all_datas.activitePrincipaleEtablissement);
						}

						if (all_datas.nomenclatureActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(95, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(95, all_datas.nomenclatureActivitePrincipaleEtablissement);
						}

						if (all_datas.changementActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(96, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(96, all_datas.changementActivitePrincipaleEtablissement);
						}

						if (all_datas.caractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_1.setNull(97, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(97, all_datas.caractereEmployeurEtablissement);
						}

						if (all_datas.changementCaractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_1.setNull(98, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(98, all_datas.changementCaractereEmployeurEtablissement);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
										sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
											ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}
									rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
									}
									rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err.println(errormessage_tDBOutput_1);

								}
							}
							if (rowsToCommitCount_tDBOutput_1 != 0) {

							}
							conn_tDBOutput_1.commit();
							if (rowsToCommitCount_tDBOutput_1 != 0) {

								rowsToCommitCount_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

					} // End of branch "all_datas"

					/**
					 * [tMap_4 process_data_end ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 process_data_end ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 end ] start
					 */

					currentComponent = "tHashInput_4";

					nb_line_tHashInput_4++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);

				ok_Hash.put("tHashInput_4", true);
				end_Hash.put("tHashInput_4", System.currentTimeMillis());

				/**
				 * [tHashInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_sirets != null) {
					tHash_Lookup_sirets.endGet();
				}
				globalMap.remove("tHash_Lookup_sirets");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clients_siret_siren");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "all_datas");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_sirets");

			try {

				/**
				 * [tHashInput_4 finally ] start
				 */

				currentComponent = "tHashInput_4";

				/**
				 * [tHashInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}

	public static class siretsStruct implements routines.system.IPersistableComparableLookupRow<siretsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.siret == null) ? 0 : this.siret.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final siretsStruct other = (siretsStruct) obj;

			if (this.siret == null) {
				if (other.siret != null)
					return false;

			} else if (!this.siret.equals(other.siret))

				return false;

			return true;
		}

		public void copyDataTo(siretsStruct other) {

			other.siren = this.siren;
			other.nic = this.nic;
			other.siret = this.siret;
			other.statutDiffusionEtablissement = this.statutDiffusionEtablissement;
			other.dateCreationEtablissement = this.dateCreationEtablissement;
			other.trancheEffectifsEtablissement = this.trancheEffectifsEtablissement;
			other.anneeEffectifsEtablissement = this.anneeEffectifsEtablissement;
			other.activitePrincipaleRegistreMetiersEtablissement = this.activitePrincipaleRegistreMetiersEtablissement;
			other.dateDernierTraitementEtablissement = this.dateDernierTraitementEtablissement;
			other.etablissementSiege = this.etablissementSiege;
			other.nombrePeriodesEtablissement = this.nombrePeriodesEtablissement;
			other.etatAdministratifUniteLegale = this.etatAdministratifUniteLegale;
			other.statutDiffusionUniteLegale = this.statutDiffusionUniteLegale;
			other.dateCreationUniteLegale = this.dateCreationUniteLegale;
			other.categorieJuridiqueUniteLegale = this.categorieJuridiqueUniteLegale;
			other.denominationUniteLegale = this.denominationUniteLegale;
			other.sigleUniteLegale = this.sigleUniteLegale;
			other.denominationUsuelle1UniteLegale = this.denominationUsuelle1UniteLegale;
			other.denominationUsuelle2UniteLegale = this.denominationUsuelle2UniteLegale;
			other.denominationUsuelle3UniteLegale = this.denominationUsuelle3UniteLegale;
			other.sexeUniteLegale = this.sexeUniteLegale;
			other.nomUniteLegale = this.nomUniteLegale;
			other.nomUsageUniteLegale = this.nomUsageUniteLegale;
			other.prenom1UniteLegale = this.prenom1UniteLegale;
			other.prenom2UniteLegale = this.prenom2UniteLegale;
			other.prenom3UniteLegale = this.prenom3UniteLegale;
			other.prenom4UniteLegale = this.prenom4UniteLegale;
			other.prenomUsuelUniteLegale = this.prenomUsuelUniteLegale;
			other.pseudonymeUniteLegale = this.pseudonymeUniteLegale;
			other.activitePrincipaleUniteLegale = this.activitePrincipaleUniteLegale;
			other.nomenclatureActivitePrincipaleUniteLegale = this.nomenclatureActivitePrincipaleUniteLegale;
			other.identifiantAssociationUniteLegale = this.identifiantAssociationUniteLegale;
			other.economieSocialeSolidaireUniteLegale = this.economieSocialeSolidaireUniteLegale;
			other.caractereEmployeurUniteLegale = this.caractereEmployeurUniteLegale;
			other.trancheEffectifsUniteLegale = this.trancheEffectifsUniteLegale;
			other.anneeEffectifsUniteLegale = this.anneeEffectifsUniteLegale;
			other.nicSiegeUniteLegale = this.nicSiegeUniteLegale;
			other.dateDernierTraitementUniteLegale = this.dateDernierTraitementUniteLegale;
			other.categorieEntreprise = this.categorieEntreprise;
			other.anneeCategorieEntreprise = this.anneeCategorieEntreprise;
			other.complementAdresseEtablissement = this.complementAdresseEtablissement;
			other.numeroVoieEtablissement = this.numeroVoieEtablissement;
			other.indiceRepetitionEtablissement = this.indiceRepetitionEtablissement;
			other.typeVoieEtablissement = this.typeVoieEtablissement;
			other.libelleVoieEtablissement = this.libelleVoieEtablissement;
			other.codePostalEtablissement = this.codePostalEtablissement;
			other.libelleCommuneEtablissement = this.libelleCommuneEtablissement;
			other.libelleCommuneEtrangerEtablissement = this.libelleCommuneEtrangerEtablissement;
			other.distributionSpecialeEtablissement = this.distributionSpecialeEtablissement;
			other.codeCommuneEtablissement = this.codeCommuneEtablissement;
			other.codeCedexEtablissement = this.codeCedexEtablissement;
			other.libelleCedexEtablissement = this.libelleCedexEtablissement;
			other.codePaysEtrangerEtablissement = this.codePaysEtrangerEtablissement;
			other.libellePaysEtrangerEtablissement = this.libellePaysEtrangerEtablissement;
			other.complementAdresse2Etablissement = this.complementAdresse2Etablissement;
			other.numeroVoie2Etablissement = this.numeroVoie2Etablissement;
			other.indiceRepetition2Etablissement = this.indiceRepetition2Etablissement;
			other.typeVoie2Etablissement = this.typeVoie2Etablissement;
			other.libelleVoie2Etablissement = this.libelleVoie2Etablissement;
			other.codePostal2Etablissement = this.codePostal2Etablissement;
			other.libelleCommune2Etablissement = this.libelleCommune2Etablissement;
			other.libelleCommuneEtranger2Etablissement = this.libelleCommuneEtranger2Etablissement;
			other.distributionSpeciale2Etablissement = this.distributionSpeciale2Etablissement;
			other.codeCommune2Etablissement = this.codeCommune2Etablissement;
			other.codeCedex2Etablissement = this.codeCedex2Etablissement;
			other.libelleCedex2Etablissement = this.libelleCedex2Etablissement;
			other.codePaysEtranger2Etablissement = this.codePaysEtranger2Etablissement;
			other.libellePaysEtranger2Etablissement = this.libellePaysEtranger2Etablissement;
			other.dateFin = this.dateFin;
			other.dateDebut = this.dateDebut;
			other.etatAdministratifEtablissement = this.etatAdministratifEtablissement;
			other.changementEtatAdministratifEtablissement = this.changementEtatAdministratifEtablissement;
			other.enseigne1Etablissement = this.enseigne1Etablissement;
			other.enseigne2Etablissement = this.enseigne2Etablissement;
			other.enseigne3Etablissement = this.enseigne3Etablissement;
			other.changementEnseigneEtablissement = this.changementEnseigneEtablissement;
			other.denominationUsuelleEtablissement = this.denominationUsuelleEtablissement;
			other.changementDenominationUsuelleEtablissement = this.changementDenominationUsuelleEtablissement;
			other.activitePrincipaleEtablissement = this.activitePrincipaleEtablissement;
			other.nomenclatureActivitePrincipaleEtablissement = this.nomenclatureActivitePrincipaleEtablissement;
			other.changementActivitePrincipaleEtablissement = this.changementActivitePrincipaleEtablissement;
			other.caractereEmployeurEtablissement = this.caractereEmployeurEtablissement;
			other.changementCaractereEmployeurEtablissement = this.changementCaractereEmployeurEtablissement;

		}

		public void copyKeysDataTo(siretsStruct other) {

			other.siret = this.siret;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.siren = null;
				} else {
					this.siren = dis.readLong();
				}

				this.nic = readInteger(dis, ois);

				this.statutDiffusionEtablissement = readString(dis, ois);

				this.dateCreationEtablissement = readDate(dis, ois);

				this.trancheEffectifsEtablissement = readString(dis, ois);

				this.anneeEffectifsEtablissement = readString(dis, ois);

				this.activitePrincipaleRegistreMetiersEtablissement = readString(dis, ois);

				this.dateDernierTraitementEtablissement = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.etablissementSiege = null;
				} else {
					this.etablissementSiege = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.nombrePeriodesEtablissement = null;
				} else {
					this.nombrePeriodesEtablissement = dis.readLong();
				}

				this.etatAdministratifUniteLegale = readString(dis, ois);

				this.statutDiffusionUniteLegale = readString(dis, ois);

				this.dateCreationUniteLegale = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.categorieJuridiqueUniteLegale = null;
				} else {
					this.categorieJuridiqueUniteLegale = dis.readLong();
				}

				this.denominationUniteLegale = readString(dis, ois);

				this.sigleUniteLegale = readString(dis, ois);

				this.denominationUsuelle1UniteLegale = readString(dis, ois);

				this.denominationUsuelle2UniteLegale = readString(dis, ois);

				this.denominationUsuelle3UniteLegale = readString(dis, ois);

				this.sexeUniteLegale = readString(dis, ois);

				this.nomUniteLegale = readString(dis, ois);

				this.nomUsageUniteLegale = readString(dis, ois);

				this.prenom1UniteLegale = readString(dis, ois);

				this.prenom2UniteLegale = readString(dis, ois);

				this.prenom3UniteLegale = readString(dis, ois);

				this.prenom4UniteLegale = readString(dis, ois);

				this.prenomUsuelUniteLegale = readString(dis, ois);

				this.pseudonymeUniteLegale = readString(dis, ois);

				this.activitePrincipaleUniteLegale = readString(dis, ois);

				this.nomenclatureActivitePrincipaleUniteLegale = readString(dis, ois);

				this.identifiantAssociationUniteLegale = readString(dis, ois);

				this.economieSocialeSolidaireUniteLegale = readString(dis, ois);

				this.caractereEmployeurUniteLegale = readString(dis, ois);

				this.trancheEffectifsUniteLegale = readString(dis, ois);

				this.anneeEffectifsUniteLegale = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.nicSiegeUniteLegale = null;
				} else {
					this.nicSiegeUniteLegale = dis.readLong();
				}

				this.dateDernierTraitementUniteLegale = readDate(dis, ois);

				this.categorieEntreprise = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.anneeCategorieEntreprise = null;
				} else {
					this.anneeCategorieEntreprise = dis.readLong();
				}

				this.complementAdresseEtablissement = readString(dis, ois);

				this.numeroVoieEtablissement = readString(dis, ois);

				this.indiceRepetitionEtablissement = readString(dis, ois);

				this.typeVoieEtablissement = readString(dis, ois);

				this.libelleVoieEtablissement = readString(dis, ois);

				this.codePostalEtablissement = readString(dis, ois);

				this.libelleCommuneEtablissement = readString(dis, ois);

				this.libelleCommuneEtrangerEtablissement = readString(dis, ois);

				this.distributionSpecialeEtablissement = readString(dis, ois);

				this.codeCommuneEtablissement = readString(dis, ois);

				this.codeCedexEtablissement = readString(dis, ois);

				this.libelleCedexEtablissement = readString(dis, ois);

				this.codePaysEtrangerEtablissement = readString(dis, ois);

				this.libellePaysEtrangerEtablissement = readString(dis, ois);

				this.complementAdresse2Etablissement = readString(dis, ois);

				this.numeroVoie2Etablissement = readString(dis, ois);

				this.indiceRepetition2Etablissement = readString(dis, ois);

				this.typeVoie2Etablissement = readString(dis, ois);

				this.libelleVoie2Etablissement = readString(dis, ois);

				this.codePostal2Etablissement = readString(dis, ois);

				this.libelleCommune2Etablissement = readString(dis, ois);

				this.libelleCommuneEtranger2Etablissement = readString(dis, ois);

				this.distributionSpeciale2Etablissement = readString(dis, ois);

				this.codeCommune2Etablissement = readString(dis, ois);

				this.codeCedex2Etablissement = readString(dis, ois);

				this.libelleCedex2Etablissement = readString(dis, ois);

				this.codePaysEtranger2Etablissement = readString(dis, ois);

				this.libellePaysEtranger2Etablissement = readString(dis, ois);

				this.dateFin = readString(dis, ois);

				this.dateDebut = readDate(dis, ois);

				this.etatAdministratifEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementEtatAdministratifEtablissement = null;
				} else {
					this.changementEtatAdministratifEtablissement = dis.readBoolean();
				}

				this.enseigne1Etablissement = readString(dis, ois);

				this.enseigne2Etablissement = readString(dis, ois);

				this.enseigne3Etablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementEnseigneEtablissement = null;
				} else {
					this.changementEnseigneEtablissement = dis.readBoolean();
				}

				this.denominationUsuelleEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementDenominationUsuelleEtablissement = null;
				} else {
					this.changementDenominationUsuelleEtablissement = dis.readBoolean();
				}

				this.activitePrincipaleEtablissement = readString(dis, ois);

				this.nomenclatureActivitePrincipaleEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementActivitePrincipaleEtablissement = null;
				} else {
					this.changementActivitePrincipaleEtablissement = dis.readBoolean();
				}

				this.caractereEmployeurEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementCaractereEmployeurEtablissement = null;
				} else {
					this.changementCaractereEmployeurEtablissement = dis.readBoolean();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				length = objectIn.readByte();
				if (length == -1) {
					this.siren = null;
				} else {
					this.siren = objectIn.readLong();
				}

				this.nic = readInteger(dis, objectIn);

				this.statutDiffusionEtablissement = readString(dis, objectIn);

				this.dateCreationEtablissement = readDate(dis, objectIn);

				this.trancheEffectifsEtablissement = readString(dis, objectIn);

				this.anneeEffectifsEtablissement = readString(dis, objectIn);

				this.activitePrincipaleRegistreMetiersEtablissement = readString(dis, objectIn);

				this.dateDernierTraitementEtablissement = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.etablissementSiege = null;
				} else {
					this.etablissementSiege = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.nombrePeriodesEtablissement = null;
				} else {
					this.nombrePeriodesEtablissement = objectIn.readLong();
				}

				this.etatAdministratifUniteLegale = readString(dis, objectIn);

				this.statutDiffusionUniteLegale = readString(dis, objectIn);

				this.dateCreationUniteLegale = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.categorieJuridiqueUniteLegale = null;
				} else {
					this.categorieJuridiqueUniteLegale = objectIn.readLong();
				}

				this.denominationUniteLegale = readString(dis, objectIn);

				this.sigleUniteLegale = readString(dis, objectIn);

				this.denominationUsuelle1UniteLegale = readString(dis, objectIn);

				this.denominationUsuelle2UniteLegale = readString(dis, objectIn);

				this.denominationUsuelle3UniteLegale = readString(dis, objectIn);

				this.sexeUniteLegale = readString(dis, objectIn);

				this.nomUniteLegale = readString(dis, objectIn);

				this.nomUsageUniteLegale = readString(dis, objectIn);

				this.prenom1UniteLegale = readString(dis, objectIn);

				this.prenom2UniteLegale = readString(dis, objectIn);

				this.prenom3UniteLegale = readString(dis, objectIn);

				this.prenom4UniteLegale = readString(dis, objectIn);

				this.prenomUsuelUniteLegale = readString(dis, objectIn);

				this.pseudonymeUniteLegale = readString(dis, objectIn);

				this.activitePrincipaleUniteLegale = readString(dis, objectIn);

				this.nomenclatureActivitePrincipaleUniteLegale = readString(dis, objectIn);

				this.identifiantAssociationUniteLegale = readString(dis, objectIn);

				this.economieSocialeSolidaireUniteLegale = readString(dis, objectIn);

				this.caractereEmployeurUniteLegale = readString(dis, objectIn);

				this.trancheEffectifsUniteLegale = readString(dis, objectIn);

				this.anneeEffectifsUniteLegale = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.nicSiegeUniteLegale = null;
				} else {
					this.nicSiegeUniteLegale = objectIn.readLong();
				}

				this.dateDernierTraitementUniteLegale = readDate(dis, objectIn);

				this.categorieEntreprise = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.anneeCategorieEntreprise = null;
				} else {
					this.anneeCategorieEntreprise = objectIn.readLong();
				}

				this.complementAdresseEtablissement = readString(dis, objectIn);

				this.numeroVoieEtablissement = readString(dis, objectIn);

				this.indiceRepetitionEtablissement = readString(dis, objectIn);

				this.typeVoieEtablissement = readString(dis, objectIn);

				this.libelleVoieEtablissement = readString(dis, objectIn);

				this.codePostalEtablissement = readString(dis, objectIn);

				this.libelleCommuneEtablissement = readString(dis, objectIn);

				this.libelleCommuneEtrangerEtablissement = readString(dis, objectIn);

				this.distributionSpecialeEtablissement = readString(dis, objectIn);

				this.codeCommuneEtablissement = readString(dis, objectIn);

				this.codeCedexEtablissement = readString(dis, objectIn);

				this.libelleCedexEtablissement = readString(dis, objectIn);

				this.codePaysEtrangerEtablissement = readString(dis, objectIn);

				this.libellePaysEtrangerEtablissement = readString(dis, objectIn);

				this.complementAdresse2Etablissement = readString(dis, objectIn);

				this.numeroVoie2Etablissement = readString(dis, objectIn);

				this.indiceRepetition2Etablissement = readString(dis, objectIn);

				this.typeVoie2Etablissement = readString(dis, objectIn);

				this.libelleVoie2Etablissement = readString(dis, objectIn);

				this.codePostal2Etablissement = readString(dis, objectIn);

				this.libelleCommune2Etablissement = readString(dis, objectIn);

				this.libelleCommuneEtranger2Etablissement = readString(dis, objectIn);

				this.distributionSpeciale2Etablissement = readString(dis, objectIn);

				this.codeCommune2Etablissement = readString(dis, objectIn);

				this.codeCedex2Etablissement = readString(dis, objectIn);

				this.libelleCedex2Etablissement = readString(dis, objectIn);

				this.codePaysEtranger2Etablissement = readString(dis, objectIn);

				this.libellePaysEtranger2Etablissement = readString(dis, objectIn);

				this.dateFin = readString(dis, objectIn);

				this.dateDebut = readDate(dis, objectIn);

				this.etatAdministratifEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementEtatAdministratifEtablissement = null;
				} else {
					this.changementEtatAdministratifEtablissement = objectIn.readBoolean();
				}

				this.enseigne1Etablissement = readString(dis, objectIn);

				this.enseigne2Etablissement = readString(dis, objectIn);

				this.enseigne3Etablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementEnseigneEtablissement = null;
				} else {
					this.changementEnseigneEtablissement = objectIn.readBoolean();
				}

				this.denominationUsuelleEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementDenominationUsuelleEtablissement = null;
				} else {
					this.changementDenominationUsuelleEtablissement = objectIn.readBoolean();
				}

				this.activitePrincipaleEtablissement = readString(dis, objectIn);

				this.nomenclatureActivitePrincipaleEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementActivitePrincipaleEtablissement = null;
				} else {
					this.changementActivitePrincipaleEtablissement = objectIn.readBoolean();
				}

				this.caractereEmployeurEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementCaractereEmployeurEtablissement = null;
				} else {
					this.changementCaractereEmployeurEtablissement = objectIn.readBoolean();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				writeInteger(this.nic, dos, oos);

				writeString(this.statutDiffusionEtablissement, dos, oos);

				writeDate(this.dateCreationEtablissement, dos, oos);

				writeString(this.trancheEffectifsEtablissement, dos, oos);

				writeString(this.anneeEffectifsEtablissement, dos, oos);

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos, oos);

				writeDate(this.dateDernierTraitementEtablissement, dos, oos);

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				writeString(this.etatAdministratifUniteLegale, dos, oos);

				writeString(this.statutDiffusionUniteLegale, dos, oos);

				writeDate(this.dateCreationUniteLegale, dos, oos);

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				writeString(this.denominationUniteLegale, dos, oos);

				writeString(this.sigleUniteLegale, dos, oos);

				writeString(this.denominationUsuelle1UniteLegale, dos, oos);

				writeString(this.denominationUsuelle2UniteLegale, dos, oos);

				writeString(this.denominationUsuelle3UniteLegale, dos, oos);

				writeString(this.sexeUniteLegale, dos, oos);

				writeString(this.nomUniteLegale, dos, oos);

				writeString(this.nomUsageUniteLegale, dos, oos);

				writeString(this.prenom1UniteLegale, dos, oos);

				writeString(this.prenom2UniteLegale, dos, oos);

				writeString(this.prenom3UniteLegale, dos, oos);

				writeString(this.prenom4UniteLegale, dos, oos);

				writeString(this.prenomUsuelUniteLegale, dos, oos);

				writeString(this.pseudonymeUniteLegale, dos, oos);

				writeString(this.activitePrincipaleUniteLegale, dos, oos);

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos, oos);

				writeString(this.identifiantAssociationUniteLegale, dos, oos);

				writeString(this.economieSocialeSolidaireUniteLegale, dos, oos);

				writeString(this.caractereEmployeurUniteLegale, dos, oos);

				writeString(this.trancheEffectifsUniteLegale, dos, oos);

				writeString(this.anneeEffectifsUniteLegale, dos, oos);

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				writeDate(this.dateDernierTraitementUniteLegale, dos, oos);

				writeString(this.categorieEntreprise, dos, oos);

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				writeString(this.complementAdresseEtablissement, dos, oos);

				writeString(this.numeroVoieEtablissement, dos, oos);

				writeString(this.indiceRepetitionEtablissement, dos, oos);

				writeString(this.typeVoieEtablissement, dos, oos);

				writeString(this.libelleVoieEtablissement, dos, oos);

				writeString(this.codePostalEtablissement, dos, oos);

				writeString(this.libelleCommuneEtablissement, dos, oos);

				writeString(this.libelleCommuneEtrangerEtablissement, dos, oos);

				writeString(this.distributionSpecialeEtablissement, dos, oos);

				writeString(this.codeCommuneEtablissement, dos, oos);

				writeString(this.codeCedexEtablissement, dos, oos);

				writeString(this.libelleCedexEtablissement, dos, oos);

				writeString(this.codePaysEtrangerEtablissement, dos, oos);

				writeString(this.libellePaysEtrangerEtablissement, dos, oos);

				writeString(this.complementAdresse2Etablissement, dos, oos);

				writeString(this.numeroVoie2Etablissement, dos, oos);

				writeString(this.indiceRepetition2Etablissement, dos, oos);

				writeString(this.typeVoie2Etablissement, dos, oos);

				writeString(this.libelleVoie2Etablissement, dos, oos);

				writeString(this.codePostal2Etablissement, dos, oos);

				writeString(this.libelleCommune2Etablissement, dos, oos);

				writeString(this.libelleCommuneEtranger2Etablissement, dos, oos);

				writeString(this.distributionSpeciale2Etablissement, dos, oos);

				writeString(this.codeCommune2Etablissement, dos, oos);

				writeString(this.codeCedex2Etablissement, dos, oos);

				writeString(this.libelleCedex2Etablissement, dos, oos);

				writeString(this.codePaysEtranger2Etablissement, dos, oos);

				writeString(this.libellePaysEtranger2Etablissement, dos, oos);

				writeString(this.dateFin, dos, oos);

				writeDate(this.dateDebut, dos, oos);

				writeString(this.etatAdministratifEtablissement, dos, oos);

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				writeString(this.enseigne1Etablissement, dos, oos);

				writeString(this.enseigne2Etablissement, dos, oos);

				writeString(this.enseigne3Etablissement, dos, oos);

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				writeString(this.denominationUsuelleEtablissement, dos, oos);

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				writeString(this.activitePrincipaleEtablissement, dos, oos);

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos, oos);

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				writeString(this.caractereEmployeurEtablissement, dos, oos);

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				if (this.siren == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.siren);
				}

				writeInteger(this.nic, dos, objectOut);

				writeString(this.statutDiffusionEtablissement, dos, objectOut);

				writeDate(this.dateCreationEtablissement, dos, objectOut);

				writeString(this.trancheEffectifsEtablissement, dos, objectOut);

				writeString(this.anneeEffectifsEtablissement, dos, objectOut);

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos, objectOut);

				writeDate(this.dateDernierTraitementEtablissement, dos, objectOut);

				if (this.etablissementSiege == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.etablissementSiege);
				}

				if (this.nombrePeriodesEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.nombrePeriodesEtablissement);
				}

				writeString(this.etatAdministratifUniteLegale, dos, objectOut);

				writeString(this.statutDiffusionUniteLegale, dos, objectOut);

				writeDate(this.dateCreationUniteLegale, dos, objectOut);

				if (this.categorieJuridiqueUniteLegale == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.categorieJuridiqueUniteLegale);
				}

				writeString(this.denominationUniteLegale, dos, objectOut);

				writeString(this.sigleUniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle1UniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle2UniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle3UniteLegale, dos, objectOut);

				writeString(this.sexeUniteLegale, dos, objectOut);

				writeString(this.nomUniteLegale, dos, objectOut);

				writeString(this.nomUsageUniteLegale, dos, objectOut);

				writeString(this.prenom1UniteLegale, dos, objectOut);

				writeString(this.prenom2UniteLegale, dos, objectOut);

				writeString(this.prenom3UniteLegale, dos, objectOut);

				writeString(this.prenom4UniteLegale, dos, objectOut);

				writeString(this.prenomUsuelUniteLegale, dos, objectOut);

				writeString(this.pseudonymeUniteLegale, dos, objectOut);

				writeString(this.activitePrincipaleUniteLegale, dos, objectOut);

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos, objectOut);

				writeString(this.identifiantAssociationUniteLegale, dos, objectOut);

				writeString(this.economieSocialeSolidaireUniteLegale, dos, objectOut);

				writeString(this.caractereEmployeurUniteLegale, dos, objectOut);

				writeString(this.trancheEffectifsUniteLegale, dos, objectOut);

				writeString(this.anneeEffectifsUniteLegale, dos, objectOut);

				if (this.nicSiegeUniteLegale == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.nicSiegeUniteLegale);
				}

				writeDate(this.dateDernierTraitementUniteLegale, dos, objectOut);

				writeString(this.categorieEntreprise, dos, objectOut);

				if (this.anneeCategorieEntreprise == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeLong(this.anneeCategorieEntreprise);
				}

				writeString(this.complementAdresseEtablissement, dos, objectOut);

				writeString(this.numeroVoieEtablissement, dos, objectOut);

				writeString(this.indiceRepetitionEtablissement, dos, objectOut);

				writeString(this.typeVoieEtablissement, dos, objectOut);

				writeString(this.libelleVoieEtablissement, dos, objectOut);

				writeString(this.codePostalEtablissement, dos, objectOut);

				writeString(this.libelleCommuneEtablissement, dos, objectOut);

				writeString(this.libelleCommuneEtrangerEtablissement, dos, objectOut);

				writeString(this.distributionSpecialeEtablissement, dos, objectOut);

				writeString(this.codeCommuneEtablissement, dos, objectOut);

				writeString(this.codeCedexEtablissement, dos, objectOut);

				writeString(this.libelleCedexEtablissement, dos, objectOut);

				writeString(this.codePaysEtrangerEtablissement, dos, objectOut);

				writeString(this.libellePaysEtrangerEtablissement, dos, objectOut);

				writeString(this.complementAdresse2Etablissement, dos, objectOut);

				writeString(this.numeroVoie2Etablissement, dos, objectOut);

				writeString(this.indiceRepetition2Etablissement, dos, objectOut);

				writeString(this.typeVoie2Etablissement, dos, objectOut);

				writeString(this.libelleVoie2Etablissement, dos, objectOut);

				writeString(this.codePostal2Etablissement, dos, objectOut);

				writeString(this.libelleCommune2Etablissement, dos, objectOut);

				writeString(this.libelleCommuneEtranger2Etablissement, dos, objectOut);

				writeString(this.distributionSpeciale2Etablissement, dos, objectOut);

				writeString(this.codeCommune2Etablissement, dos, objectOut);

				writeString(this.codeCedex2Etablissement, dos, objectOut);

				writeString(this.libelleCedex2Etablissement, dos, objectOut);

				writeString(this.codePaysEtranger2Etablissement, dos, objectOut);

				writeString(this.libellePaysEtranger2Etablissement, dos, objectOut);

				writeString(this.dateFin, dos, objectOut);

				writeDate(this.dateDebut, dos, objectOut);

				writeString(this.etatAdministratifEtablissement, dos, objectOut);

				if (this.changementEtatAdministratifEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				writeString(this.enseigne1Etablissement, dos, objectOut);

				writeString(this.enseigne2Etablissement, dos, objectOut);

				writeString(this.enseigne3Etablissement, dos, objectOut);

				if (this.changementEnseigneEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementEnseigneEtablissement);
				}

				writeString(this.denominationUsuelleEtablissement, dos, objectOut);

				if (this.changementDenominationUsuelleEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				writeString(this.activitePrincipaleEtablissement, dos, objectOut);

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos, objectOut);

				if (this.changementActivitePrincipaleEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				writeString(this.caractereEmployeurEtablissement, dos, objectOut);

				if (this.changementCaractereEmployeurEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(siretsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.siret, other.siret);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				siretsStruct sirets = new siretsStruct();

				/**
				 * [tAdvancedHash_sirets begin ] start
				 */

				ok_Hash.put("tAdvancedHash_sirets", false);
				start_Hash.put("tAdvancedHash_sirets", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_sirets";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "sirets");
				}

				int tos_count_tAdvancedHash_sirets = 0;

				// connection name:sirets
				// source node:tHashInput_7 - inputs:(after_tHashInput_4)
				// outputs:(sirets,sirets) | target node:tAdvancedHash_sirets - inputs:(sirets)
				// outputs:()
				// linked node: tMap_4 - inputs:(clients_siret_siren,sirets) outputs:(all_datas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sirets = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct> tHash_Lookup_sirets = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<siretsStruct>getLookup(matchingModeEnum_sirets);

				globalMap.put("tHash_Lookup_sirets", tHash_Lookup_sirets);

				/**
				 * [tAdvancedHash_sirets begin ] stop
				 */

				/**
				 * [tHashInput_7 begin ] start
				 */

				ok_Hash.put("tHashInput_7", false);
				start_Hash.put("tHashInput_7", System.currentTimeMillis());

				currentComponent = "tHashInput_7";

				int tos_count_tHashInput_7 = 0;

				int nb_line_tHashInput_7 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_siretStruct> tHashFile_tHashInput_7 = mf_tHashInput_7
						.getAdvancedMemoryHashFile("tHashFile_GET_DATAS_" + pid + "_tHashOutput_3");
				if (tHashFile_tHashInput_7 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<save_siretStruct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
				while (iterator_tHashInput_7.hasNext()) {
					save_siretStruct next_tHashInput_7 = iterator_tHashInput_7.next();

					sirets.siren = next_tHashInput_7.siren;
					sirets.nic = next_tHashInput_7.nic;
					sirets.siret = next_tHashInput_7.siret;
					sirets.statutDiffusionEtablissement = next_tHashInput_7.statutDiffusionEtablissement;
					sirets.dateCreationEtablissement = next_tHashInput_7.dateCreationEtablissement;
					sirets.trancheEffectifsEtablissement = next_tHashInput_7.trancheEffectifsEtablissement;
					sirets.anneeEffectifsEtablissement = next_tHashInput_7.anneeEffectifsEtablissement;
					sirets.activitePrincipaleRegistreMetiersEtablissement = next_tHashInput_7.activitePrincipaleRegistreMetiersEtablissement;
					sirets.dateDernierTraitementEtablissement = next_tHashInput_7.dateDernierTraitementEtablissement;
					sirets.etablissementSiege = next_tHashInput_7.etablissementSiege;
					sirets.nombrePeriodesEtablissement = next_tHashInput_7.nombrePeriodesEtablissement;
					sirets.etatAdministratifUniteLegale = next_tHashInput_7.etatAdministratifUniteLegale;
					sirets.statutDiffusionUniteLegale = next_tHashInput_7.statutDiffusionUniteLegale;
					sirets.dateCreationUniteLegale = next_tHashInput_7.dateCreationUniteLegale;
					sirets.categorieJuridiqueUniteLegale = next_tHashInput_7.categorieJuridiqueUniteLegale;
					sirets.denominationUniteLegale = next_tHashInput_7.denominationUniteLegale;
					sirets.sigleUniteLegale = next_tHashInput_7.sigleUniteLegale;
					sirets.denominationUsuelle1UniteLegale = next_tHashInput_7.denominationUsuelle1UniteLegale;
					sirets.denominationUsuelle2UniteLegale = next_tHashInput_7.denominationUsuelle2UniteLegale;
					sirets.denominationUsuelle3UniteLegale = next_tHashInput_7.denominationUsuelle3UniteLegale;
					sirets.sexeUniteLegale = next_tHashInput_7.sexeUniteLegale;
					sirets.nomUniteLegale = next_tHashInput_7.nomUniteLegale;
					sirets.nomUsageUniteLegale = next_tHashInput_7.nomUsageUniteLegale;
					sirets.prenom1UniteLegale = next_tHashInput_7.prenom1UniteLegale;
					sirets.prenom2UniteLegale = next_tHashInput_7.prenom2UniteLegale;
					sirets.prenom3UniteLegale = next_tHashInput_7.prenom3UniteLegale;
					sirets.prenom4UniteLegale = next_tHashInput_7.prenom4UniteLegale;
					sirets.prenomUsuelUniteLegale = next_tHashInput_7.prenomUsuelUniteLegale;
					sirets.pseudonymeUniteLegale = next_tHashInput_7.pseudonymeUniteLegale;
					sirets.activitePrincipaleUniteLegale = next_tHashInput_7.activitePrincipaleUniteLegale;
					sirets.nomenclatureActivitePrincipaleUniteLegale = next_tHashInput_7.nomenclatureActivitePrincipaleUniteLegale;
					sirets.identifiantAssociationUniteLegale = next_tHashInput_7.identifiantAssociationUniteLegale;
					sirets.economieSocialeSolidaireUniteLegale = next_tHashInput_7.economieSocialeSolidaireUniteLegale;
					sirets.caractereEmployeurUniteLegale = next_tHashInput_7.caractereEmployeurUniteLegale;
					sirets.trancheEffectifsUniteLegale = next_tHashInput_7.trancheEffectifsUniteLegale;
					sirets.anneeEffectifsUniteLegale = next_tHashInput_7.anneeEffectifsUniteLegale;
					sirets.nicSiegeUniteLegale = next_tHashInput_7.nicSiegeUniteLegale;
					sirets.dateDernierTraitementUniteLegale = next_tHashInput_7.dateDernierTraitementUniteLegale;
					sirets.categorieEntreprise = next_tHashInput_7.categorieEntreprise;
					sirets.anneeCategorieEntreprise = next_tHashInput_7.anneeCategorieEntreprise;
					sirets.complementAdresseEtablissement = next_tHashInput_7.complementAdresseEtablissement;
					sirets.numeroVoieEtablissement = next_tHashInput_7.numeroVoieEtablissement;
					sirets.indiceRepetitionEtablissement = next_tHashInput_7.indiceRepetitionEtablissement;
					sirets.typeVoieEtablissement = next_tHashInput_7.typeVoieEtablissement;
					sirets.libelleVoieEtablissement = next_tHashInput_7.libelleVoieEtablissement;
					sirets.codePostalEtablissement = next_tHashInput_7.codePostalEtablissement;
					sirets.libelleCommuneEtablissement = next_tHashInput_7.libelleCommuneEtablissement;
					sirets.libelleCommuneEtrangerEtablissement = next_tHashInput_7.libelleCommuneEtrangerEtablissement;
					sirets.distributionSpecialeEtablissement = next_tHashInput_7.distributionSpecialeEtablissement;
					sirets.codeCommuneEtablissement = next_tHashInput_7.codeCommuneEtablissement;
					sirets.codeCedexEtablissement = next_tHashInput_7.codeCedexEtablissement;
					sirets.libelleCedexEtablissement = next_tHashInput_7.libelleCedexEtablissement;
					sirets.codePaysEtrangerEtablissement = next_tHashInput_7.codePaysEtrangerEtablissement;
					sirets.libellePaysEtrangerEtablissement = next_tHashInput_7.libellePaysEtrangerEtablissement;
					sirets.complementAdresse2Etablissement = next_tHashInput_7.complementAdresse2Etablissement;
					sirets.numeroVoie2Etablissement = next_tHashInput_7.numeroVoie2Etablissement;
					sirets.indiceRepetition2Etablissement = next_tHashInput_7.indiceRepetition2Etablissement;
					sirets.typeVoie2Etablissement = next_tHashInput_7.typeVoie2Etablissement;
					sirets.libelleVoie2Etablissement = next_tHashInput_7.libelleVoie2Etablissement;
					sirets.codePostal2Etablissement = next_tHashInput_7.codePostal2Etablissement;
					sirets.libelleCommune2Etablissement = next_tHashInput_7.libelleCommune2Etablissement;
					sirets.libelleCommuneEtranger2Etablissement = next_tHashInput_7.libelleCommuneEtranger2Etablissement;
					sirets.distributionSpeciale2Etablissement = next_tHashInput_7.distributionSpeciale2Etablissement;
					sirets.codeCommune2Etablissement = next_tHashInput_7.codeCommune2Etablissement;
					sirets.codeCedex2Etablissement = next_tHashInput_7.codeCedex2Etablissement;
					sirets.libelleCedex2Etablissement = next_tHashInput_7.libelleCedex2Etablissement;
					sirets.codePaysEtranger2Etablissement = next_tHashInput_7.codePaysEtranger2Etablissement;
					sirets.libellePaysEtranger2Etablissement = next_tHashInput_7.libellePaysEtranger2Etablissement;
					sirets.dateFin = next_tHashInput_7.dateFin;
					sirets.dateDebut = next_tHashInput_7.dateDebut;
					sirets.etatAdministratifEtablissement = next_tHashInput_7.etatAdministratifEtablissement;
					sirets.changementEtatAdministratifEtablissement = next_tHashInput_7.changementEtatAdministratifEtablissement;
					sirets.enseigne1Etablissement = next_tHashInput_7.enseigne1Etablissement;
					sirets.enseigne2Etablissement = next_tHashInput_7.enseigne2Etablissement;
					sirets.enseigne3Etablissement = next_tHashInput_7.enseigne3Etablissement;
					sirets.changementEnseigneEtablissement = next_tHashInput_7.changementEnseigneEtablissement;
					sirets.denominationUsuelleEtablissement = next_tHashInput_7.denominationUsuelleEtablissement;
					sirets.changementDenominationUsuelleEtablissement = next_tHashInput_7.changementDenominationUsuelleEtablissement;
					sirets.activitePrincipaleEtablissement = next_tHashInput_7.activitePrincipaleEtablissement;
					sirets.nomenclatureActivitePrincipaleEtablissement = next_tHashInput_7.nomenclatureActivitePrincipaleEtablissement;
					sirets.changementActivitePrincipaleEtablissement = next_tHashInput_7.changementActivitePrincipaleEtablissement;
					sirets.caractereEmployeurEtablissement = next_tHashInput_7.caractereEmployeurEtablissement;
					sirets.changementCaractereEmployeurEtablissement = next_tHashInput_7.changementCaractereEmployeurEtablissement;

					/**
					 * [tHashInput_7 begin ] stop
					 */

					/**
					 * [tHashInput_7 main ] start
					 */

					currentComponent = "tHashInput_7";

					tos_count_tHashInput_7++;

					/**
					 * [tHashInput_7 main ] stop
					 */

					/**
					 * [tHashInput_7 process_data_begin ] start
					 */

					currentComponent = "tHashInput_7";

					/**
					 * [tHashInput_7 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_sirets main ] start
					 */

					currentComponent = "tAdvancedHash_sirets";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "sirets"

						);
					}

					siretsStruct sirets_HashRow = new siretsStruct();

					sirets_HashRow.siren = sirets.siren;

					sirets_HashRow.nic = sirets.nic;

					sirets_HashRow.siret = sirets.siret;

					sirets_HashRow.statutDiffusionEtablissement = sirets.statutDiffusionEtablissement;

					sirets_HashRow.dateCreationEtablissement = sirets.dateCreationEtablissement;

					sirets_HashRow.trancheEffectifsEtablissement = sirets.trancheEffectifsEtablissement;

					sirets_HashRow.anneeEffectifsEtablissement = sirets.anneeEffectifsEtablissement;

					sirets_HashRow.activitePrincipaleRegistreMetiersEtablissement = sirets.activitePrincipaleRegistreMetiersEtablissement;

					sirets_HashRow.dateDernierTraitementEtablissement = sirets.dateDernierTraitementEtablissement;

					sirets_HashRow.etablissementSiege = sirets.etablissementSiege;

					sirets_HashRow.nombrePeriodesEtablissement = sirets.nombrePeriodesEtablissement;

					sirets_HashRow.etatAdministratifUniteLegale = sirets.etatAdministratifUniteLegale;

					sirets_HashRow.statutDiffusionUniteLegale = sirets.statutDiffusionUniteLegale;

					sirets_HashRow.dateCreationUniteLegale = sirets.dateCreationUniteLegale;

					sirets_HashRow.categorieJuridiqueUniteLegale = sirets.categorieJuridiqueUniteLegale;

					sirets_HashRow.denominationUniteLegale = sirets.denominationUniteLegale;

					sirets_HashRow.sigleUniteLegale = sirets.sigleUniteLegale;

					sirets_HashRow.denominationUsuelle1UniteLegale = sirets.denominationUsuelle1UniteLegale;

					sirets_HashRow.denominationUsuelle2UniteLegale = sirets.denominationUsuelle2UniteLegale;

					sirets_HashRow.denominationUsuelle3UniteLegale = sirets.denominationUsuelle3UniteLegale;

					sirets_HashRow.sexeUniteLegale = sirets.sexeUniteLegale;

					sirets_HashRow.nomUniteLegale = sirets.nomUniteLegale;

					sirets_HashRow.nomUsageUniteLegale = sirets.nomUsageUniteLegale;

					sirets_HashRow.prenom1UniteLegale = sirets.prenom1UniteLegale;

					sirets_HashRow.prenom2UniteLegale = sirets.prenom2UniteLegale;

					sirets_HashRow.prenom3UniteLegale = sirets.prenom3UniteLegale;

					sirets_HashRow.prenom4UniteLegale = sirets.prenom4UniteLegale;

					sirets_HashRow.prenomUsuelUniteLegale = sirets.prenomUsuelUniteLegale;

					sirets_HashRow.pseudonymeUniteLegale = sirets.pseudonymeUniteLegale;

					sirets_HashRow.activitePrincipaleUniteLegale = sirets.activitePrincipaleUniteLegale;

					sirets_HashRow.nomenclatureActivitePrincipaleUniteLegale = sirets.nomenclatureActivitePrincipaleUniteLegale;

					sirets_HashRow.identifiantAssociationUniteLegale = sirets.identifiantAssociationUniteLegale;

					sirets_HashRow.economieSocialeSolidaireUniteLegale = sirets.economieSocialeSolidaireUniteLegale;

					sirets_HashRow.caractereEmployeurUniteLegale = sirets.caractereEmployeurUniteLegale;

					sirets_HashRow.trancheEffectifsUniteLegale = sirets.trancheEffectifsUniteLegale;

					sirets_HashRow.anneeEffectifsUniteLegale = sirets.anneeEffectifsUniteLegale;

					sirets_HashRow.nicSiegeUniteLegale = sirets.nicSiegeUniteLegale;

					sirets_HashRow.dateDernierTraitementUniteLegale = sirets.dateDernierTraitementUniteLegale;

					sirets_HashRow.categorieEntreprise = sirets.categorieEntreprise;

					sirets_HashRow.anneeCategorieEntreprise = sirets.anneeCategorieEntreprise;

					sirets_HashRow.complementAdresseEtablissement = sirets.complementAdresseEtablissement;

					sirets_HashRow.numeroVoieEtablissement = sirets.numeroVoieEtablissement;

					sirets_HashRow.indiceRepetitionEtablissement = sirets.indiceRepetitionEtablissement;

					sirets_HashRow.typeVoieEtablissement = sirets.typeVoieEtablissement;

					sirets_HashRow.libelleVoieEtablissement = sirets.libelleVoieEtablissement;

					sirets_HashRow.codePostalEtablissement = sirets.codePostalEtablissement;

					sirets_HashRow.libelleCommuneEtablissement = sirets.libelleCommuneEtablissement;

					sirets_HashRow.libelleCommuneEtrangerEtablissement = sirets.libelleCommuneEtrangerEtablissement;

					sirets_HashRow.distributionSpecialeEtablissement = sirets.distributionSpecialeEtablissement;

					sirets_HashRow.codeCommuneEtablissement = sirets.codeCommuneEtablissement;

					sirets_HashRow.codeCedexEtablissement = sirets.codeCedexEtablissement;

					sirets_HashRow.libelleCedexEtablissement = sirets.libelleCedexEtablissement;

					sirets_HashRow.codePaysEtrangerEtablissement = sirets.codePaysEtrangerEtablissement;

					sirets_HashRow.libellePaysEtrangerEtablissement = sirets.libellePaysEtrangerEtablissement;

					sirets_HashRow.complementAdresse2Etablissement = sirets.complementAdresse2Etablissement;

					sirets_HashRow.numeroVoie2Etablissement = sirets.numeroVoie2Etablissement;

					sirets_HashRow.indiceRepetition2Etablissement = sirets.indiceRepetition2Etablissement;

					sirets_HashRow.typeVoie2Etablissement = sirets.typeVoie2Etablissement;

					sirets_HashRow.libelleVoie2Etablissement = sirets.libelleVoie2Etablissement;

					sirets_HashRow.codePostal2Etablissement = sirets.codePostal2Etablissement;

					sirets_HashRow.libelleCommune2Etablissement = sirets.libelleCommune2Etablissement;

					sirets_HashRow.libelleCommuneEtranger2Etablissement = sirets.libelleCommuneEtranger2Etablissement;

					sirets_HashRow.distributionSpeciale2Etablissement = sirets.distributionSpeciale2Etablissement;

					sirets_HashRow.codeCommune2Etablissement = sirets.codeCommune2Etablissement;

					sirets_HashRow.codeCedex2Etablissement = sirets.codeCedex2Etablissement;

					sirets_HashRow.libelleCedex2Etablissement = sirets.libelleCedex2Etablissement;

					sirets_HashRow.codePaysEtranger2Etablissement = sirets.codePaysEtranger2Etablissement;

					sirets_HashRow.libellePaysEtranger2Etablissement = sirets.libellePaysEtranger2Etablissement;

					sirets_HashRow.dateFin = sirets.dateFin;

					sirets_HashRow.dateDebut = sirets.dateDebut;

					sirets_HashRow.etatAdministratifEtablissement = sirets.etatAdministratifEtablissement;

					sirets_HashRow.changementEtatAdministratifEtablissement = sirets.changementEtatAdministratifEtablissement;

					sirets_HashRow.enseigne1Etablissement = sirets.enseigne1Etablissement;

					sirets_HashRow.enseigne2Etablissement = sirets.enseigne2Etablissement;

					sirets_HashRow.enseigne3Etablissement = sirets.enseigne3Etablissement;

					sirets_HashRow.changementEnseigneEtablissement = sirets.changementEnseigneEtablissement;

					sirets_HashRow.denominationUsuelleEtablissement = sirets.denominationUsuelleEtablissement;

					sirets_HashRow.changementDenominationUsuelleEtablissement = sirets.changementDenominationUsuelleEtablissement;

					sirets_HashRow.activitePrincipaleEtablissement = sirets.activitePrincipaleEtablissement;

					sirets_HashRow.nomenclatureActivitePrincipaleEtablissement = sirets.nomenclatureActivitePrincipaleEtablissement;

					sirets_HashRow.changementActivitePrincipaleEtablissement = sirets.changementActivitePrincipaleEtablissement;

					sirets_HashRow.caractereEmployeurEtablissement = sirets.caractereEmployeurEtablissement;

					sirets_HashRow.changementCaractereEmployeurEtablissement = sirets.changementCaractereEmployeurEtablissement;

					tHash_Lookup_sirets.put(sirets_HashRow);

					tos_count_tAdvancedHash_sirets++;

					/**
					 * [tAdvancedHash_sirets main ] stop
					 */

					/**
					 * [tAdvancedHash_sirets process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_sirets";

					/**
					 * [tAdvancedHash_sirets process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_sirets process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_sirets";

					/**
					 * [tAdvancedHash_sirets process_data_end ] stop
					 */

					/**
					 * [tHashInput_7 process_data_end ] start
					 */

					currentComponent = "tHashInput_7";

					/**
					 * [tHashInput_7 process_data_end ] stop
					 */

					/**
					 * [tHashInput_7 end ] start
					 */

					currentComponent = "tHashInput_7";

					nb_line_tHashInput_7++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_GET_DATAS_" + pid + "_tHashOutput_3");

				globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);

				ok_Hash.put("tHashInput_7", true);
				end_Hash.put("tHashInput_7", System.currentTimeMillis());

				/**
				 * [tHashInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_sirets end ] start
				 */

				currentComponent = "tAdvancedHash_sirets";

				tHash_Lookup_sirets.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "sirets");
				}

				ok_Hash.put("tAdvancedHash_sirets", true);
				end_Hash.put("tAdvancedHash_sirets", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_sirets end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_7 finally ] start
				 */

				currentComponent = "tHashInput_7";

				/**
				 * [tHashInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_sirets finally ] start
				 */

				currentComponent = "tAdvancedHash_sirets";

				/**
				 * [tAdvancedHash_sirets finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GET_DATAS GET_DATASClass = new GET_DATAS();

		int exitCode = GET_DATASClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = GET_DATAS.class.getClassLoader()
					.getResourceAsStream("iiidata/get_datas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = GET_DATAS.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("baer_api", "id_Password");
					if (context.getStringValue("baer_api") == null) {
						context.baer_api = null;
					} else {
						String pwd_baer_api_value = context.getProperty("baer_api");
						context.baer_api = null;
						if (pwd_baer_api_value != null) {
							if (context_param.containsKey("baer_api")) {// no need to decrypt if it come from program
																		// argument or parent job runtime
								context.baer_api = pwd_baer_api_value;
							} else if (!pwd_baer_api_value.isEmpty()) {
								try {
									context.baer_api = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_baer_api_value);
									context.put("baer_api", context.baer_api);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("baer_api")) {
				context.baer_api = (java.lang.String) parentContextMap.get("baer_api");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("baer_api");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : GET_DATAS");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 620673 characters generated by Talend Open Studio for Data Integration on the
 * December 7, 2021 at 4:22:03 PM CET
 ************************************************************************************************/