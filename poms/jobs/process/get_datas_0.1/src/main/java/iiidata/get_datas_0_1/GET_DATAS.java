// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package iiidata.get_datas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: GET_DATAS Purpose: <br>
 * Description: Collect data from differents doucres <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class GET_DATAS implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (baer_api != null) {

				this.setProperty("baer_api", baer_api.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public java.lang.String baer_api;

		public java.lang.String getBaer_api() {
			return this.baer_api;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "GET_DATAS";
	private final String projectName = "IIIDATA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					GET_DATAS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(GET_DATAS.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_sirets_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class save_clientsStruct implements routines.system.IPersistableRow<save_clientsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(save_clientsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rejectsStruct implements routines.system.IPersistableRow<rejectsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rejectsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				save_clientsStruct save_clients = new save_clientsStruct();
				rejectsStruct rejects = new rejectsStruct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "save_clients");
				}

				int tos_count_tHashOutput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_GET_DATAS_" + pid + "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "rejects");
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;
				boolean headerIsInserted_tFileOutputExcel_1 = false;

				String fileName_tFileOutputExcel_1 = "/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/IIIDATA/rejects_clients.xlsx";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
				xlsxTool_tFileOutputExcel_1.setSheet("rejects");
				xlsxTool_tFileOutputExcel_1.setAppend(false, false, false);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_1) {

					xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);

				}

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("ID");

					xlsxTool_tFileOutputExcel_1.addCellValue("Metier");

					xlsxTool_tFileOutputExcel_1.addCellValue("Code_COMPTA");

					xlsxTool_tFileOutputExcel_1.addCellValue("NOMS_CLIENTS");

					xlsxTool_tFileOutputExcel_1.addCellValue("SIREN_SIRET");

					xlsxTool_tFileOutputExcel_1.addCellValue("CODE_FACTU");

					xlsxTool_tFileOutputExcel_1.addCellValue("ADRESSE_FACTU");

					xlsxTool_tFileOutputExcel_1.addCellValue("CP");

					xlsxTool_tFileOutputExcel_1.addCellValue("VILLE");

					xlsxTool_tFileOutputExcel_1.addCellValue("PAYS");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_GENRE");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_NOM");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT_PRENOM");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT1_MAIL");

					xlsxTool_tFileOutputExcel_1.addCellValue("CONTACT1_TEL_FIXE");

					xlsxTool_tFileOutputExcel_1.addCellValue("errorCode");

					xlsxTool_tFileOutputExcel_1.addCellValue("errorMessage");

					nb_line_tFileOutputExcel_1++;
					headerIsInserted_tFileOutputExcel_1 = true;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ZhV7S/QohW+hkX82xSkRgn5vwJRiYhN1HNPDAg==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "/home/romain/Downloads/Projet_de_reprise_Client_Zen.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							save_clients = null;
							rejects = null;
							int tempRowLength_tFileInputExcel_1 = 15;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							save_clients = new save_clientsStruct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ID";

									save_clients.ID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									save_clients.ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Metier";

									save_clients.Metier = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.Metier = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Code_COMPTA";

									save_clients.Code_COMPTA = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.Code_COMPTA = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "NOMS_CLIENTS";

									save_clients.NOMS_CLIENTS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.NOMS_CLIENTS = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "SIREN_SIRET";

									save_clients.SIREN_SIRET = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.SIREN_SIRET = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CODE_FACTU";

									save_clients.CODE_FACTU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CODE_FACTU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ADRESSE_FACTU";

									save_clients.ADRESSE_FACTU = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.ADRESSE_FACTU = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CP";

									save_clients.CP = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									save_clients.CP = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "VILLE";

									save_clients.VILLE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.VILLE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "PAYS";

									save_clients.PAYS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.PAYS = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_GENRE";

									save_clients.CONTACT_GENRE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_GENRE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_NOM";

									save_clients.CONTACT_NOM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_NOM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT_PRENOM";

									save_clients.CONTACT_PRENOM = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT_PRENOM = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT1_MAIL";

									save_clients.CONTACT1_MAIL = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT1_MAIL = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CONTACT1_TEL_FIXE";

									save_clients.CONTACT1_TEL_FIXE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									save_clients.CONTACT1_TEL_FIXE = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								rejects = new rejectsStruct();
								rejects.ID = save_clients.ID;
								rejects.Metier = save_clients.Metier;
								rejects.Code_COMPTA = save_clients.Code_COMPTA;
								rejects.NOMS_CLIENTS = save_clients.NOMS_CLIENTS;
								rejects.SIREN_SIRET = save_clients.SIREN_SIRET;
								rejects.CODE_FACTU = save_clients.CODE_FACTU;
								rejects.ADRESSE_FACTU = save_clients.ADRESSE_FACTU;
								rejects.CP = save_clients.CP;
								rejects.VILLE = save_clients.VILLE;
								rejects.PAYS = save_clients.PAYS;
								rejects.CONTACT_GENRE = save_clients.CONTACT_GENRE;
								rejects.CONTACT_NOM = save_clients.CONTACT_NOM;
								rejects.CONTACT_PRENOM = save_clients.CONTACT_PRENOM;
								rejects.CONTACT1_MAIL = save_clients.CONTACT1_MAIL;
								rejects.CONTACT1_TEL_FIXE = save_clients.CONTACT1_TEL_FIXE;
								rejects.errorMessage = e.getMessage() + " - Line: " + tos_count_tFileInputExcel_1
										+ " column: " + curColName_tFileInputExcel_1 + " (No. "
										+ curColNum_tFileInputExcel_1 + ")";
								save_clients = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "save_clients"
							if (save_clients != null) {

								/**
								 * [tHashOutput_1 main ] start
								 */

								currentComponent = "tHashOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "save_clients"

									);
								}

								save_clientsStruct oneRow_tHashOutput_1 = new save_clientsStruct();

								oneRow_tHashOutput_1.ID = save_clients.ID;
								oneRow_tHashOutput_1.Metier = save_clients.Metier;
								oneRow_tHashOutput_1.Code_COMPTA = save_clients.Code_COMPTA;
								oneRow_tHashOutput_1.NOMS_CLIENTS = save_clients.NOMS_CLIENTS;
								oneRow_tHashOutput_1.SIREN_SIRET = save_clients.SIREN_SIRET;
								oneRow_tHashOutput_1.CODE_FACTU = save_clients.CODE_FACTU;
								oneRow_tHashOutput_1.ADRESSE_FACTU = save_clients.ADRESSE_FACTU;
								oneRow_tHashOutput_1.CP = save_clients.CP;
								oneRow_tHashOutput_1.VILLE = save_clients.VILLE;
								oneRow_tHashOutput_1.PAYS = save_clients.PAYS;
								oneRow_tHashOutput_1.CONTACT_GENRE = save_clients.CONTACT_GENRE;
								oneRow_tHashOutput_1.CONTACT_NOM = save_clients.CONTACT_NOM;
								oneRow_tHashOutput_1.CONTACT_PRENOM = save_clients.CONTACT_PRENOM;
								oneRow_tHashOutput_1.CONTACT1_MAIL = save_clients.CONTACT1_MAIL;
								oneRow_tHashOutput_1.CONTACT1_TEL_FIXE = save_clients.CONTACT1_TEL_FIXE;

								tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
								nb_line_tHashOutput_1++;

								tos_count_tHashOutput_1++;

								/**
								 * [tHashOutput_1 main ] stop
								 */

								/**
								 * [tHashOutput_1 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_1";

								/**
								 * [tHashOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_1 process_data_end ] start
								 */

								currentComponent = "tHashOutput_1";

								/**
								 * [tHashOutput_1 process_data_end ] stop
								 */

							} // End of branch "save_clients"

// Start of branch "rejects"
							if (rejects != null) {

								/**
								 * [tFileOutputExcel_1 main ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "rejects"

									);
								}

								xlsxTool_tFileOutputExcel_1.addRow();

								if (rejects.ID != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String.valueOf(rejects.ID)));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.Metier != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.Metier));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.Code_COMPTA != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.Code_COMPTA));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.NOMS_CLIENTS != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.NOMS_CLIENTS));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.SIREN_SIRET != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.SIREN_SIRET));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CODE_FACTU != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CODE_FACTU));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.ADRESSE_FACTU != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.ADRESSE_FACTU));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CP != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String.valueOf(rejects.CP)));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.VILLE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.VILLE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.PAYS != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.PAYS));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_GENRE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_GENRE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_NOM != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_NOM));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT_PRENOM != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT_PRENOM));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT1_MAIL != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT1_MAIL));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.CONTACT1_TEL_FIXE != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.CONTACT1_TEL_FIXE));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.errorCode != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.errorCode));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								if (rejects.errorMessage != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(rejects.errorMessage));
								} else {
									xlsxTool_tFileOutputExcel_1.addCellNullValue();
								}

								nb_line_tFileOutputExcel_1++;

								tos_count_tFileOutputExcel_1++;

								/**
								 * [tFileOutputExcel_1 main ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_end ] stop
								 */

							} // End of branch "rejects"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "save_clients");
				}

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1, true);

				if (headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0) {
					nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;
				}
				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				if (isFileGenerated_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 == 0) {

					file_tFileOutputExcel_1.delete();

				}

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "rejects");
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tHashInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class to_mysqlStruct implements routines.system.IPersistableRow<to_mysqlStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append(",siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_mysqlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_postgresStruct implements routines.system.IPersistableRow<to_postgresStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		public Long siren;

		public Long getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public String statutDiffusionEtablissement;

		public String getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Long nombrePeriodesEtablissement;

		public Long getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public String etatAdministratifUniteLegale;

		public String getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public String statutDiffusionUniteLegale;

		public String getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Long categorieJuridiqueUniteLegale;

		public Long getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public String caractereEmployeurUniteLegale;

		public String getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Long nicSiegeUniteLegale;

		public Long getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public Long anneeCategorieEntreprise;

		public Long getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public String etatAdministratifEtablissement;

		public String getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public String caractereEmployeurEtablissement;

		public String getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siren = null;
					} else {
						this.siren = dis.readLong();
					}

					this.nic = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

					this.statutDiffusionEtablissement = readString(dis);

					this.dateCreationEtablissement = readDate(dis);

					this.trancheEffectifsEtablissement = readString(dis);

					this.anneeEffectifsEtablissement = readString(dis);

					this.activitePrincipaleRegistreMetiersEtablissement = readString(dis);

					this.dateDernierTraitementEtablissement = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.etablissementSiege = null;
					} else {
						this.etablissementSiege = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nombrePeriodesEtablissement = null;
					} else {
						this.nombrePeriodesEtablissement = dis.readLong();
					}

					this.etatAdministratifUniteLegale = readString(dis);

					this.statutDiffusionUniteLegale = readString(dis);

					this.dateCreationUniteLegale = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.categorieJuridiqueUniteLegale = null;
					} else {
						this.categorieJuridiqueUniteLegale = dis.readLong();
					}

					this.denominationUniteLegale = readString(dis);

					this.sigleUniteLegale = readString(dis);

					this.denominationUsuelle1UniteLegale = readString(dis);

					this.denominationUsuelle2UniteLegale = readString(dis);

					this.denominationUsuelle3UniteLegale = readString(dis);

					this.sexeUniteLegale = readString(dis);

					this.nomUniteLegale = readString(dis);

					this.nomUsageUniteLegale = readString(dis);

					this.prenom1UniteLegale = readString(dis);

					this.prenom2UniteLegale = readString(dis);

					this.prenom3UniteLegale = readString(dis);

					this.prenom4UniteLegale = readString(dis);

					this.prenomUsuelUniteLegale = readString(dis);

					this.pseudonymeUniteLegale = readString(dis);

					this.activitePrincipaleUniteLegale = readString(dis);

					this.nomenclatureActivitePrincipaleUniteLegale = readString(dis);

					this.identifiantAssociationUniteLegale = readString(dis);

					this.economieSocialeSolidaireUniteLegale = readString(dis);

					this.caractereEmployeurUniteLegale = readString(dis);

					this.trancheEffectifsUniteLegale = readString(dis);

					this.anneeEffectifsUniteLegale = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.nicSiegeUniteLegale = null;
					} else {
						this.nicSiegeUniteLegale = dis.readLong();
					}

					this.dateDernierTraitementUniteLegale = readDate(dis);

					this.categorieEntreprise = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.anneeCategorieEntreprise = null;
					} else {
						this.anneeCategorieEntreprise = dis.readLong();
					}

					this.complementAdresseEtablissement = readString(dis);

					this.numeroVoieEtablissement = readString(dis);

					this.indiceRepetitionEtablissement = readString(dis);

					this.typeVoieEtablissement = readString(dis);

					this.libelleVoieEtablissement = readString(dis);

					this.codePostalEtablissement = readString(dis);

					this.libelleCommuneEtablissement = readString(dis);

					this.libelleCommuneEtrangerEtablissement = readString(dis);

					this.distributionSpecialeEtablissement = readString(dis);

					this.codeCommuneEtablissement = readString(dis);

					this.codeCedexEtablissement = readString(dis);

					this.libelleCedexEtablissement = readString(dis);

					this.codePaysEtrangerEtablissement = readString(dis);

					this.libellePaysEtrangerEtablissement = readString(dis);

					this.complementAdresse2Etablissement = readString(dis);

					this.numeroVoie2Etablissement = readString(dis);

					this.indiceRepetition2Etablissement = readString(dis);

					this.typeVoie2Etablissement = readString(dis);

					this.libelleVoie2Etablissement = readString(dis);

					this.codePostal2Etablissement = readString(dis);

					this.libelleCommune2Etablissement = readString(dis);

					this.libelleCommuneEtranger2Etablissement = readString(dis);

					this.distributionSpeciale2Etablissement = readString(dis);

					this.codeCommune2Etablissement = readString(dis);

					this.codeCedex2Etablissement = readString(dis);

					this.libelleCedex2Etablissement = readString(dis);

					this.codePaysEtranger2Etablissement = readString(dis);

					this.libellePaysEtranger2Etablissement = readString(dis);

					this.dateFin = readString(dis);

					this.dateDebut = readDate(dis);

					this.etatAdministratifEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEtatAdministratifEtablissement = null;
					} else {
						this.changementEtatAdministratifEtablissement = dis.readBoolean();
					}

					this.enseigne1Etablissement = readString(dis);

					this.enseigne2Etablissement = readString(dis);

					this.enseigne3Etablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementEnseigneEtablissement = null;
					} else {
						this.changementEnseigneEtablissement = dis.readBoolean();
					}

					this.denominationUsuelleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementDenominationUsuelleEtablissement = null;
					} else {
						this.changementDenominationUsuelleEtablissement = dis.readBoolean();
					}

					this.activitePrincipaleEtablissement = readString(dis);

					this.nomenclatureActivitePrincipaleEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementActivitePrincipaleEtablissement = null;
					} else {
						this.changementActivitePrincipaleEtablissement = dis.readBoolean();
					}

					this.caractereEmployeurEtablissement = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.changementCaractereEmployeurEtablissement = null;
					} else {
						this.changementCaractereEmployeurEtablissement = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

				// Long

				if (this.siren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siren);
				}

				// Integer

				writeInteger(this.nic, dos);

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

				// String

				writeString(this.statutDiffusionEtablissement, dos);

				// java.util.Date

				writeDate(this.dateCreationEtablissement, dos);

				// String

				writeString(this.trancheEffectifsEtablissement, dos);

				// String

				writeString(this.anneeEffectifsEtablissement, dos);

				// String

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos);

				// java.util.Date

				writeDate(this.dateDernierTraitementEtablissement, dos);

				// Boolean

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				// Long

				if (this.nombrePeriodesEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nombrePeriodesEtablissement);
				}

				// String

				writeString(this.etatAdministratifUniteLegale, dos);

				// String

				writeString(this.statutDiffusionUniteLegale, dos);

				// java.util.Date

				writeDate(this.dateCreationUniteLegale, dos);

				// Long

				if (this.categorieJuridiqueUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.categorieJuridiqueUniteLegale);
				}

				// String

				writeString(this.denominationUniteLegale, dos);

				// String

				writeString(this.sigleUniteLegale, dos);

				// String

				writeString(this.denominationUsuelle1UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle2UniteLegale, dos);

				// String

				writeString(this.denominationUsuelle3UniteLegale, dos);

				// String

				writeString(this.sexeUniteLegale, dos);

				// String

				writeString(this.nomUniteLegale, dos);

				// String

				writeString(this.nomUsageUniteLegale, dos);

				// String

				writeString(this.prenom1UniteLegale, dos);

				// String

				writeString(this.prenom2UniteLegale, dos);

				// String

				writeString(this.prenom3UniteLegale, dos);

				// String

				writeString(this.prenom4UniteLegale, dos);

				// String

				writeString(this.prenomUsuelUniteLegale, dos);

				// String

				writeString(this.pseudonymeUniteLegale, dos);

				// String

				writeString(this.activitePrincipaleUniteLegale, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos);

				// String

				writeString(this.identifiantAssociationUniteLegale, dos);

				// String

				writeString(this.economieSocialeSolidaireUniteLegale, dos);

				// String

				writeString(this.caractereEmployeurUniteLegale, dos);

				// String

				writeString(this.trancheEffectifsUniteLegale, dos);

				// String

				writeString(this.anneeEffectifsUniteLegale, dos);

				// Long

				if (this.nicSiegeUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nicSiegeUniteLegale);
				}

				// java.util.Date

				writeDate(this.dateDernierTraitementUniteLegale, dos);

				// String

				writeString(this.categorieEntreprise, dos);

				// Long

				if (this.anneeCategorieEntreprise == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.anneeCategorieEntreprise);
				}

				// String

				writeString(this.complementAdresseEtablissement, dos);

				// String

				writeString(this.numeroVoieEtablissement, dos);

				// String

				writeString(this.indiceRepetitionEtablissement, dos);

				// String

				writeString(this.typeVoieEtablissement, dos);

				// String

				writeString(this.libelleVoieEtablissement, dos);

				// String

				writeString(this.codePostalEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtablissement, dos);

				// String

				writeString(this.libelleCommuneEtrangerEtablissement, dos);

				// String

				writeString(this.distributionSpecialeEtablissement, dos);

				// String

				writeString(this.codeCommuneEtablissement, dos);

				// String

				writeString(this.codeCedexEtablissement, dos);

				// String

				writeString(this.libelleCedexEtablissement, dos);

				// String

				writeString(this.codePaysEtrangerEtablissement, dos);

				// String

				writeString(this.libellePaysEtrangerEtablissement, dos);

				// String

				writeString(this.complementAdresse2Etablissement, dos);

				// String

				writeString(this.numeroVoie2Etablissement, dos);

				// String

				writeString(this.indiceRepetition2Etablissement, dos);

				// String

				writeString(this.typeVoie2Etablissement, dos);

				// String

				writeString(this.libelleVoie2Etablissement, dos);

				// String

				writeString(this.codePostal2Etablissement, dos);

				// String

				writeString(this.libelleCommune2Etablissement, dos);

				// String

				writeString(this.libelleCommuneEtranger2Etablissement, dos);

				// String

				writeString(this.distributionSpeciale2Etablissement, dos);

				// String

				writeString(this.codeCommune2Etablissement, dos);

				// String

				writeString(this.codeCedex2Etablissement, dos);

				// String

				writeString(this.libelleCedex2Etablissement, dos);

				// String

				writeString(this.codePaysEtranger2Etablissement, dos);

				// String

				writeString(this.libellePaysEtranger2Etablissement, dos);

				// String

				writeString(this.dateFin, dos);

				// java.util.Date

				writeDate(this.dateDebut, dos);

				// String

				writeString(this.etatAdministratifEtablissement, dos);

				// Boolean

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				// String

				writeString(this.enseigne1Etablissement, dos);

				// String

				writeString(this.enseigne2Etablissement, dos);

				// String

				writeString(this.enseigne3Etablissement, dos);

				// Boolean

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				// String

				writeString(this.denominationUsuelleEtablissement, dos);

				// Boolean

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				// String

				writeString(this.activitePrincipaleEtablissement, dos);

				// String

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos);

				// Boolean

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				// String

				writeString(this.caractereEmployeurEtablissement, dos);

				// Boolean

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append(",siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + statutDiffusionEtablissement);
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + etatAdministratifUniteLegale);
			sb.append(",statutDiffusionUniteLegale=" + statutDiffusionUniteLegale);
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + caractereEmployeurUniteLegale);
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + String.valueOf(anneeCategorieEntreprise));
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + etatAdministratifEtablissement);
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + caractereEmployeurEtablissement);
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_postgresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class clients_siret_sirenStruct
			implements routines.system.IPersistableRow<clients_siret_sirenStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clients_siret_sirenStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Metier;

		public String getMetier() {
			return this.Metier;
		}

		public String Code_COMPTA;

		public String getCode_COMPTA() {
			return this.Code_COMPTA;
		}

		public String NOMS_CLIENTS;

		public String getNOMS_CLIENTS() {
			return this.NOMS_CLIENTS;
		}

		public String SIREN_SIRET;

		public String getSIREN_SIRET() {
			return this.SIREN_SIRET;
		}

		public String CODE_FACTU;

		public String getCODE_FACTU() {
			return this.CODE_FACTU;
		}

		public String ADRESSE_FACTU;

		public String getADRESSE_FACTU() {
			return this.ADRESSE_FACTU;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String PAYS;

		public String getPAYS() {
			return this.PAYS;
		}

		public String CONTACT_GENRE;

		public String getCONTACT_GENRE() {
			return this.CONTACT_GENRE;
		}

		public String CONTACT_NOM;

		public String getCONTACT_NOM() {
			return this.CONTACT_NOM;
		}

		public String CONTACT_PRENOM;

		public String getCONTACT_PRENOM() {
			return this.CONTACT_PRENOM;
		}

		public String CONTACT1_MAIL;

		public String getCONTACT1_MAIL() {
			return this.CONTACT1_MAIL;
		}

		public String CONTACT1_TEL_FIXE;

		public String getCONTACT1_TEL_FIXE() {
			return this.CONTACT1_TEL_FIXE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IIIDATA_GET_DATAS.length) {
					if (length < 1024 && commonByteArray_IIIDATA_GET_DATAS.length == 0) {
						commonByteArray_IIIDATA_GET_DATAS = new byte[1024];
					} else {
						commonByteArray_IIIDATA_GET_DATAS = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_IIIDATA_GET_DATAS, 0, length);
				strReturn = new String(commonByteArray_IIIDATA_GET_DATAS, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Metier = readString(dis);

					this.Code_COMPTA = readString(dis);

					this.NOMS_CLIENTS = readString(dis);

					this.SIREN_SIRET = readString(dis);

					this.CODE_FACTU = readString(dis);

					this.ADRESSE_FACTU = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.PAYS = readString(dis);

					this.CONTACT_GENRE = readString(dis);

					this.CONTACT_NOM = readString(dis);

					this.CONTACT_PRENOM = readString(dis);

					this.CONTACT1_MAIL = readString(dis);

					this.CONTACT1_TEL_FIXE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Metier, dos);

				// String

				writeString(this.Code_COMPTA, dos);

				// String

				writeString(this.NOMS_CLIENTS, dos);

				// String

				writeString(this.SIREN_SIRET, dos);

				// String

				writeString(this.CODE_FACTU, dos);

				// String

				writeString(this.ADRESSE_FACTU, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.PAYS, dos);

				// String

				writeString(this.CONTACT_GENRE, dos);

				// String

				writeString(this.CONTACT_NOM, dos);

				// String

				writeString(this.CONTACT_PRENOM, dos);

				// String

				writeString(this.CONTACT1_MAIL, dos);

				// String

				writeString(this.CONTACT1_TEL_FIXE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Metier=" + Metier);
			sb.append(",Code_COMPTA=" + Code_COMPTA);
			sb.append(",NOMS_CLIENTS=" + NOMS_CLIENTS);
			sb.append(",SIREN_SIRET=" + SIREN_SIRET);
			sb.append(",CODE_FACTU=" + CODE_FACTU);
			sb.append(",ADRESSE_FACTU=" + ADRESSE_FACTU);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",PAYS=" + PAYS);
			sb.append(",CONTACT_GENRE=" + CONTACT_GENRE);
			sb.append(",CONTACT_NOM=" + CONTACT_NOM);
			sb.append(",CONTACT_PRENOM=" + CONTACT_PRENOM);
			sb.append(",CONTACT1_MAIL=" + CONTACT1_MAIL);
			sb.append(",CONTACT1_TEL_FIXE=" + CONTACT1_TEL_FIXE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tHashInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);

				clients_siret_sirenStruct clients_siret_siren = new clients_siret_sirenStruct();
				to_mysqlStruct to_mysql = new to_mysqlStruct();
				to_postgresStruct to_postgres = new to_postgresStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "to_mysql");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "csv";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = "noDatetimeStringSync=true";
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "5858" + "/" + "cours" + "?"
						+ properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:9W+Xst2Wi6+f5ikhlaOmtuVIjy4d/HG24wugSWpcI+Y=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("cours", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("csv")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
							+ "`(`ID` INT(50)  ,`Metier` VARCHAR(150)  ,`Code_COMPTA` VARCHAR(150)  ,`NOMS_CLIENTS` VARCHAR(150)  ,`SIREN_SIRET` VARCHAR(150)  ,`CODE_FACTU` VARCHAR(80)  ,`ADRESSE_FACTU` VARCHAR(300)  ,`CP` INT(150)  ,`VILLE` VARCHAR(150)  ,`PAYS` VARCHAR(150)  ,`CONTACT_GENRE` VARCHAR(150)  ,`CONTACT_NOM` VARCHAR(150)  ,`CONTACT_PRENOM` VARCHAR(150)  ,`CONTACT1_MAIL` VARCHAR(150)  ,`CONTACT1_TEL_FIXE` VARCHAR(150)  ,`siren` BIGINT(25)  ,`nic` INT(15)  ,`siret` BIGINT(25)  ,`statutDiffusionEtablissement` VARCHAR(150)  ,`dateCreationEtablissement` DATETIME ,`trancheEffectifsEtablissement` VARCHAR(150)  ,`anneeEffectifsEtablissement` VARCHAR(150)  ,`activitePrincipaleRegistreMetiersEtablissement` VARCHAR(150)  ,`dateDernierTraitementEtablissement` DATETIME ,`etablissementSiege` BIT(1)  ,`nombrePeriodesEtablissement` BIGINT(25)  ,`etatAdministratifUniteLegale` VARCHAR(150)  ,`statutDiffusionUniteLegale` VARCHAR(150)  ,`dateCreationUniteLegale` DATETIME ,`categorieJuridiqueUniteLegale` BIGINT(25)  ,`denominationUniteLegale` VARCHAR(150)  ,`sigleUniteLegale` VARCHAR(150)  ,`denominationUsuelle1UniteLegale` VARCHAR(150)  ,`denominationUsuelle2UniteLegale` VARCHAR(150)  ,`denominationUsuelle3UniteLegale` VARCHAR(150)  ,`sexeUniteLegale` VARCHAR(105)  ,`nomUniteLegale` VARCHAR(150)  ,`nomUsageUniteLegale` VARCHAR(150)  ,`prenom1UniteLegale` VARCHAR(150)  ,`prenom2UniteLegale` VARCHAR(150)  ,`prenom3UniteLegale` VARCHAR(150)  ,`prenom4UniteLegale` VARCHAR(150)  ,`prenomUsuelUniteLegale` VARCHAR(150)  ,`pseudonymeUniteLegale` VARCHAR(150)  ,`activitePrincipaleUniteLegale` VARCHAR(150)  ,`nomenclatureActivitePrincipaleUniteLegale` VARCHAR(150)  ,`identifiantAssociationUniteLegale` VARCHAR(150)  ,`economieSocialeSolidaireUniteLegale` VARCHAR(150)  ,`caractereEmployeurUniteLegale` VARCHAR(150)  ,`trancheEffectifsUniteLegale` VARCHAR(150)  ,`anneeEffectifsUniteLegale` VARCHAR(150)  ,`nicSiegeUniteLegale` BIGINT(25)  ,`dateDernierTraitementUniteLegale` DATETIME ,`categorieEntreprise` VARCHAR(150)  ,`anneeCategorieEntreprise` BIGINT(25)  ,`complementAdresseEtablissement` VARCHAR(150)  ,`numeroVoieEtablissement` VARCHAR(150)  ,`indiceRepetitionEtablissement` VARCHAR(150)  ,`typeVoieEtablissement` VARCHAR(150)  ,`libelleVoieEtablissement` VARCHAR(150)  ,`codePostalEtablissement` VARCHAR(150)  ,`libelleCommuneEtablissement` VARCHAR(150)  ,`libelleCommuneEtrangerEtablissement` VARCHAR(150)  ,`distributionSpecialeEtablissement` VARCHAR(150)  ,`codeCommuneEtablissement` VARCHAR(150)  ,`codeCedexEtablissement` VARCHAR(150)  ,`libelleCedexEtablissement` VARCHAR(150)  ,`codePaysEtrangerEtablissement` VARCHAR(105)  ,`libellePaysEtrangerEtablissement` VARCHAR(100)  ,`complementAdresse2Etablissement` VARCHAR(100)  ,`numeroVoie2Etablissement` VARCHAR(100)  ,`indiceRepetition2Etablissement` VARCHAR(100)  ,`typeVoie2Etablissement` VARCHAR(100)  ,`libelleVoie2Etablissement` VARCHAR(100)  ,`codePostal2Etablissement` VARCHAR(100)  ,`libelleCommune2Etablissement` VARCHAR(100)  ,`libelleCommuneEtranger2Etablissement` VARCHAR(100)  ,`distributionSpeciale2Etablissement` VARCHAR(100)  ,`codeCommune2Etablissement` VARCHAR(100)  ,`codeCedex2Etablissement` VARCHAR(100)  ,`libelleCedex2Etablissement` VARCHAR(100)  ,`codePaysEtranger2Etablissement` VARCHAR(100)  ,`libellePaysEtranger2Etablissement` VARCHAR(100)  ,`dateFin` VARCHAR(100)  ,`dateDebut` DATETIME ,`etatAdministratifEtablissement` VARCHAR(100)  ,`changementEtatAdministratifEtablissement` BIT(1)  ,`enseigne1Etablissement` VARCHAR(100)  ,`enseigne2Etablissement` VARCHAR(100)  ,`enseigne3Etablissement` VARCHAR(100)  ,`changementEnseigneEtablissement` BIT(1)  ,`denominationUsuelleEtablissement` VARCHAR(100)  ,`changementDenominationUsuelleEtablissement` BIT(1)  ,`activitePrincipaleEtablissement` VARCHAR(100)  ,`nomenclatureActivitePrincipaleEtablissement` VARCHAR(100)  ,`changementActivitePrincipaleEtablissement` BIT(1)  ,`caractereEmployeurEtablissement` VARCHAR(100)  ,`changementCaractereEmployeurEtablissement` BIT(1)  )");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "csv"
						+ "` (`ID`,`Metier`,`Code_COMPTA`,`NOMS_CLIENTS`,`SIREN_SIRET`,`CODE_FACTU`,`ADRESSE_FACTU`,`CP`,`VILLE`,`PAYS`,`CONTACT_GENRE`,`CONTACT_NOM`,`CONTACT_PRENOM`,`CONTACT1_MAIL`,`CONTACT1_TEL_FIXE`,`siren`,`nic`,`siret`,`statutDiffusionEtablissement`,`dateCreationEtablissement`,`trancheEffectifsEtablissement`,`anneeEffectifsEtablissement`,`activitePrincipaleRegistreMetiersEtablissement`,`dateDernierTraitementEtablissement`,`etablissementSiege`,`nombrePeriodesEtablissement`,`etatAdministratifUniteLegale`,`statutDiffusionUniteLegale`,`dateCreationUniteLegale`,`categorieJuridiqueUniteLegale`,`denominationUniteLegale`,`sigleUniteLegale`,`denominationUsuelle1UniteLegale`,`denominationUsuelle2UniteLegale`,`denominationUsuelle3UniteLegale`,`sexeUniteLegale`,`nomUniteLegale`,`nomUsageUniteLegale`,`prenom1UniteLegale`,`prenom2UniteLegale`,`prenom3UniteLegale`,`prenom4UniteLegale`,`prenomUsuelUniteLegale`,`pseudonymeUniteLegale`,`activitePrincipaleUniteLegale`,`nomenclatureActivitePrincipaleUniteLegale`,`identifiantAssociationUniteLegale`,`economieSocialeSolidaireUniteLegale`,`caractereEmployeurUniteLegale`,`trancheEffectifsUniteLegale`,`anneeEffectifsUniteLegale`,`nicSiegeUniteLegale`,`dateDernierTraitementUniteLegale`,`categorieEntreprise`,`anneeCategorieEntreprise`,`complementAdresseEtablissement`,`numeroVoieEtablissement`,`indiceRepetitionEtablissement`,`typeVoieEtablissement`,`libelleVoieEtablissement`,`codePostalEtablissement`,`libelleCommuneEtablissement`,`libelleCommuneEtrangerEtablissement`,`distributionSpecialeEtablissement`,`codeCommuneEtablissement`,`codeCedexEtablissement`,`libelleCedexEtablissement`,`codePaysEtrangerEtablissement`,`libellePaysEtrangerEtablissement`,`complementAdresse2Etablissement`,`numeroVoie2Etablissement`,`indiceRepetition2Etablissement`,`typeVoie2Etablissement`,`libelleVoie2Etablissement`,`codePostal2Etablissement`,`libelleCommune2Etablissement`,`libelleCommuneEtranger2Etablissement`,`distributionSpeciale2Etablissement`,`codeCommune2Etablissement`,`codeCedex2Etablissement`,`libelleCedex2Etablissement`,`codePaysEtranger2Etablissement`,`libellePaysEtranger2Etablissement`,`dateFin`,`dateDebut`,`etatAdministratifEtablissement`,`changementEtatAdministratifEtablissement`,`enseigne1Etablissement`,`enseigne2Etablissement`,`enseigne3Etablissement`,`changementEnseigneEtablissement`,`denominationUsuelleEtablissement`,`changementDenominationUsuelleEtablissement`,`activitePrincipaleEtablissement`,`nomenclatureActivitePrincipaleEtablissement`,`changementActivitePrincipaleEtablissement`,`caractereEmployeurEtablissement`,`changementCaractereEmployeurEtablissement`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "to_postgres");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "public";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("csv");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("csv");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "epsi";
				dbUser_tDBOutput_2 = "romain";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:FvxxWj/0rE2Wz1c2Frq49qt79ETzdSqjAgiiL9i/ZRPkdg==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_2 = "public";
					if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_2.next()) {
								defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
						if (table_tDBOutput_2.equals(("csv")) && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2)
								|| ((dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0)
										&& defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
								+ "\"(\"ID\" INT4 ,\"Metier\" VARCHAR(150)  ,\"Code_COMPTA\" VARCHAR(150)  ,\"NOMS_CLIENTS\" VARCHAR(150)  ,\"SIREN_SIRET\" VARCHAR(150)  ,\"CODE_FACTU\" VARCHAR(80)  ,\"ADRESSE_FACTU\" VARCHAR(300)  ,\"CP\" INT4 ,\"VILLE\" VARCHAR(150)  ,\"PAYS\" VARCHAR(150)  ,\"CONTACT_GENRE\" VARCHAR(150)  ,\"CONTACT_NOM\" VARCHAR(150)  ,\"CONTACT_PRENOM\" VARCHAR(150)  ,\"CONTACT1_MAIL\" VARCHAR(150)  ,\"CONTACT1_TEL_FIXE\" VARCHAR(150)  ,\"siren\" INT8 ,\"nic\" INT4 ,\"siret\" INT8 ,\"statutDiffusionEtablissement\" VARCHAR(150)  ,\"dateCreationEtablissement\" TIMESTAMP ,\"trancheEffectifsEtablissement\" VARCHAR(150)  ,\"anneeEffectifsEtablissement\" VARCHAR(150)  ,\"activitePrincipaleRegistreMetiersEtablissement\" VARCHAR(150)  ,\"dateDernierTraitementEtablissement\" TIMESTAMP ,\"etablissementSiege\" BOOL ,\"nombrePeriodesEtablissement\" INT8 ,\"etatAdministratifUniteLegale\" VARCHAR(150)  ,\"statutDiffusionUniteLegale\" VARCHAR(150)  ,\"dateCreationUniteLegale\" TIMESTAMP ,\"categorieJuridiqueUniteLegale\" INT8 ,\"denominationUniteLegale\" VARCHAR(150)  ,\"sigleUniteLegale\" VARCHAR(150)  ,\"denominationUsuelle1UniteLegale\" VARCHAR(150)  ,\"denominationUsuelle2UniteLegale\" VARCHAR(150)  ,\"denominationUsuelle3UniteLegale\" VARCHAR(150)  ,\"sexeUniteLegale\" VARCHAR(105)  ,\"nomUniteLegale\" VARCHAR(150)  ,\"nomUsageUniteLegale\" VARCHAR(150)  ,\"prenom1UniteLegale\" VARCHAR(150)  ,\"prenom2UniteLegale\" VARCHAR(150)  ,\"prenom3UniteLegale\" VARCHAR(150)  ,\"prenom4UniteLegale\" VARCHAR(150)  ,\"prenomUsuelUniteLegale\" VARCHAR(150)  ,\"pseudonymeUniteLegale\" VARCHAR(150)  ,\"activitePrincipaleUniteLegale\" VARCHAR(150)  ,\"nomenclatureActivitePrincipaleUniteLegale\" VARCHAR(150)  ,\"identifiantAssociationUniteLegale\" VARCHAR(150)  ,\"economieSocialeSolidaireUniteLegale\" VARCHAR(150)  ,\"caractereEmployeurUniteLegale\" VARCHAR(150)  ,\"trancheEffectifsUniteLegale\" VARCHAR(150)  ,\"anneeEffectifsUniteLegale\" VARCHAR(150)  ,\"nicSiegeUniteLegale\" INT8 ,\"dateDernierTraitementUniteLegale\" TIMESTAMP ,\"categorieEntreprise\" VARCHAR(150)  ,\"anneeCategorieEntreprise\" INT8 ,\"complementAdresseEtablissement\" VARCHAR(150)  ,\"numeroVoieEtablissement\" VARCHAR(150)  ,\"indiceRepetitionEtablissement\" VARCHAR(150)  ,\"typeVoieEtablissement\" VARCHAR(150)  ,\"libelleVoieEtablissement\" VARCHAR(150)  ,\"codePostalEtablissement\" VARCHAR(150)  ,\"libelleCommuneEtablissement\" VARCHAR(150)  ,\"libelleCommuneEtrangerEtablissement\" VARCHAR(150)  ,\"distributionSpecialeEtablissement\" VARCHAR(150)  ,\"codeCommuneEtablissement\" VARCHAR(150)  ,\"codeCedexEtablissement\" VARCHAR(150)  ,\"libelleCedexEtablissement\" VARCHAR(150)  ,\"codePaysEtrangerEtablissement\" VARCHAR(105)  ,\"libellePaysEtrangerEtablissement\" VARCHAR(100)  ,\"complementAdresse2Etablissement\" VARCHAR(100)  ,\"numeroVoie2Etablissement\" VARCHAR(100)  ,\"indiceRepetition2Etablissement\" VARCHAR(100)  ,\"typeVoie2Etablissement\" VARCHAR(100)  ,\"libelleVoie2Etablissement\" VARCHAR(100)  ,\"codePostal2Etablissement\" VARCHAR(100)  ,\"libelleCommune2Etablissement\" VARCHAR(100)  ,\"libelleCommuneEtranger2Etablissement\" VARCHAR(100)  ,\"distributionSpeciale2Etablissement\" VARCHAR(100)  ,\"codeCommune2Etablissement\" VARCHAR(100)  ,\"codeCedex2Etablissement\" VARCHAR(100)  ,\"libelleCedex2Etablissement\" VARCHAR(100)  ,\"codePaysEtranger2Etablissement\" VARCHAR(100)  ,\"libellePaysEtranger2Etablissement\" VARCHAR(100)  ,\"dateFin\" VARCHAR(100)  ,\"dateDebut\" TIMESTAMP ,\"etatAdministratifEtablissement\" VARCHAR(100)  ,\"changementEtatAdministratifEtablissement\" BOOL ,\"enseigne1Etablissement\" VARCHAR(100)  ,\"enseigne2Etablissement\" VARCHAR(100)  ,\"enseigne3Etablissement\" VARCHAR(100)  ,\"changementEnseigneEtablissement\" BOOL ,\"denominationUsuelleEtablissement\" VARCHAR(100)  ,\"changementDenominationUsuelleEtablissement\" BOOL ,\"activitePrincipaleEtablissement\" VARCHAR(100)  ,\"nomenclatureActivitePrincipaleEtablissement\" VARCHAR(100)  ,\"changementActivitePrincipaleEtablissement\" BOOL ,\"caractereEmployeurEtablissement\" VARCHAR(100)  ,\"changementCaractereEmployeurEtablissement\" BOOL )");
					}
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"ID\",\"Metier\",\"Code_COMPTA\",\"NOMS_CLIENTS\",\"SIREN_SIRET\",\"CODE_FACTU\",\"ADRESSE_FACTU\",\"CP\",\"VILLE\",\"PAYS\",\"CONTACT_GENRE\",\"CONTACT_NOM\",\"CONTACT_PRENOM\",\"CONTACT1_MAIL\",\"CONTACT1_TEL_FIXE\",\"siren\",\"nic\",\"siret\",\"statutDiffusionEtablissement\",\"dateCreationEtablissement\",\"trancheEffectifsEtablissement\",\"anneeEffectifsEtablissement\",\"activitePrincipaleRegistreMetiersEtablissement\",\"dateDernierTraitementEtablissement\",\"etablissementSiege\",\"nombrePeriodesEtablissement\",\"etatAdministratifUniteLegale\",\"statutDiffusionUniteLegale\",\"dateCreationUniteLegale\",\"categorieJuridiqueUniteLegale\",\"denominationUniteLegale\",\"sigleUniteLegale\",\"denominationUsuelle1UniteLegale\",\"denominationUsuelle2UniteLegale\",\"denominationUsuelle3UniteLegale\",\"sexeUniteLegale\",\"nomUniteLegale\",\"nomUsageUniteLegale\",\"prenom1UniteLegale\",\"prenom2UniteLegale\",\"prenom3UniteLegale\",\"prenom4UniteLegale\",\"prenomUsuelUniteLegale\",\"pseudonymeUniteLegale\",\"activitePrincipaleUniteLegale\",\"nomenclatureActivitePrincipaleUniteLegale\",\"identifiantAssociationUniteLegale\",\"economieSocialeSolidaireUniteLegale\",\"caractereEmployeurUniteLegale\",\"trancheEffectifsUniteLegale\",\"anneeEffectifsUniteLegale\",\"nicSiegeUniteLegale\",\"dateDernierTraitementUniteLegale\",\"categorieEntreprise\",\"anneeCategorieEntreprise\",\"complementAdresseEtablissement\",\"numeroVoieEtablissement\",\"indiceRepetitionEtablissement\",\"typeVoieEtablissement\",\"libelleVoieEtablissement\",\"codePostalEtablissement\",\"libelleCommuneEtablissement\",\"libelleCommuneEtrangerEtablissement\",\"distributionSpecialeEtablissement\",\"codeCommuneEtablissement\",\"codeCedexEtablissement\",\"libelleCedexEtablissement\",\"codePaysEtrangerEtablissement\",\"libellePaysEtrangerEtablissement\",\"complementAdresse2Etablissement\",\"numeroVoie2Etablissement\",\"indiceRepetition2Etablissement\",\"typeVoie2Etablissement\",\"libelleVoie2Etablissement\",\"codePostal2Etablissement\",\"libelleCommune2Etablissement\",\"libelleCommuneEtranger2Etablissement\",\"distributionSpeciale2Etablissement\",\"codeCommune2Etablissement\",\"codeCedex2Etablissement\",\"libelleCedex2Etablissement\",\"codePaysEtranger2Etablissement\",\"libellePaysEtranger2Etablissement\",\"dateFin\",\"dateDebut\",\"etatAdministratifEtablissement\",\"changementEtatAdministratifEtablissement\",\"enseigne1Etablissement\",\"enseigne2Etablissement\",\"enseigne3Etablissement\",\"changementEnseigneEtablissement\",\"denominationUsuelleEtablissement\",\"changementDenominationUsuelleEtablissement\",\"activitePrincipaleEtablissement\",\"nomenclatureActivitePrincipaleEtablissement\",\"changementActivitePrincipaleEtablissement\",\"caractereEmployeurEtablissement\",\"changementCaractereEmployeurEtablissement\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "clients_siret_siren");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct> tHash_Lookup_sirets = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct>) globalMap
						.get("tHash_Lookup_sirets"));

				siretsStruct siretsHashKey = new siretsStruct();
				siretsStruct siretsDefault = new siretsStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				to_mysqlStruct to_mysql_tmp = new to_mysqlStruct();
				to_postgresStruct to_postgres_tmp = new to_postgresStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tHashInput_4 begin ] start
				 */

				ok_Hash.put("tHashInput_4", false);
				start_Hash.put("tHashInput_4", System.currentTimeMillis());

				currentComponent = "tHashInput_4";

				int tos_count_tHashInput_4 = 0;

				int nb_line_tHashInput_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<save_clientsStruct> tHashFile_tHashInput_4 = mf_tHashInput_4
						.getAdvancedMemoryHashFile("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<save_clientsStruct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
				while (iterator_tHashInput_4.hasNext()) {
					save_clientsStruct next_tHashInput_4 = iterator_tHashInput_4.next();

					clients_siret_siren.ID = next_tHashInput_4.ID;
					clients_siret_siren.Metier = next_tHashInput_4.Metier;
					clients_siret_siren.Code_COMPTA = next_tHashInput_4.Code_COMPTA;
					clients_siret_siren.NOMS_CLIENTS = next_tHashInput_4.NOMS_CLIENTS;
					clients_siret_siren.SIREN_SIRET = next_tHashInput_4.SIREN_SIRET;
					clients_siret_siren.CODE_FACTU = next_tHashInput_4.CODE_FACTU;
					clients_siret_siren.ADRESSE_FACTU = next_tHashInput_4.ADRESSE_FACTU;
					clients_siret_siren.CP = next_tHashInput_4.CP;
					clients_siret_siren.VILLE = next_tHashInput_4.VILLE;
					clients_siret_siren.PAYS = next_tHashInput_4.PAYS;
					clients_siret_siren.CONTACT_GENRE = next_tHashInput_4.CONTACT_GENRE;
					clients_siret_siren.CONTACT_NOM = next_tHashInput_4.CONTACT_NOM;
					clients_siret_siren.CONTACT_PRENOM = next_tHashInput_4.CONTACT_PRENOM;
					clients_siret_siren.CONTACT1_MAIL = next_tHashInput_4.CONTACT1_MAIL;
					clients_siret_siren.CONTACT1_TEL_FIXE = next_tHashInput_4.CONTACT1_TEL_FIXE;

					/**
					 * [tHashInput_4 begin ] stop
					 */

					/**
					 * [tHashInput_4 main ] start
					 */

					currentComponent = "tHashInput_4";

					tos_count_tHashInput_4++;

					/**
					 * [tHashInput_4 main ] stop
					 */

					/**
					 * [tHashInput_4 process_data_begin ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "clients_siret_siren"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "sirets"
					///////////////////////////////////////////////

					boolean forceLoopsirets = false;

					siretsStruct siretsObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4 = false;

						siretsHashKey.siret = Long.parseLong(StringHandling.RIGHT(clients_siret_siren.SIREN_SIRET, 14));

						siretsHashKey.hashCodeDirty = true;

						tHash_Lookup_sirets.lookup(siretsHashKey);

						if (!tHash_Lookup_sirets.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_4 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_sirets != null && tHash_Lookup_sirets.getCount(siretsHashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'sirets' and it contains more one result from keys : sirets.siret = '" +
						// siretsHashKey.siret + "'");
					} // G 071

					siretsStruct sirets = null;

					siretsStruct fromLookup_sirets = null;
					sirets = siretsDefault;

					if (tHash_Lookup_sirets != null && tHash_Lookup_sirets.hasNext()) { // G 099

						fromLookup_sirets = tHash_Lookup_sirets.next();

					} // G 099

					if (fromLookup_sirets != null) {
						sirets = fromLookup_sirets;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
						// ###############################
						// # Output tables

						to_mysql = null;
						to_postgres = null;

						if (!rejectedInnerJoin_tMap_4) {

// # Output table : 'to_mysql'
							to_mysql_tmp.ID = clients_siret_siren.ID;
							to_mysql_tmp.Metier = clients_siret_siren.Metier;
							to_mysql_tmp.Code_COMPTA = clients_siret_siren.Code_COMPTA;
							to_mysql_tmp.NOMS_CLIENTS = clients_siret_siren.NOMS_CLIENTS;
							to_mysql_tmp.SIREN_SIRET = clients_siret_siren.SIREN_SIRET;
							to_mysql_tmp.CODE_FACTU = clients_siret_siren.CODE_FACTU;
							to_mysql_tmp.ADRESSE_FACTU = clients_siret_siren.ADRESSE_FACTU;
							to_mysql_tmp.CP = clients_siret_siren.CP;
							to_mysql_tmp.VILLE = clients_siret_siren.VILLE;
							to_mysql_tmp.PAYS = clients_siret_siren.PAYS;
							to_mysql_tmp.CONTACT_GENRE = clients_siret_siren.CONTACT_GENRE;
							to_mysql_tmp.CONTACT_NOM = clients_siret_siren.CONTACT_NOM;
							to_mysql_tmp.CONTACT_PRENOM = clients_siret_siren.CONTACT_PRENOM;
							to_mysql_tmp.CONTACT1_MAIL = clients_siret_siren.CONTACT1_MAIL;
							to_mysql_tmp.CONTACT1_TEL_FIXE = clients_siret_siren.CONTACT1_TEL_FIXE;
							to_mysql_tmp.siren = (sirets.siren + "").equals("") ? null
									: Long.parseLong(sirets.siren + "");
							to_mysql_tmp.nic = sirets.nic;
							to_mysql_tmp.siret = sirets.siret;
							to_mysql_tmp.statutDiffusionEtablissement = String
									.valueOf(sirets.statutDiffusionEtablissement);
							to_mysql_tmp.dateCreationEtablissement = sirets.dateCreationEtablissement;
							to_mysql_tmp.trancheEffectifsEtablissement = sirets.trancheEffectifsEtablissement;
							to_mysql_tmp.anneeEffectifsEtablissement = sirets.anneeEffectifsEtablissement;
							to_mysql_tmp.activitePrincipaleRegistreMetiersEtablissement = sirets.activitePrincipaleRegistreMetiersEtablissement;
							to_mysql_tmp.dateDernierTraitementEtablissement = sirets.dateDernierTraitementEtablissement;
							to_mysql_tmp.etablissementSiege = sirets.etablissementSiege;
							to_mysql_tmp.nombrePeriodesEtablissement = (sirets.nombrePeriodesEtablissement + "")
									.equals("") ? null : Long.parseLong(sirets.nombrePeriodesEtablissement + "");
							to_mysql_tmp.etatAdministratifUniteLegale = String
									.valueOf(sirets.etatAdministratifUniteLegale);
							to_mysql_tmp.statutDiffusionUniteLegale = String.valueOf(sirets.statutDiffusionUniteLegale);
							to_mysql_tmp.dateCreationUniteLegale = sirets.dateCreationUniteLegale;
							to_mysql_tmp.categorieJuridiqueUniteLegale = (sirets.categorieJuridiqueUniteLegale)
									.equals("") ? null : Long.parseLong(sirets.categorieJuridiqueUniteLegale + "");
							to_mysql_tmp.denominationUniteLegale = sirets.denominationUniteLegale;
							to_mysql_tmp.sigleUniteLegale = sirets.sigleUniteLegale;
							to_mysql_tmp.denominationUsuelle1UniteLegale = sirets.denominationUsuelle1UniteLegale;
							to_mysql_tmp.denominationUsuelle2UniteLegale = sirets.denominationUsuelle2UniteLegale;
							to_mysql_tmp.denominationUsuelle3UniteLegale = sirets.denominationUsuelle3UniteLegale;
							to_mysql_tmp.sexeUniteLegale = sirets.sexeUniteLegale;
							to_mysql_tmp.nomUniteLegale = sirets.nomUniteLegale;
							to_mysql_tmp.nomUsageUniteLegale = sirets.nomUsageUniteLegale;
							to_mysql_tmp.prenom1UniteLegale = sirets.prenom1UniteLegale;
							to_mysql_tmp.prenom2UniteLegale = sirets.prenom2UniteLegale;
							to_mysql_tmp.prenom3UniteLegale = sirets.prenom3UniteLegale;
							to_mysql_tmp.prenom4UniteLegale = sirets.prenom4UniteLegale;
							to_mysql_tmp.prenomUsuelUniteLegale = sirets.prenomUsuelUniteLegale;
							to_mysql_tmp.pseudonymeUniteLegale = sirets.pseudonymeUniteLegale;
							to_mysql_tmp.activitePrincipaleUniteLegale = sirets.activitePrincipaleUniteLegale;
							to_mysql_tmp.nomenclatureActivitePrincipaleUniteLegale = sirets.nomenclatureActivitePrincipaleUniteLegale;
							to_mysql_tmp.identifiantAssociationUniteLegale = sirets.identifiantAssociationUniteLegale;
							to_mysql_tmp.economieSocialeSolidaireUniteLegale = sirets.economieSocialeSolidaireUniteLegale;
							to_mysql_tmp.caractereEmployeurUniteLegale = String
									.valueOf(sirets.caractereEmployeurUniteLegale);
							to_mysql_tmp.trancheEffectifsUniteLegale = sirets.trancheEffectifsUniteLegale;
							to_mysql_tmp.anneeEffectifsUniteLegale = sirets.anneeEffectifsUniteLegale;
							to_mysql_tmp.nicSiegeUniteLegale = (sirets.nicSiegeUniteLegale).equals("") ? null
									: Long.parseLong(sirets.nicSiegeUniteLegale + "");
							to_mysql_tmp.dateDernierTraitementUniteLegale = sirets.dateDernierTraitementUniteLegale;
							to_mysql_tmp.categorieEntreprise = sirets.categorieEntreprise;
							to_mysql_tmp.anneeCategorieEntreprise = (sirets.anneeCategorieEntreprise).equals("") ? null
									: Long.parseLong(sirets.anneeCategorieEntreprise + "");
							to_mysql_tmp.complementAdresseEtablissement = sirets.complementAdresseEtablissement;
							to_mysql_tmp.numeroVoieEtablissement = sirets.numeroVoieEtablissement;
							to_mysql_tmp.indiceRepetitionEtablissement = sirets.indiceRepetitionEtablissement;
							to_mysql_tmp.typeVoieEtablissement = sirets.typeVoieEtablissement;
							to_mysql_tmp.libelleVoieEtablissement = sirets.libelleVoieEtablissement;
							to_mysql_tmp.codePostalEtablissement = sirets.codePostalEtablissement;
							to_mysql_tmp.libelleCommuneEtablissement = sirets.libelleCommuneEtablissement;
							to_mysql_tmp.libelleCommuneEtrangerEtablissement = sirets.libelleCommuneEtrangerEtablissement;
							to_mysql_tmp.distributionSpecialeEtablissement = sirets.distributionSpecialeEtablissement;
							to_mysql_tmp.codeCommuneEtablissement = sirets.codeCommuneEtablissement;
							to_mysql_tmp.codeCedexEtablissement = sirets.codeCedexEtablissement;
							to_mysql_tmp.libelleCedexEtablissement = sirets.libelleCedexEtablissement;
							to_mysql_tmp.codePaysEtrangerEtablissement = sirets.codePaysEtrangerEtablissement;
							to_mysql_tmp.libellePaysEtrangerEtablissement = sirets.libellePaysEtrangerEtablissement;
							to_mysql_tmp.complementAdresse2Etablissement = sirets.complementAdresse2Etablissement;
							to_mysql_tmp.numeroVoie2Etablissement = sirets.numeroVoie2Etablissement;
							to_mysql_tmp.indiceRepetition2Etablissement = sirets.indiceRepetition2Etablissement;
							to_mysql_tmp.typeVoie2Etablissement = sirets.typeVoie2Etablissement;
							to_mysql_tmp.libelleVoie2Etablissement = sirets.libelleVoie2Etablissement;
							to_mysql_tmp.codePostal2Etablissement = sirets.codePostal2Etablissement;
							to_mysql_tmp.libelleCommune2Etablissement = sirets.libelleCommune2Etablissement;
							to_mysql_tmp.libelleCommuneEtranger2Etablissement = sirets.libelleCommuneEtranger2Etablissement;
							to_mysql_tmp.distributionSpeciale2Etablissement = sirets.distributionSpeciale2Etablissement;
							to_mysql_tmp.codeCommune2Etablissement = sirets.codeCommune2Etablissement;
							to_mysql_tmp.codeCedex2Etablissement = sirets.codeCedex2Etablissement;
							to_mysql_tmp.libelleCedex2Etablissement = sirets.libelleCedex2Etablissement;
							to_mysql_tmp.codePaysEtranger2Etablissement = sirets.codePaysEtranger2Etablissement;
							to_mysql_tmp.libellePaysEtranger2Etablissement = sirets.libellePaysEtranger2Etablissement;
							to_mysql_tmp.dateFin = sirets.dateFin;
							to_mysql_tmp.dateDebut = sirets.dateDebut;
							to_mysql_tmp.etatAdministratifEtablissement = String
									.valueOf(sirets.etatAdministratifEtablissement);
							to_mysql_tmp.changementEtatAdministratifEtablissement = sirets.changementEtatAdministratifEtablissement;
							to_mysql_tmp.enseigne1Etablissement = sirets.enseigne1Etablissement;
							to_mysql_tmp.enseigne2Etablissement = sirets.enseigne2Etablissement;
							to_mysql_tmp.enseigne3Etablissement = sirets.enseigne3Etablissement;
							to_mysql_tmp.changementEnseigneEtablissement = sirets.changementEnseigneEtablissement;
							to_mysql_tmp.denominationUsuelleEtablissement = sirets.denominationUsuelleEtablissement;
							to_mysql_tmp.changementDenominationUsuelleEtablissement = sirets.changementDenominationUsuelleEtablissement;
							to_mysql_tmp.activitePrincipaleEtablissement = sirets.activitePrincipaleEtablissement;
							to_mysql_tmp.nomenclatureActivitePrincipaleEtablissement = sirets.nomenclatureActivitePrincipaleEtablissement;
							to_mysql_tmp.changementActivitePrincipaleEtablissement = sirets.changementActivitePrincipaleEtablissement;
							to_mysql_tmp.caractereEmployeurEtablissement = String
									.valueOf(sirets.caractereEmployeurEtablissement);
							to_mysql_tmp.changementCaractereEmployeurEtablissement = sirets.changementCaractereEmployeurEtablissement;
							to_mysql = to_mysql_tmp;

// # Output table : 'to_postgres'
							to_postgres_tmp.ID = clients_siret_siren.ID;
							to_postgres_tmp.Metier = clients_siret_siren.Metier;
							to_postgres_tmp.Code_COMPTA = clients_siret_siren.Code_COMPTA;
							to_postgres_tmp.NOMS_CLIENTS = clients_siret_siren.NOMS_CLIENTS;
							to_postgres_tmp.SIREN_SIRET = clients_siret_siren.SIREN_SIRET;
							to_postgres_tmp.CODE_FACTU = clients_siret_siren.CODE_FACTU;
							to_postgres_tmp.ADRESSE_FACTU = clients_siret_siren.ADRESSE_FACTU;
							to_postgres_tmp.CP = clients_siret_siren.CP;
							to_postgres_tmp.VILLE = clients_siret_siren.VILLE;
							to_postgres_tmp.PAYS = clients_siret_siren.PAYS;
							to_postgres_tmp.CONTACT_GENRE = clients_siret_siren.CONTACT_GENRE;
							to_postgres_tmp.CONTACT_NOM = clients_siret_siren.CONTACT_NOM;
							to_postgres_tmp.CONTACT_PRENOM = clients_siret_siren.CONTACT_PRENOM;
							to_postgres_tmp.CONTACT1_MAIL = clients_siret_siren.CONTACT1_MAIL;
							to_postgres_tmp.CONTACT1_TEL_FIXE = clients_siret_siren.CONTACT1_TEL_FIXE;
							to_postgres_tmp.siren = (sirets.siren + "").equals("") ? null
									: Long.parseLong(sirets.siren + "");
							to_postgres_tmp.nic = sirets.nic;
							to_postgres_tmp.siret = sirets.siret;
							to_postgres_tmp.statutDiffusionEtablissement = String
									.valueOf(sirets.statutDiffusionEtablissement);
							to_postgres_tmp.dateCreationEtablissement = sirets.dateCreationEtablissement;
							to_postgres_tmp.trancheEffectifsEtablissement = sirets.trancheEffectifsEtablissement;
							to_postgres_tmp.anneeEffectifsEtablissement = sirets.anneeEffectifsEtablissement;
							to_postgres_tmp.activitePrincipaleRegistreMetiersEtablissement = sirets.activitePrincipaleRegistreMetiersEtablissement;
							to_postgres_tmp.dateDernierTraitementEtablissement = sirets.dateDernierTraitementEtablissement;
							to_postgres_tmp.etablissementSiege = sirets.etablissementSiege;
							to_postgres_tmp.nombrePeriodesEtablissement = (sirets.nombrePeriodesEtablissement + "")
									.equals("") ? null : Long.parseLong(sirets.nombrePeriodesEtablissement + "");
							to_postgres_tmp.etatAdministratifUniteLegale = String
									.valueOf(sirets.etatAdministratifUniteLegale);
							to_postgres_tmp.statutDiffusionUniteLegale = String
									.valueOf(sirets.statutDiffusionUniteLegale);
							to_postgres_tmp.dateCreationUniteLegale = sirets.dateCreationUniteLegale;
							to_postgres_tmp.categorieJuridiqueUniteLegale = (sirets.categorieJuridiqueUniteLegale)
									.equals("") ? null : Long.parseLong(sirets.categorieJuridiqueUniteLegale + "");
							to_postgres_tmp.denominationUniteLegale = sirets.denominationUniteLegale;
							to_postgres_tmp.sigleUniteLegale = sirets.sigleUniteLegale;
							to_postgres_tmp.denominationUsuelle1UniteLegale = sirets.denominationUsuelle1UniteLegale;
							to_postgres_tmp.denominationUsuelle2UniteLegale = sirets.denominationUsuelle2UniteLegale;
							to_postgres_tmp.denominationUsuelle3UniteLegale = sirets.denominationUsuelle3UniteLegale;
							to_postgres_tmp.sexeUniteLegale = sirets.sexeUniteLegale;
							to_postgres_tmp.nomUniteLegale = sirets.nomUniteLegale;
							to_postgres_tmp.nomUsageUniteLegale = sirets.nomUsageUniteLegale;
							to_postgres_tmp.prenom1UniteLegale = sirets.prenom1UniteLegale;
							to_postgres_tmp.prenom2UniteLegale = sirets.prenom2UniteLegale;
							to_postgres_tmp.prenom3UniteLegale = sirets.prenom3UniteLegale;
							to_postgres_tmp.prenom4UniteLegale = sirets.prenom4UniteLegale;
							to_postgres_tmp.prenomUsuelUniteLegale = sirets.prenomUsuelUniteLegale;
							to_postgres_tmp.pseudonymeUniteLegale = sirets.pseudonymeUniteLegale;
							to_postgres_tmp.activitePrincipaleUniteLegale = sirets.activitePrincipaleUniteLegale;
							to_postgres_tmp.nomenclatureActivitePrincipaleUniteLegale = sirets.nomenclatureActivitePrincipaleUniteLegale;
							to_postgres_tmp.identifiantAssociationUniteLegale = sirets.identifiantAssociationUniteLegale;
							to_postgres_tmp.economieSocialeSolidaireUniteLegale = sirets.economieSocialeSolidaireUniteLegale;
							to_postgres_tmp.caractereEmployeurUniteLegale = String
									.valueOf(sirets.caractereEmployeurUniteLegale);
							to_postgres_tmp.trancheEffectifsUniteLegale = sirets.trancheEffectifsUniteLegale;
							to_postgres_tmp.anneeEffectifsUniteLegale = sirets.anneeEffectifsUniteLegale;
							to_postgres_tmp.nicSiegeUniteLegale = (sirets.nicSiegeUniteLegale).equals("") ? null
									: Long.parseLong(sirets.nicSiegeUniteLegale + "");
							to_postgres_tmp.dateDernierTraitementUniteLegale = sirets.dateDernierTraitementUniteLegale;
							to_postgres_tmp.categorieEntreprise = sirets.categorieEntreprise;
							to_postgres_tmp.anneeCategorieEntreprise = (sirets.anneeCategorieEntreprise).equals("")
									? null
									: Long.parseLong(sirets.anneeCategorieEntreprise + "");
							to_postgres_tmp.complementAdresseEtablissement = sirets.complementAdresseEtablissement;
							to_postgres_tmp.numeroVoieEtablissement = sirets.numeroVoieEtablissement;
							to_postgres_tmp.indiceRepetitionEtablissement = sirets.indiceRepetitionEtablissement;
							to_postgres_tmp.typeVoieEtablissement = sirets.typeVoieEtablissement;
							to_postgres_tmp.libelleVoieEtablissement = sirets.libelleVoieEtablissement;
							to_postgres_tmp.codePostalEtablissement = sirets.codePostalEtablissement;
							to_postgres_tmp.libelleCommuneEtablissement = sirets.libelleCommuneEtablissement;
							to_postgres_tmp.libelleCommuneEtrangerEtablissement = sirets.libelleCommuneEtrangerEtablissement;
							to_postgres_tmp.distributionSpecialeEtablissement = sirets.distributionSpecialeEtablissement;
							to_postgres_tmp.codeCommuneEtablissement = sirets.codeCommuneEtablissement;
							to_postgres_tmp.codeCedexEtablissement = sirets.codeCedexEtablissement;
							to_postgres_tmp.libelleCedexEtablissement = sirets.libelleCedexEtablissement;
							to_postgres_tmp.codePaysEtrangerEtablissement = sirets.codePaysEtrangerEtablissement;
							to_postgres_tmp.libellePaysEtrangerEtablissement = sirets.libellePaysEtrangerEtablissement;
							to_postgres_tmp.complementAdresse2Etablissement = sirets.complementAdresse2Etablissement;
							to_postgres_tmp.numeroVoie2Etablissement = sirets.numeroVoie2Etablissement;
							to_postgres_tmp.indiceRepetition2Etablissement = sirets.indiceRepetition2Etablissement;
							to_postgres_tmp.typeVoie2Etablissement = sirets.typeVoie2Etablissement;
							to_postgres_tmp.libelleVoie2Etablissement = sirets.libelleVoie2Etablissement;
							to_postgres_tmp.codePostal2Etablissement = sirets.codePostal2Etablissement;
							to_postgres_tmp.libelleCommune2Etablissement = sirets.libelleCommune2Etablissement;
							to_postgres_tmp.libelleCommuneEtranger2Etablissement = sirets.libelleCommuneEtranger2Etablissement;
							to_postgres_tmp.distributionSpeciale2Etablissement = sirets.distributionSpeciale2Etablissement;
							to_postgres_tmp.codeCommune2Etablissement = sirets.codeCommune2Etablissement;
							to_postgres_tmp.codeCedex2Etablissement = sirets.codeCedex2Etablissement;
							to_postgres_tmp.libelleCedex2Etablissement = sirets.libelleCedex2Etablissement;
							to_postgres_tmp.codePaysEtranger2Etablissement = sirets.codePaysEtranger2Etablissement;
							to_postgres_tmp.libellePaysEtranger2Etablissement = sirets.libellePaysEtranger2Etablissement;
							to_postgres_tmp.dateFin = sirets.dateFin;
							to_postgres_tmp.dateDebut = sirets.dateDebut;
							to_postgres_tmp.etatAdministratifEtablissement = String
									.valueOf(sirets.etatAdministratifEtablissement);
							to_postgres_tmp.changementEtatAdministratifEtablissement = sirets.changementEtatAdministratifEtablissement;
							to_postgres_tmp.enseigne1Etablissement = sirets.enseigne1Etablissement;
							to_postgres_tmp.enseigne2Etablissement = sirets.enseigne2Etablissement;
							to_postgres_tmp.enseigne3Etablissement = sirets.enseigne3Etablissement;
							to_postgres_tmp.changementEnseigneEtablissement = sirets.changementEnseigneEtablissement;
							to_postgres_tmp.denominationUsuelleEtablissement = sirets.denominationUsuelleEtablissement;
							to_postgres_tmp.changementDenominationUsuelleEtablissement = sirets.changementDenominationUsuelleEtablissement;
							to_postgres_tmp.activitePrincipaleEtablissement = sirets.activitePrincipaleEtablissement;
							to_postgres_tmp.nomenclatureActivitePrincipaleEtablissement = sirets.nomenclatureActivitePrincipaleEtablissement;
							to_postgres_tmp.changementActivitePrincipaleEtablissement = sirets.changementActivitePrincipaleEtablissement;
							to_postgres_tmp.caractereEmployeurEtablissement = String
									.valueOf(sirets.caractereEmployeurEtablissement);
							to_postgres_tmp.changementCaractereEmployeurEtablissement = sirets.changementCaractereEmployeurEtablissement;
							to_postgres = to_postgres_tmp;
						} // closing inner join bracket (2)
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */

					/**
					 * [tMap_4 process_data_begin ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_begin ] stop
					 */
// Start of branch "to_mysql"
					if (to_mysql != null) {

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "to_mysql"

							);
						}

						whetherReject_tDBOutput_1 = false;
						if (to_mysql.ID == null) {
							pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(1, to_mysql.ID);
						}

						if (to_mysql.Metier == null) {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2, to_mysql.Metier);
						}

						if (to_mysql.Code_COMPTA == null) {
							pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3, to_mysql.Code_COMPTA);
						}

						if (to_mysql.NOMS_CLIENTS == null) {
							pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, to_mysql.NOMS_CLIENTS);
						}

						if (to_mysql.SIREN_SIRET == null) {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, to_mysql.SIREN_SIRET);
						}

						if (to_mysql.CODE_FACTU == null) {
							pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6, to_mysql.CODE_FACTU);
						}

						if (to_mysql.ADRESSE_FACTU == null) {
							pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, to_mysql.ADRESSE_FACTU);
						}

						if (to_mysql.CP == null) {
							pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(8, to_mysql.CP);
						}

						if (to_mysql.VILLE == null) {
							pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, to_mysql.VILLE);
						}

						if (to_mysql.PAYS == null) {
							pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10, to_mysql.PAYS);
						}

						if (to_mysql.CONTACT_GENRE == null) {
							pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(11, to_mysql.CONTACT_GENRE);
						}

						if (to_mysql.CONTACT_NOM == null) {
							pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12, to_mysql.CONTACT_NOM);
						}

						if (to_mysql.CONTACT_PRENOM == null) {
							pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(13, to_mysql.CONTACT_PRENOM);
						}

						if (to_mysql.CONTACT1_MAIL == null) {
							pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14, to_mysql.CONTACT1_MAIL);
						}

						if (to_mysql.CONTACT1_TEL_FIXE == null) {
							pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(15, to_mysql.CONTACT1_TEL_FIXE);
						}

						if (to_mysql.siren == null) {
							pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(16, to_mysql.siren);
						}

						if (to_mysql.nic == null) {
							pstmt_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(17, to_mysql.nic);
						}

						if (to_mysql.siret == null) {
							pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(18, to_mysql.siret);
						}

						if (to_mysql.statutDiffusionEtablissement == null) {
							pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(19, to_mysql.statutDiffusionEtablissement);
						}

						if (to_mysql.dateCreationEtablissement != null) {
							date_tDBOutput_1 = to_mysql.dateCreationEtablissement.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(20, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(20, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(20, java.sql.Types.DATE);
						}

						if (to_mysql.trancheEffectifsEtablissement == null) {
							pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(21, to_mysql.trancheEffectifsEtablissement);
						}

						if (to_mysql.anneeEffectifsEtablissement == null) {
							pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(22, to_mysql.anneeEffectifsEtablissement);
						}

						if (to_mysql.activitePrincipaleRegistreMetiersEtablissement == null) {
							pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(23, to_mysql.activitePrincipaleRegistreMetiersEtablissement);
						}

						if (to_mysql.dateDernierTraitementEtablissement != null) {
							date_tDBOutput_1 = to_mysql.dateDernierTraitementEtablissement.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(24, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(24, java.sql.Types.DATE);
						}

						if (to_mysql.etablissementSiege == null) {
							pstmt_tDBOutput_1.setNull(25, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(25, to_mysql.etablissementSiege);
						}

						if (to_mysql.nombrePeriodesEtablissement == null) {
							pstmt_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(26, to_mysql.nombrePeriodesEtablissement);
						}

						if (to_mysql.etatAdministratifUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(27, to_mysql.etatAdministratifUniteLegale);
						}

						if (to_mysql.statutDiffusionUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(28, to_mysql.statutDiffusionUniteLegale);
						}

						if (to_mysql.dateCreationUniteLegale != null) {
							date_tDBOutput_1 = to_mysql.dateCreationUniteLegale.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(29, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(29, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(29, java.sql.Types.DATE);
						}

						if (to_mysql.categorieJuridiqueUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(30, to_mysql.categorieJuridiqueUniteLegale);
						}

						if (to_mysql.denominationUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(31, to_mysql.denominationUniteLegale);
						}

						if (to_mysql.sigleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(32, to_mysql.sigleUniteLegale);
						}

						if (to_mysql.denominationUsuelle1UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(33, to_mysql.denominationUsuelle1UniteLegale);
						}

						if (to_mysql.denominationUsuelle2UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(34, to_mysql.denominationUsuelle2UniteLegale);
						}

						if (to_mysql.denominationUsuelle3UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(35, to_mysql.denominationUsuelle3UniteLegale);
						}

						if (to_mysql.sexeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(36, to_mysql.sexeUniteLegale);
						}

						if (to_mysql.nomUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(37, to_mysql.nomUniteLegale);
						}

						if (to_mysql.nomUsageUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(38, to_mysql.nomUsageUniteLegale);
						}

						if (to_mysql.prenom1UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(39, to_mysql.prenom1UniteLegale);
						}

						if (to_mysql.prenom2UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40, to_mysql.prenom2UniteLegale);
						}

						if (to_mysql.prenom3UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(41, to_mysql.prenom3UniteLegale);
						}

						if (to_mysql.prenom4UniteLegale == null) {
							pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(42, to_mysql.prenom4UniteLegale);
						}

						if (to_mysql.prenomUsuelUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(43, to_mysql.prenomUsuelUniteLegale);
						}

						if (to_mysql.pseudonymeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(44, to_mysql.pseudonymeUniteLegale);
						}

						if (to_mysql.activitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(45, to_mysql.activitePrincipaleUniteLegale);
						}

						if (to_mysql.nomenclatureActivitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(46, to_mysql.nomenclatureActivitePrincipaleUniteLegale);
						}

						if (to_mysql.identifiantAssociationUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(47, to_mysql.identifiantAssociationUniteLegale);
						}

						if (to_mysql.economieSocialeSolidaireUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(48, to_mysql.economieSocialeSolidaireUniteLegale);
						}

						if (to_mysql.caractereEmployeurUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(49, to_mysql.caractereEmployeurUniteLegale);
						}

						if (to_mysql.trancheEffectifsUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(50, to_mysql.trancheEffectifsUniteLegale);
						}

						if (to_mysql.anneeEffectifsUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(51, to_mysql.anneeEffectifsUniteLegale);
						}

						if (to_mysql.nicSiegeUniteLegale == null) {
							pstmt_tDBOutput_1.setNull(52, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(52, to_mysql.nicSiegeUniteLegale);
						}

						if (to_mysql.dateDernierTraitementUniteLegale != null) {
							date_tDBOutput_1 = to_mysql.dateDernierTraitementUniteLegale.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(53, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(53, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(53, java.sql.Types.DATE);
						}

						if (to_mysql.categorieEntreprise == null) {
							pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(54, to_mysql.categorieEntreprise);
						}

						if (to_mysql.anneeCategorieEntreprise == null) {
							pstmt_tDBOutput_1.setNull(55, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(55, to_mysql.anneeCategorieEntreprise);
						}

						if (to_mysql.complementAdresseEtablissement == null) {
							pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(56, to_mysql.complementAdresseEtablissement);
						}

						if (to_mysql.numeroVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(57, to_mysql.numeroVoieEtablissement);
						}

						if (to_mysql.indiceRepetitionEtablissement == null) {
							pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(58, to_mysql.indiceRepetitionEtablissement);
						}

						if (to_mysql.typeVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(59, to_mysql.typeVoieEtablissement);
						}

						if (to_mysql.libelleVoieEtablissement == null) {
							pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(60, to_mysql.libelleVoieEtablissement);
						}

						if (to_mysql.codePostalEtablissement == null) {
							pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(61, to_mysql.codePostalEtablissement);
						}

						if (to_mysql.libelleCommuneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(62, to_mysql.libelleCommuneEtablissement);
						}

						if (to_mysql.libelleCommuneEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(63, to_mysql.libelleCommuneEtrangerEtablissement);
						}

						if (to_mysql.distributionSpecialeEtablissement == null) {
							pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(64, to_mysql.distributionSpecialeEtablissement);
						}

						if (to_mysql.codeCommuneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(65, to_mysql.codeCommuneEtablissement);
						}

						if (to_mysql.codeCedexEtablissement == null) {
							pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(66, to_mysql.codeCedexEtablissement);
						}

						if (to_mysql.libelleCedexEtablissement == null) {
							pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(67, to_mysql.libelleCedexEtablissement);
						}

						if (to_mysql.codePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(68, to_mysql.codePaysEtrangerEtablissement);
						}

						if (to_mysql.libellePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(69, to_mysql.libellePaysEtrangerEtablissement);
						}

						if (to_mysql.complementAdresse2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(70, to_mysql.complementAdresse2Etablissement);
						}

						if (to_mysql.numeroVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(71, to_mysql.numeroVoie2Etablissement);
						}

						if (to_mysql.indiceRepetition2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(72, to_mysql.indiceRepetition2Etablissement);
						}

						if (to_mysql.typeVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(73, to_mysql.typeVoie2Etablissement);
						}

						if (to_mysql.libelleVoie2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(74, to_mysql.libelleVoie2Etablissement);
						}

						if (to_mysql.codePostal2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(75, to_mysql.codePostal2Etablissement);
						}

						if (to_mysql.libelleCommune2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(76, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(76, to_mysql.libelleCommune2Etablissement);
						}

						if (to_mysql.libelleCommuneEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(77, to_mysql.libelleCommuneEtranger2Etablissement);
						}

						if (to_mysql.distributionSpeciale2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(78, to_mysql.distributionSpeciale2Etablissement);
						}

						if (to_mysql.codeCommune2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(79, to_mysql.codeCommune2Etablissement);
						}

						if (to_mysql.codeCedex2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(80, to_mysql.codeCedex2Etablissement);
						}

						if (to_mysql.libelleCedex2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(81, to_mysql.libelleCedex2Etablissement);
						}

						if (to_mysql.codePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(82, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(82, to_mysql.codePaysEtranger2Etablissement);
						}

						if (to_mysql.libellePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(83, to_mysql.libellePaysEtranger2Etablissement);
						}

						if (to_mysql.dateFin == null) {
							pstmt_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(84, to_mysql.dateFin);
						}

						if (to_mysql.dateDebut != null) {
							date_tDBOutput_1 = to_mysql.dateDebut.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(85, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(85, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(85, java.sql.Types.DATE);
						}

						if (to_mysql.etatAdministratifEtablissement == null) {
							pstmt_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(86, to_mysql.etatAdministratifEtablissement);
						}

						if (to_mysql.changementEtatAdministratifEtablissement == null) {
							pstmt_tDBOutput_1.setNull(87, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(87, to_mysql.changementEtatAdministratifEtablissement);
						}

						if (to_mysql.enseigne1Etablissement == null) {
							pstmt_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(88, to_mysql.enseigne1Etablissement);
						}

						if (to_mysql.enseigne2Etablissement == null) {
							pstmt_tDBOutput_1.setNull(89, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(89, to_mysql.enseigne2Etablissement);
						}

						if (to_mysql.enseigne3Etablissement == null) {
							pstmt_tDBOutput_1.setNull(90, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(90, to_mysql.enseigne3Etablissement);
						}

						if (to_mysql.changementEnseigneEtablissement == null) {
							pstmt_tDBOutput_1.setNull(91, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(91, to_mysql.changementEnseigneEtablissement);
						}

						if (to_mysql.denominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(92, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(92, to_mysql.denominationUsuelleEtablissement);
						}

						if (to_mysql.changementDenominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(93, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(93, to_mysql.changementDenominationUsuelleEtablissement);
						}

						if (to_mysql.activitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(94, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(94, to_mysql.activitePrincipaleEtablissement);
						}

						if (to_mysql.nomenclatureActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(95, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(95, to_mysql.nomenclatureActivitePrincipaleEtablissement);
						}

						if (to_mysql.changementActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_1.setNull(96, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(96, to_mysql.changementActivitePrincipaleEtablissement);
						}

						if (to_mysql.caractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_1.setNull(97, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(97, to_mysql.caractereEmployeurEtablissement);
						}

						if (to_mysql.changementCaractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_1.setNull(98, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(98, to_mysql.changementCaractereEmployeurEtablissement);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;
						if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
							try {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_1 = 0;
						}
						commitCounter_tDBOutput_1++;

						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

							try {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								System.err.println(e.getMessage());

							}
							if (rowsToCommitCount_tDBOutput_1 != 0) {
							}
							conn_tDBOutput_1.commit();
							if (rowsToCommitCount_tDBOutput_1 != 0) {
								rowsToCommitCount_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1 = 0;

						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

					} // End of branch "to_mysql"

// Start of branch "to_postgres"
					if (to_postgres != null) {

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "to_postgres"

							);
						}

						whetherReject_tDBOutput_2 = false;
						if (to_postgres.ID == null) {
							pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(1, to_postgres.ID);
						}

						if (to_postgres.Metier == null) {
							pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(2, to_postgres.Metier);
						}

						if (to_postgres.Code_COMPTA == null) {
							pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(3, to_postgres.Code_COMPTA);
						}

						if (to_postgres.NOMS_CLIENTS == null) {
							pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(4, to_postgres.NOMS_CLIENTS);
						}

						if (to_postgres.SIREN_SIRET == null) {
							pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(5, to_postgres.SIREN_SIRET);
						}

						if (to_postgres.CODE_FACTU == null) {
							pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(6, to_postgres.CODE_FACTU);
						}

						if (to_postgres.ADRESSE_FACTU == null) {
							pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(7, to_postgres.ADRESSE_FACTU);
						}

						if (to_postgres.CP == null) {
							pstmt_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(8, to_postgres.CP);
						}

						if (to_postgres.VILLE == null) {
							pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(9, to_postgres.VILLE);
						}

						if (to_postgres.PAYS == null) {
							pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(10, to_postgres.PAYS);
						}

						if (to_postgres.CONTACT_GENRE == null) {
							pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(11, to_postgres.CONTACT_GENRE);
						}

						if (to_postgres.CONTACT_NOM == null) {
							pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12, to_postgres.CONTACT_NOM);
						}

						if (to_postgres.CONTACT_PRENOM == null) {
							pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(13, to_postgres.CONTACT_PRENOM);
						}

						if (to_postgres.CONTACT1_MAIL == null) {
							pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(14, to_postgres.CONTACT1_MAIL);
						}

						if (to_postgres.CONTACT1_TEL_FIXE == null) {
							pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(15, to_postgres.CONTACT1_TEL_FIXE);
						}

						if (to_postgres.siren == null) {
							pstmt_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(16, to_postgres.siren);
						}

						if (to_postgres.nic == null) {
							pstmt_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(17, to_postgres.nic);
						}

						if (to_postgres.siret == null) {
							pstmt_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(18, to_postgres.siret);
						}

						if (to_postgres.statutDiffusionEtablissement == null) {
							pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(19, to_postgres.statutDiffusionEtablissement);
						}

						if (to_postgres.dateCreationEtablissement != null) {
							pstmt_tDBOutput_2.setTimestamp(20,
									new java.sql.Timestamp(to_postgres.dateCreationEtablissement.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(20, java.sql.Types.TIMESTAMP);
						}

						if (to_postgres.trancheEffectifsEtablissement == null) {
							pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(21, to_postgres.trancheEffectifsEtablissement);
						}

						if (to_postgres.anneeEffectifsEtablissement == null) {
							pstmt_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(22, to_postgres.anneeEffectifsEtablissement);
						}

						if (to_postgres.activitePrincipaleRegistreMetiersEtablissement == null) {
							pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(23, to_postgres.activitePrincipaleRegistreMetiersEtablissement);
						}

						if (to_postgres.dateDernierTraitementEtablissement != null) {
							pstmt_tDBOutput_2.setTimestamp(24,
									new java.sql.Timestamp(to_postgres.dateDernierTraitementEtablissement.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(24, java.sql.Types.TIMESTAMP);
						}

						if (to_postgres.etablissementSiege == null) {
							pstmt_tDBOutput_2.setNull(25, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(25, to_postgres.etablissementSiege);
						}

						if (to_postgres.nombrePeriodesEtablissement == null) {
							pstmt_tDBOutput_2.setNull(26, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(26, to_postgres.nombrePeriodesEtablissement);
						}

						if (to_postgres.etatAdministratifUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(27, to_postgres.etatAdministratifUniteLegale);
						}

						if (to_postgres.statutDiffusionUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(28, to_postgres.statutDiffusionUniteLegale);
						}

						if (to_postgres.dateCreationUniteLegale != null) {
							pstmt_tDBOutput_2.setTimestamp(29,
									new java.sql.Timestamp(to_postgres.dateCreationUniteLegale.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(29, java.sql.Types.TIMESTAMP);
						}

						if (to_postgres.categorieJuridiqueUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(30, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(30, to_postgres.categorieJuridiqueUniteLegale);
						}

						if (to_postgres.denominationUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(31, to_postgres.denominationUniteLegale);
						}

						if (to_postgres.sigleUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(32, to_postgres.sigleUniteLegale);
						}

						if (to_postgres.denominationUsuelle1UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(33, to_postgres.denominationUsuelle1UniteLegale);
						}

						if (to_postgres.denominationUsuelle2UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(34, to_postgres.denominationUsuelle2UniteLegale);
						}

						if (to_postgres.denominationUsuelle3UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(35, to_postgres.denominationUsuelle3UniteLegale);
						}

						if (to_postgres.sexeUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(36, to_postgres.sexeUniteLegale);
						}

						if (to_postgres.nomUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(37, to_postgres.nomUniteLegale);
						}

						if (to_postgres.nomUsageUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(38, to_postgres.nomUsageUniteLegale);
						}

						if (to_postgres.prenom1UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(39, to_postgres.prenom1UniteLegale);
						}

						if (to_postgres.prenom2UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(40, to_postgres.prenom2UniteLegale);
						}

						if (to_postgres.prenom3UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(41, to_postgres.prenom3UniteLegale);
						}

						if (to_postgres.prenom4UniteLegale == null) {
							pstmt_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(42, to_postgres.prenom4UniteLegale);
						}

						if (to_postgres.prenomUsuelUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(43, to_postgres.prenomUsuelUniteLegale);
						}

						if (to_postgres.pseudonymeUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(44, to_postgres.pseudonymeUniteLegale);
						}

						if (to_postgres.activitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(45, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(45, to_postgres.activitePrincipaleUniteLegale);
						}

						if (to_postgres.nomenclatureActivitePrincipaleUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(46, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(46, to_postgres.nomenclatureActivitePrincipaleUniteLegale);
						}

						if (to_postgres.identifiantAssociationUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(47, to_postgres.identifiantAssociationUniteLegale);
						}

						if (to_postgres.economieSocialeSolidaireUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(48, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(48, to_postgres.economieSocialeSolidaireUniteLegale);
						}

						if (to_postgres.caractereEmployeurUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(49, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(49, to_postgres.caractereEmployeurUniteLegale);
						}

						if (to_postgres.trancheEffectifsUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(50, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(50, to_postgres.trancheEffectifsUniteLegale);
						}

						if (to_postgres.anneeEffectifsUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(51, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(51, to_postgres.anneeEffectifsUniteLegale);
						}

						if (to_postgres.nicSiegeUniteLegale == null) {
							pstmt_tDBOutput_2.setNull(52, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(52, to_postgres.nicSiegeUniteLegale);
						}

						if (to_postgres.dateDernierTraitementUniteLegale != null) {
							pstmt_tDBOutput_2.setTimestamp(53,
									new java.sql.Timestamp(to_postgres.dateDernierTraitementUniteLegale.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(53, java.sql.Types.TIMESTAMP);
						}

						if (to_postgres.categorieEntreprise == null) {
							pstmt_tDBOutput_2.setNull(54, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(54, to_postgres.categorieEntreprise);
						}

						if (to_postgres.anneeCategorieEntreprise == null) {
							pstmt_tDBOutput_2.setNull(55, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(55, to_postgres.anneeCategorieEntreprise);
						}

						if (to_postgres.complementAdresseEtablissement == null) {
							pstmt_tDBOutput_2.setNull(56, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(56, to_postgres.complementAdresseEtablissement);
						}

						if (to_postgres.numeroVoieEtablissement == null) {
							pstmt_tDBOutput_2.setNull(57, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(57, to_postgres.numeroVoieEtablissement);
						}

						if (to_postgres.indiceRepetitionEtablissement == null) {
							pstmt_tDBOutput_2.setNull(58, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(58, to_postgres.indiceRepetitionEtablissement);
						}

						if (to_postgres.typeVoieEtablissement == null) {
							pstmt_tDBOutput_2.setNull(59, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(59, to_postgres.typeVoieEtablissement);
						}

						if (to_postgres.libelleVoieEtablissement == null) {
							pstmt_tDBOutput_2.setNull(60, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(60, to_postgres.libelleVoieEtablissement);
						}

						if (to_postgres.codePostalEtablissement == null) {
							pstmt_tDBOutput_2.setNull(61, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(61, to_postgres.codePostalEtablissement);
						}

						if (to_postgres.libelleCommuneEtablissement == null) {
							pstmt_tDBOutput_2.setNull(62, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(62, to_postgres.libelleCommuneEtablissement);
						}

						if (to_postgres.libelleCommuneEtrangerEtablissement == null) {
							pstmt_tDBOutput_2.setNull(63, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(63, to_postgres.libelleCommuneEtrangerEtablissement);
						}

						if (to_postgres.distributionSpecialeEtablissement == null) {
							pstmt_tDBOutput_2.setNull(64, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(64, to_postgres.distributionSpecialeEtablissement);
						}

						if (to_postgres.codeCommuneEtablissement == null) {
							pstmt_tDBOutput_2.setNull(65, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(65, to_postgres.codeCommuneEtablissement);
						}

						if (to_postgres.codeCedexEtablissement == null) {
							pstmt_tDBOutput_2.setNull(66, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(66, to_postgres.codeCedexEtablissement);
						}

						if (to_postgres.libelleCedexEtablissement == null) {
							pstmt_tDBOutput_2.setNull(67, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(67, to_postgres.libelleCedexEtablissement);
						}

						if (to_postgres.codePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_2.setNull(68, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(68, to_postgres.codePaysEtrangerEtablissement);
						}

						if (to_postgres.libellePaysEtrangerEtablissement == null) {
							pstmt_tDBOutput_2.setNull(69, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(69, to_postgres.libellePaysEtrangerEtablissement);
						}

						if (to_postgres.complementAdresse2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(70, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(70, to_postgres.complementAdresse2Etablissement);
						}

						if (to_postgres.numeroVoie2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(71, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(71, to_postgres.numeroVoie2Etablissement);
						}

						if (to_postgres.indiceRepetition2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(72, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(72, to_postgres.indiceRepetition2Etablissement);
						}

						if (to_postgres.typeVoie2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(73, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(73, to_postgres.typeVoie2Etablissement);
						}

						if (to_postgres.libelleVoie2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(74, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(74, to_postgres.libelleVoie2Etablissement);
						}

						if (to_postgres.codePostal2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(75, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(75, to_postgres.codePostal2Etablissement);
						}

						if (to_postgres.libelleCommune2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(76, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(76, to_postgres.libelleCommune2Etablissement);
						}

						if (to_postgres.libelleCommuneEtranger2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(77, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(77, to_postgres.libelleCommuneEtranger2Etablissement);
						}

						if (to_postgres.distributionSpeciale2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(78, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(78, to_postgres.distributionSpeciale2Etablissement);
						}

						if (to_postgres.codeCommune2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(79, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(79, to_postgres.codeCommune2Etablissement);
						}

						if (to_postgres.codeCedex2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(80, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(80, to_postgres.codeCedex2Etablissement);
						}

						if (to_postgres.libelleCedex2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(81, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(81, to_postgres.libelleCedex2Etablissement);
						}

						if (to_postgres.codePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(82, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(82, to_postgres.codePaysEtranger2Etablissement);
						}

						if (to_postgres.libellePaysEtranger2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(83, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(83, to_postgres.libellePaysEtranger2Etablissement);
						}

						if (to_postgres.dateFin == null) {
							pstmt_tDBOutput_2.setNull(84, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(84, to_postgres.dateFin);
						}

						if (to_postgres.dateDebut != null) {
							pstmt_tDBOutput_2.setTimestamp(85, new java.sql.Timestamp(to_postgres.dateDebut.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(85, java.sql.Types.TIMESTAMP);
						}

						if (to_postgres.etatAdministratifEtablissement == null) {
							pstmt_tDBOutput_2.setNull(86, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(86, to_postgres.etatAdministratifEtablissement);
						}

						if (to_postgres.changementEtatAdministratifEtablissement == null) {
							pstmt_tDBOutput_2.setNull(87, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(87, to_postgres.changementEtatAdministratifEtablissement);
						}

						if (to_postgres.enseigne1Etablissement == null) {
							pstmt_tDBOutput_2.setNull(88, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(88, to_postgres.enseigne1Etablissement);
						}

						if (to_postgres.enseigne2Etablissement == null) {
							pstmt_tDBOutput_2.setNull(89, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(89, to_postgres.enseigne2Etablissement);
						}

						if (to_postgres.enseigne3Etablissement == null) {
							pstmt_tDBOutput_2.setNull(90, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(90, to_postgres.enseigne3Etablissement);
						}

						if (to_postgres.changementEnseigneEtablissement == null) {
							pstmt_tDBOutput_2.setNull(91, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(91, to_postgres.changementEnseigneEtablissement);
						}

						if (to_postgres.denominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_2.setNull(92, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(92, to_postgres.denominationUsuelleEtablissement);
						}

						if (to_postgres.changementDenominationUsuelleEtablissement == null) {
							pstmt_tDBOutput_2.setNull(93, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(93, to_postgres.changementDenominationUsuelleEtablissement);
						}

						if (to_postgres.activitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_2.setNull(94, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(94, to_postgres.activitePrincipaleEtablissement);
						}

						if (to_postgres.nomenclatureActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_2.setNull(95, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(95, to_postgres.nomenclatureActivitePrincipaleEtablissement);
						}

						if (to_postgres.changementActivitePrincipaleEtablissement == null) {
							pstmt_tDBOutput_2.setNull(96, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(96, to_postgres.changementActivitePrincipaleEtablissement);
						}

						if (to_postgres.caractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_2.setNull(97, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(97, to_postgres.caractereEmployeurEtablissement);
						}

						if (to_postgres.changementCaractereEmployeurEtablissement == null) {
							pstmt_tDBOutput_2.setNull(98, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(98, to_postgres.changementCaractereEmployeurEtablissement);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
										sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
											ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
									rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
									rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err.println(errormessage_tDBOutput_2);

								}
							}
							if (rowsToCommitCount_tDBOutput_2 != 0) {

							}
							conn_tDBOutput_2.commit();
							if (rowsToCommitCount_tDBOutput_2 != 0) {

								rowsToCommitCount_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

					} // End of branch "to_postgres"

					/**
					 * [tMap_4 process_data_end ] start
					 */

					currentComponent = "tMap_4";

					/**
					 * [tMap_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 process_data_end ] start
					 */

					currentComponent = "tHashInput_4";

					/**
					 * [tHashInput_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_4 end ] start
					 */

					currentComponent = "tHashInput_4";

					nb_line_tHashInput_4++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_GET_DATAS_" + pid + "_tHashOutput_1");

				globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);

				ok_Hash.put("tHashInput_4", true);
				end_Hash.put("tHashInput_4", System.currentTimeMillis());

				/**
				 * [tHashInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_sirets != null) {
					tHash_Lookup_sirets.endGet();
				}
				globalMap.remove("tHash_Lookup_sirets");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "clients_siret_siren");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "to_mysql");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "to_postgres");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_sirets");

			try {

				/**
				 * [tHashInput_4 finally ] start
				 */

				currentComponent = "tHashInput_4";

				/**
				 * [tHashInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}

	public static class siretsStruct implements routines.system.IPersistableComparableLookupRow<siretsStruct> {
		final static byte[] commonByteArrayLock_IIIDATA_GET_DATAS = new byte[0];
		static byte[] commonByteArray_IIIDATA_GET_DATAS = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer siren;

		public Integer getSiren() {
			return this.siren;
		}

		public Integer nic;

		public Integer getNic() {
			return this.nic;
		}

		public Long siret;

		public Long getSiret() {
			return this.siret;
		}

		public Character statutDiffusionEtablissement;

		public Character getStatutDiffusionEtablissement() {
			return this.statutDiffusionEtablissement;
		}

		public java.util.Date dateCreationEtablissement;

		public java.util.Date getDateCreationEtablissement() {
			return this.dateCreationEtablissement;
		}

		public String trancheEffectifsEtablissement;

		public String getTrancheEffectifsEtablissement() {
			return this.trancheEffectifsEtablissement;
		}

		public String anneeEffectifsEtablissement;

		public String getAnneeEffectifsEtablissement() {
			return this.anneeEffectifsEtablissement;
		}

		public String activitePrincipaleRegistreMetiersEtablissement;

		public String getActivitePrincipaleRegistreMetiersEtablissement() {
			return this.activitePrincipaleRegistreMetiersEtablissement;
		}

		public java.util.Date dateDernierTraitementEtablissement;

		public java.util.Date getDateDernierTraitementEtablissement() {
			return this.dateDernierTraitementEtablissement;
		}

		public Boolean etablissementSiege;

		public Boolean getEtablissementSiege() {
			return this.etablissementSiege;
		}

		public Integer nombrePeriodesEtablissement;

		public Integer getNombrePeriodesEtablissement() {
			return this.nombrePeriodesEtablissement;
		}

		public Character etatAdministratifUniteLegale;

		public Character getEtatAdministratifUniteLegale() {
			return this.etatAdministratifUniteLegale;
		}

		public Character statutDiffusionUniteLegale;

		public Character getStatutDiffusionUniteLegale() {
			return this.statutDiffusionUniteLegale;
		}

		public java.util.Date dateCreationUniteLegale;

		public java.util.Date getDateCreationUniteLegale() {
			return this.dateCreationUniteLegale;
		}

		public Integer categorieJuridiqueUniteLegale;

		public Integer getCategorieJuridiqueUniteLegale() {
			return this.categorieJuridiqueUniteLegale;
		}

		public String denominationUniteLegale;

		public String getDenominationUniteLegale() {
			return this.denominationUniteLegale;
		}

		public String sigleUniteLegale;

		public String getSigleUniteLegale() {
			return this.sigleUniteLegale;
		}

		public String denominationUsuelle1UniteLegale;

		public String getDenominationUsuelle1UniteLegale() {
			return this.denominationUsuelle1UniteLegale;
		}

		public String denominationUsuelle2UniteLegale;

		public String getDenominationUsuelle2UniteLegale() {
			return this.denominationUsuelle2UniteLegale;
		}

		public String denominationUsuelle3UniteLegale;

		public String getDenominationUsuelle3UniteLegale() {
			return this.denominationUsuelle3UniteLegale;
		}

		public String sexeUniteLegale;

		public String getSexeUniteLegale() {
			return this.sexeUniteLegale;
		}

		public String nomUniteLegale;

		public String getNomUniteLegale() {
			return this.nomUniteLegale;
		}

		public String nomUsageUniteLegale;

		public String getNomUsageUniteLegale() {
			return this.nomUsageUniteLegale;
		}

		public String prenom1UniteLegale;

		public String getPrenom1UniteLegale() {
			return this.prenom1UniteLegale;
		}

		public String prenom2UniteLegale;

		public String getPrenom2UniteLegale() {
			return this.prenom2UniteLegale;
		}

		public String prenom3UniteLegale;

		public String getPrenom3UniteLegale() {
			return this.prenom3UniteLegale;
		}

		public String prenom4UniteLegale;

		public String getPrenom4UniteLegale() {
			return this.prenom4UniteLegale;
		}

		public String prenomUsuelUniteLegale;

		public String getPrenomUsuelUniteLegale() {
			return this.prenomUsuelUniteLegale;
		}

		public String pseudonymeUniteLegale;

		public String getPseudonymeUniteLegale() {
			return this.pseudonymeUniteLegale;
		}

		public String activitePrincipaleUniteLegale;

		public String getActivitePrincipaleUniteLegale() {
			return this.activitePrincipaleUniteLegale;
		}

		public String nomenclatureActivitePrincipaleUniteLegale;

		public String getNomenclatureActivitePrincipaleUniteLegale() {
			return this.nomenclatureActivitePrincipaleUniteLegale;
		}

		public String identifiantAssociationUniteLegale;

		public String getIdentifiantAssociationUniteLegale() {
			return this.identifiantAssociationUniteLegale;
		}

		public String economieSocialeSolidaireUniteLegale;

		public String getEconomieSocialeSolidaireUniteLegale() {
			return this.economieSocialeSolidaireUniteLegale;
		}

		public Character caractereEmployeurUniteLegale;

		public Character getCaractereEmployeurUniteLegale() {
			return this.caractereEmployeurUniteLegale;
		}

		public String trancheEffectifsUniteLegale;

		public String getTrancheEffectifsUniteLegale() {
			return this.trancheEffectifsUniteLegale;
		}

		public String anneeEffectifsUniteLegale;

		public String getAnneeEffectifsUniteLegale() {
			return this.anneeEffectifsUniteLegale;
		}

		public Integer nicSiegeUniteLegale;

		public Integer getNicSiegeUniteLegale() {
			return this.nicSiegeUniteLegale;
		}

		public java.util.Date dateDernierTraitementUniteLegale;

		public java.util.Date getDateDernierTraitementUniteLegale() {
			return this.dateDernierTraitementUniteLegale;
		}

		public String categorieEntreprise;

		public String getCategorieEntreprise() {
			return this.categorieEntreprise;
		}

		public String anneeCategorieEntreprise;

		public String getAnneeCategorieEntreprise() {
			return this.anneeCategorieEntreprise;
		}

		public String complementAdresseEtablissement;

		public String getComplementAdresseEtablissement() {
			return this.complementAdresseEtablissement;
		}

		public String numeroVoieEtablissement;

		public String getNumeroVoieEtablissement() {
			return this.numeroVoieEtablissement;
		}

		public String indiceRepetitionEtablissement;

		public String getIndiceRepetitionEtablissement() {
			return this.indiceRepetitionEtablissement;
		}

		public String typeVoieEtablissement;

		public String getTypeVoieEtablissement() {
			return this.typeVoieEtablissement;
		}

		public String libelleVoieEtablissement;

		public String getLibelleVoieEtablissement() {
			return this.libelleVoieEtablissement;
		}

		public String codePostalEtablissement;

		public String getCodePostalEtablissement() {
			return this.codePostalEtablissement;
		}

		public String libelleCommuneEtablissement;

		public String getLibelleCommuneEtablissement() {
			return this.libelleCommuneEtablissement;
		}

		public String libelleCommuneEtrangerEtablissement;

		public String getLibelleCommuneEtrangerEtablissement() {
			return this.libelleCommuneEtrangerEtablissement;
		}

		public String distributionSpecialeEtablissement;

		public String getDistributionSpecialeEtablissement() {
			return this.distributionSpecialeEtablissement;
		}

		public String codeCommuneEtablissement;

		public String getCodeCommuneEtablissement() {
			return this.codeCommuneEtablissement;
		}

		public String codeCedexEtablissement;

		public String getCodeCedexEtablissement() {
			return this.codeCedexEtablissement;
		}

		public String libelleCedexEtablissement;

		public String getLibelleCedexEtablissement() {
			return this.libelleCedexEtablissement;
		}

		public String codePaysEtrangerEtablissement;

		public String getCodePaysEtrangerEtablissement() {
			return this.codePaysEtrangerEtablissement;
		}

		public String libellePaysEtrangerEtablissement;

		public String getLibellePaysEtrangerEtablissement() {
			return this.libellePaysEtrangerEtablissement;
		}

		public String complementAdresse2Etablissement;

		public String getComplementAdresse2Etablissement() {
			return this.complementAdresse2Etablissement;
		}

		public String numeroVoie2Etablissement;

		public String getNumeroVoie2Etablissement() {
			return this.numeroVoie2Etablissement;
		}

		public String indiceRepetition2Etablissement;

		public String getIndiceRepetition2Etablissement() {
			return this.indiceRepetition2Etablissement;
		}

		public String typeVoie2Etablissement;

		public String getTypeVoie2Etablissement() {
			return this.typeVoie2Etablissement;
		}

		public String libelleVoie2Etablissement;

		public String getLibelleVoie2Etablissement() {
			return this.libelleVoie2Etablissement;
		}

		public String codePostal2Etablissement;

		public String getCodePostal2Etablissement() {
			return this.codePostal2Etablissement;
		}

		public String libelleCommune2Etablissement;

		public String getLibelleCommune2Etablissement() {
			return this.libelleCommune2Etablissement;
		}

		public String libelleCommuneEtranger2Etablissement;

		public String getLibelleCommuneEtranger2Etablissement() {
			return this.libelleCommuneEtranger2Etablissement;
		}

		public String distributionSpeciale2Etablissement;

		public String getDistributionSpeciale2Etablissement() {
			return this.distributionSpeciale2Etablissement;
		}

		public String codeCommune2Etablissement;

		public String getCodeCommune2Etablissement() {
			return this.codeCommune2Etablissement;
		}

		public String codeCedex2Etablissement;

		public String getCodeCedex2Etablissement() {
			return this.codeCedex2Etablissement;
		}

		public String libelleCedex2Etablissement;

		public String getLibelleCedex2Etablissement() {
			return this.libelleCedex2Etablissement;
		}

		public String codePaysEtranger2Etablissement;

		public String getCodePaysEtranger2Etablissement() {
			return this.codePaysEtranger2Etablissement;
		}

		public String libellePaysEtranger2Etablissement;

		public String getLibellePaysEtranger2Etablissement() {
			return this.libellePaysEtranger2Etablissement;
		}

		public String dateFin;

		public String getDateFin() {
			return this.dateFin;
		}

		public java.util.Date dateDebut;

		public java.util.Date getDateDebut() {
			return this.dateDebut;
		}

		public Character etatAdministratifEtablissement;

		public Character getEtatAdministratifEtablissement() {
			return this.etatAdministratifEtablissement;
		}

		public Boolean changementEtatAdministratifEtablissement;

		public Boolean getChangementEtatAdministratifEtablissement() {
			return this.changementEtatAdministratifEtablissement;
		}

		public String enseigne1Etablissement;

		public String getEnseigne1Etablissement() {
			return this.enseigne1Etablissement;
		}

		public String enseigne2Etablissement;

		public String getEnseigne2Etablissement() {
			return this.enseigne2Etablissement;
		}

		public String enseigne3Etablissement;

		public String getEnseigne3Etablissement() {
			return this.enseigne3Etablissement;
		}

		public Boolean changementEnseigneEtablissement;

		public Boolean getChangementEnseigneEtablissement() {
			return this.changementEnseigneEtablissement;
		}

		public String denominationUsuelleEtablissement;

		public String getDenominationUsuelleEtablissement() {
			return this.denominationUsuelleEtablissement;
		}

		public Boolean changementDenominationUsuelleEtablissement;

		public Boolean getChangementDenominationUsuelleEtablissement() {
			return this.changementDenominationUsuelleEtablissement;
		}

		public String activitePrincipaleEtablissement;

		public String getActivitePrincipaleEtablissement() {
			return this.activitePrincipaleEtablissement;
		}

		public String nomenclatureActivitePrincipaleEtablissement;

		public String getNomenclatureActivitePrincipaleEtablissement() {
			return this.nomenclatureActivitePrincipaleEtablissement;
		}

		public Boolean changementActivitePrincipaleEtablissement;

		public Boolean getChangementActivitePrincipaleEtablissement() {
			return this.changementActivitePrincipaleEtablissement;
		}

		public Character caractereEmployeurEtablissement;

		public Character getCaractereEmployeurEtablissement() {
			return this.caractereEmployeurEtablissement;
		}

		public Boolean changementCaractereEmployeurEtablissement;

		public Boolean getChangementCaractereEmployeurEtablissement() {
			return this.changementCaractereEmployeurEtablissement;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.siret == null) ? 0 : this.siret.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final siretsStruct other = (siretsStruct) obj;

			if (this.siret == null) {
				if (other.siret != null)
					return false;

			} else if (!this.siret.equals(other.siret))

				return false;

			return true;
		}

		public void copyDataTo(siretsStruct other) {

			other.siren = this.siren;
			other.nic = this.nic;
			other.siret = this.siret;
			other.statutDiffusionEtablissement = this.statutDiffusionEtablissement;
			other.dateCreationEtablissement = this.dateCreationEtablissement;
			other.trancheEffectifsEtablissement = this.trancheEffectifsEtablissement;
			other.anneeEffectifsEtablissement = this.anneeEffectifsEtablissement;
			other.activitePrincipaleRegistreMetiersEtablissement = this.activitePrincipaleRegistreMetiersEtablissement;
			other.dateDernierTraitementEtablissement = this.dateDernierTraitementEtablissement;
			other.etablissementSiege = this.etablissementSiege;
			other.nombrePeriodesEtablissement = this.nombrePeriodesEtablissement;
			other.etatAdministratifUniteLegale = this.etatAdministratifUniteLegale;
			other.statutDiffusionUniteLegale = this.statutDiffusionUniteLegale;
			other.dateCreationUniteLegale = this.dateCreationUniteLegale;
			other.categorieJuridiqueUniteLegale = this.categorieJuridiqueUniteLegale;
			other.denominationUniteLegale = this.denominationUniteLegale;
			other.sigleUniteLegale = this.sigleUniteLegale;
			other.denominationUsuelle1UniteLegale = this.denominationUsuelle1UniteLegale;
			other.denominationUsuelle2UniteLegale = this.denominationUsuelle2UniteLegale;
			other.denominationUsuelle3UniteLegale = this.denominationUsuelle3UniteLegale;
			other.sexeUniteLegale = this.sexeUniteLegale;
			other.nomUniteLegale = this.nomUniteLegale;
			other.nomUsageUniteLegale = this.nomUsageUniteLegale;
			other.prenom1UniteLegale = this.prenom1UniteLegale;
			other.prenom2UniteLegale = this.prenom2UniteLegale;
			other.prenom3UniteLegale = this.prenom3UniteLegale;
			other.prenom4UniteLegale = this.prenom4UniteLegale;
			other.prenomUsuelUniteLegale = this.prenomUsuelUniteLegale;
			other.pseudonymeUniteLegale = this.pseudonymeUniteLegale;
			other.activitePrincipaleUniteLegale = this.activitePrincipaleUniteLegale;
			other.nomenclatureActivitePrincipaleUniteLegale = this.nomenclatureActivitePrincipaleUniteLegale;
			other.identifiantAssociationUniteLegale = this.identifiantAssociationUniteLegale;
			other.economieSocialeSolidaireUniteLegale = this.economieSocialeSolidaireUniteLegale;
			other.caractereEmployeurUniteLegale = this.caractereEmployeurUniteLegale;
			other.trancheEffectifsUniteLegale = this.trancheEffectifsUniteLegale;
			other.anneeEffectifsUniteLegale = this.anneeEffectifsUniteLegale;
			other.nicSiegeUniteLegale = this.nicSiegeUniteLegale;
			other.dateDernierTraitementUniteLegale = this.dateDernierTraitementUniteLegale;
			other.categorieEntreprise = this.categorieEntreprise;
			other.anneeCategorieEntreprise = this.anneeCategorieEntreprise;
			other.complementAdresseEtablissement = this.complementAdresseEtablissement;
			other.numeroVoieEtablissement = this.numeroVoieEtablissement;
			other.indiceRepetitionEtablissement = this.indiceRepetitionEtablissement;
			other.typeVoieEtablissement = this.typeVoieEtablissement;
			other.libelleVoieEtablissement = this.libelleVoieEtablissement;
			other.codePostalEtablissement = this.codePostalEtablissement;
			other.libelleCommuneEtablissement = this.libelleCommuneEtablissement;
			other.libelleCommuneEtrangerEtablissement = this.libelleCommuneEtrangerEtablissement;
			other.distributionSpecialeEtablissement = this.distributionSpecialeEtablissement;
			other.codeCommuneEtablissement = this.codeCommuneEtablissement;
			other.codeCedexEtablissement = this.codeCedexEtablissement;
			other.libelleCedexEtablissement = this.libelleCedexEtablissement;
			other.codePaysEtrangerEtablissement = this.codePaysEtrangerEtablissement;
			other.libellePaysEtrangerEtablissement = this.libellePaysEtrangerEtablissement;
			other.complementAdresse2Etablissement = this.complementAdresse2Etablissement;
			other.numeroVoie2Etablissement = this.numeroVoie2Etablissement;
			other.indiceRepetition2Etablissement = this.indiceRepetition2Etablissement;
			other.typeVoie2Etablissement = this.typeVoie2Etablissement;
			other.libelleVoie2Etablissement = this.libelleVoie2Etablissement;
			other.codePostal2Etablissement = this.codePostal2Etablissement;
			other.libelleCommune2Etablissement = this.libelleCommune2Etablissement;
			other.libelleCommuneEtranger2Etablissement = this.libelleCommuneEtranger2Etablissement;
			other.distributionSpeciale2Etablissement = this.distributionSpeciale2Etablissement;
			other.codeCommune2Etablissement = this.codeCommune2Etablissement;
			other.codeCedex2Etablissement = this.codeCedex2Etablissement;
			other.libelleCedex2Etablissement = this.libelleCedex2Etablissement;
			other.codePaysEtranger2Etablissement = this.codePaysEtranger2Etablissement;
			other.libellePaysEtranger2Etablissement = this.libellePaysEtranger2Etablissement;
			other.dateFin = this.dateFin;
			other.dateDebut = this.dateDebut;
			other.etatAdministratifEtablissement = this.etatAdministratifEtablissement;
			other.changementEtatAdministratifEtablissement = this.changementEtatAdministratifEtablissement;
			other.enseigne1Etablissement = this.enseigne1Etablissement;
			other.enseigne2Etablissement = this.enseigne2Etablissement;
			other.enseigne3Etablissement = this.enseigne3Etablissement;
			other.changementEnseigneEtablissement = this.changementEnseigneEtablissement;
			other.denominationUsuelleEtablissement = this.denominationUsuelleEtablissement;
			other.changementDenominationUsuelleEtablissement = this.changementDenominationUsuelleEtablissement;
			other.activitePrincipaleEtablissement = this.activitePrincipaleEtablissement;
			other.nomenclatureActivitePrincipaleEtablissement = this.nomenclatureActivitePrincipaleEtablissement;
			other.changementActivitePrincipaleEtablissement = this.changementActivitePrincipaleEtablissement;
			other.caractereEmployeurEtablissement = this.caractereEmployeurEtablissement;
			other.changementCaractereEmployeurEtablissement = this.changementCaractereEmployeurEtablissement;

		}

		public void copyKeysDataTo(siretsStruct other) {

			other.siret = this.siret;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_IIIDATA_GET_DATAS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.siret = null;
					} else {
						this.siret = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.siret == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.siret);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.siren = readInteger(dis, ois);

				this.nic = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.statutDiffusionEtablissement = null;
				} else {
					this.statutDiffusionEtablissement = dis.readChar();
				}

				this.dateCreationEtablissement = readDate(dis, ois);

				this.trancheEffectifsEtablissement = readString(dis, ois);

				this.anneeEffectifsEtablissement = readString(dis, ois);

				this.activitePrincipaleRegistreMetiersEtablissement = readString(dis, ois);

				this.dateDernierTraitementEtablissement = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.etablissementSiege = null;
				} else {
					this.etablissementSiege = dis.readBoolean();
				}

				this.nombrePeriodesEtablissement = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.etatAdministratifUniteLegale = null;
				} else {
					this.etatAdministratifUniteLegale = dis.readChar();
				}

				length = dis.readByte();
				if (length == -1) {
					this.statutDiffusionUniteLegale = null;
				} else {
					this.statutDiffusionUniteLegale = dis.readChar();
				}

				this.dateCreationUniteLegale = readDate(dis, ois);

				this.categorieJuridiqueUniteLegale = readInteger(dis, ois);

				this.denominationUniteLegale = readString(dis, ois);

				this.sigleUniteLegale = readString(dis, ois);

				this.denominationUsuelle1UniteLegale = readString(dis, ois);

				this.denominationUsuelle2UniteLegale = readString(dis, ois);

				this.denominationUsuelle3UniteLegale = readString(dis, ois);

				this.sexeUniteLegale = readString(dis, ois);

				this.nomUniteLegale = readString(dis, ois);

				this.nomUsageUniteLegale = readString(dis, ois);

				this.prenom1UniteLegale = readString(dis, ois);

				this.prenom2UniteLegale = readString(dis, ois);

				this.prenom3UniteLegale = readString(dis, ois);

				this.prenom4UniteLegale = readString(dis, ois);

				this.prenomUsuelUniteLegale = readString(dis, ois);

				this.pseudonymeUniteLegale = readString(dis, ois);

				this.activitePrincipaleUniteLegale = readString(dis, ois);

				this.nomenclatureActivitePrincipaleUniteLegale = readString(dis, ois);

				this.identifiantAssociationUniteLegale = readString(dis, ois);

				this.economieSocialeSolidaireUniteLegale = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.caractereEmployeurUniteLegale = null;
				} else {
					this.caractereEmployeurUniteLegale = dis.readChar();
				}

				this.trancheEffectifsUniteLegale = readString(dis, ois);

				this.anneeEffectifsUniteLegale = readString(dis, ois);

				this.nicSiegeUniteLegale = readInteger(dis, ois);

				this.dateDernierTraitementUniteLegale = readDate(dis, ois);

				this.categorieEntreprise = readString(dis, ois);

				this.anneeCategorieEntreprise = readString(dis, ois);

				this.complementAdresseEtablissement = readString(dis, ois);

				this.numeroVoieEtablissement = readString(dis, ois);

				this.indiceRepetitionEtablissement = readString(dis, ois);

				this.typeVoieEtablissement = readString(dis, ois);

				this.libelleVoieEtablissement = readString(dis, ois);

				this.codePostalEtablissement = readString(dis, ois);

				this.libelleCommuneEtablissement = readString(dis, ois);

				this.libelleCommuneEtrangerEtablissement = readString(dis, ois);

				this.distributionSpecialeEtablissement = readString(dis, ois);

				this.codeCommuneEtablissement = readString(dis, ois);

				this.codeCedexEtablissement = readString(dis, ois);

				this.libelleCedexEtablissement = readString(dis, ois);

				this.codePaysEtrangerEtablissement = readString(dis, ois);

				this.libellePaysEtrangerEtablissement = readString(dis, ois);

				this.complementAdresse2Etablissement = readString(dis, ois);

				this.numeroVoie2Etablissement = readString(dis, ois);

				this.indiceRepetition2Etablissement = readString(dis, ois);

				this.typeVoie2Etablissement = readString(dis, ois);

				this.libelleVoie2Etablissement = readString(dis, ois);

				this.codePostal2Etablissement = readString(dis, ois);

				this.libelleCommune2Etablissement = readString(dis, ois);

				this.libelleCommuneEtranger2Etablissement = readString(dis, ois);

				this.distributionSpeciale2Etablissement = readString(dis, ois);

				this.codeCommune2Etablissement = readString(dis, ois);

				this.codeCedex2Etablissement = readString(dis, ois);

				this.libelleCedex2Etablissement = readString(dis, ois);

				this.codePaysEtranger2Etablissement = readString(dis, ois);

				this.libellePaysEtranger2Etablissement = readString(dis, ois);

				this.dateFin = readString(dis, ois);

				this.dateDebut = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.etatAdministratifEtablissement = null;
				} else {
					this.etatAdministratifEtablissement = dis.readChar();
				}

				length = dis.readByte();
				if (length == -1) {
					this.changementEtatAdministratifEtablissement = null;
				} else {
					this.changementEtatAdministratifEtablissement = dis.readBoolean();
				}

				this.enseigne1Etablissement = readString(dis, ois);

				this.enseigne2Etablissement = readString(dis, ois);

				this.enseigne3Etablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementEnseigneEtablissement = null;
				} else {
					this.changementEnseigneEtablissement = dis.readBoolean();
				}

				this.denominationUsuelleEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementDenominationUsuelleEtablissement = null;
				} else {
					this.changementDenominationUsuelleEtablissement = dis.readBoolean();
				}

				this.activitePrincipaleEtablissement = readString(dis, ois);

				this.nomenclatureActivitePrincipaleEtablissement = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.changementActivitePrincipaleEtablissement = null;
				} else {
					this.changementActivitePrincipaleEtablissement = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.caractereEmployeurEtablissement = null;
				} else {
					this.caractereEmployeurEtablissement = dis.readChar();
				}

				length = dis.readByte();
				if (length == -1) {
					this.changementCaractereEmployeurEtablissement = null;
				} else {
					this.changementCaractereEmployeurEtablissement = dis.readBoolean();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.siren = readInteger(dis, objectIn);

				this.nic = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.statutDiffusionEtablissement = null;
				} else {
					this.statutDiffusionEtablissement = objectIn.readChar();
				}

				this.dateCreationEtablissement = readDate(dis, objectIn);

				this.trancheEffectifsEtablissement = readString(dis, objectIn);

				this.anneeEffectifsEtablissement = readString(dis, objectIn);

				this.activitePrincipaleRegistreMetiersEtablissement = readString(dis, objectIn);

				this.dateDernierTraitementEtablissement = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.etablissementSiege = null;
				} else {
					this.etablissementSiege = objectIn.readBoolean();
				}

				this.nombrePeriodesEtablissement = readInteger(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.etatAdministratifUniteLegale = null;
				} else {
					this.etatAdministratifUniteLegale = objectIn.readChar();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.statutDiffusionUniteLegale = null;
				} else {
					this.statutDiffusionUniteLegale = objectIn.readChar();
				}

				this.dateCreationUniteLegale = readDate(dis, objectIn);

				this.categorieJuridiqueUniteLegale = readInteger(dis, objectIn);

				this.denominationUniteLegale = readString(dis, objectIn);

				this.sigleUniteLegale = readString(dis, objectIn);

				this.denominationUsuelle1UniteLegale = readString(dis, objectIn);

				this.denominationUsuelle2UniteLegale = readString(dis, objectIn);

				this.denominationUsuelle3UniteLegale = readString(dis, objectIn);

				this.sexeUniteLegale = readString(dis, objectIn);

				this.nomUniteLegale = readString(dis, objectIn);

				this.nomUsageUniteLegale = readString(dis, objectIn);

				this.prenom1UniteLegale = readString(dis, objectIn);

				this.prenom2UniteLegale = readString(dis, objectIn);

				this.prenom3UniteLegale = readString(dis, objectIn);

				this.prenom4UniteLegale = readString(dis, objectIn);

				this.prenomUsuelUniteLegale = readString(dis, objectIn);

				this.pseudonymeUniteLegale = readString(dis, objectIn);

				this.activitePrincipaleUniteLegale = readString(dis, objectIn);

				this.nomenclatureActivitePrincipaleUniteLegale = readString(dis, objectIn);

				this.identifiantAssociationUniteLegale = readString(dis, objectIn);

				this.economieSocialeSolidaireUniteLegale = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.caractereEmployeurUniteLegale = null;
				} else {
					this.caractereEmployeurUniteLegale = objectIn.readChar();
				}

				this.trancheEffectifsUniteLegale = readString(dis, objectIn);

				this.anneeEffectifsUniteLegale = readString(dis, objectIn);

				this.nicSiegeUniteLegale = readInteger(dis, objectIn);

				this.dateDernierTraitementUniteLegale = readDate(dis, objectIn);

				this.categorieEntreprise = readString(dis, objectIn);

				this.anneeCategorieEntreprise = readString(dis, objectIn);

				this.complementAdresseEtablissement = readString(dis, objectIn);

				this.numeroVoieEtablissement = readString(dis, objectIn);

				this.indiceRepetitionEtablissement = readString(dis, objectIn);

				this.typeVoieEtablissement = readString(dis, objectIn);

				this.libelleVoieEtablissement = readString(dis, objectIn);

				this.codePostalEtablissement = readString(dis, objectIn);

				this.libelleCommuneEtablissement = readString(dis, objectIn);

				this.libelleCommuneEtrangerEtablissement = readString(dis, objectIn);

				this.distributionSpecialeEtablissement = readString(dis, objectIn);

				this.codeCommuneEtablissement = readString(dis, objectIn);

				this.codeCedexEtablissement = readString(dis, objectIn);

				this.libelleCedexEtablissement = readString(dis, objectIn);

				this.codePaysEtrangerEtablissement = readString(dis, objectIn);

				this.libellePaysEtrangerEtablissement = readString(dis, objectIn);

				this.complementAdresse2Etablissement = readString(dis, objectIn);

				this.numeroVoie2Etablissement = readString(dis, objectIn);

				this.indiceRepetition2Etablissement = readString(dis, objectIn);

				this.typeVoie2Etablissement = readString(dis, objectIn);

				this.libelleVoie2Etablissement = readString(dis, objectIn);

				this.codePostal2Etablissement = readString(dis, objectIn);

				this.libelleCommune2Etablissement = readString(dis, objectIn);

				this.libelleCommuneEtranger2Etablissement = readString(dis, objectIn);

				this.distributionSpeciale2Etablissement = readString(dis, objectIn);

				this.codeCommune2Etablissement = readString(dis, objectIn);

				this.codeCedex2Etablissement = readString(dis, objectIn);

				this.libelleCedex2Etablissement = readString(dis, objectIn);

				this.codePaysEtranger2Etablissement = readString(dis, objectIn);

				this.libellePaysEtranger2Etablissement = readString(dis, objectIn);

				this.dateFin = readString(dis, objectIn);

				this.dateDebut = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.etatAdministratifEtablissement = null;
				} else {
					this.etatAdministratifEtablissement = objectIn.readChar();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.changementEtatAdministratifEtablissement = null;
				} else {
					this.changementEtatAdministratifEtablissement = objectIn.readBoolean();
				}

				this.enseigne1Etablissement = readString(dis, objectIn);

				this.enseigne2Etablissement = readString(dis, objectIn);

				this.enseigne3Etablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementEnseigneEtablissement = null;
				} else {
					this.changementEnseigneEtablissement = objectIn.readBoolean();
				}

				this.denominationUsuelleEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementDenominationUsuelleEtablissement = null;
				} else {
					this.changementDenominationUsuelleEtablissement = objectIn.readBoolean();
				}

				this.activitePrincipaleEtablissement = readString(dis, objectIn);

				this.nomenclatureActivitePrincipaleEtablissement = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.changementActivitePrincipaleEtablissement = null;
				} else {
					this.changementActivitePrincipaleEtablissement = objectIn.readBoolean();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.caractereEmployeurEtablissement = null;
				} else {
					this.caractereEmployeurEtablissement = objectIn.readChar();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.changementCaractereEmployeurEtablissement = null;
				} else {
					this.changementCaractereEmployeurEtablissement = objectIn.readBoolean();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.siren, dos, oos);

				writeInteger(this.nic, dos, oos);

				if (this.statutDiffusionEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.statutDiffusionEtablissement);
				}

				writeDate(this.dateCreationEtablissement, dos, oos);

				writeString(this.trancheEffectifsEtablissement, dos, oos);

				writeString(this.anneeEffectifsEtablissement, dos, oos);

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos, oos);

				writeDate(this.dateDernierTraitementEtablissement, dos, oos);

				if (this.etablissementSiege == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.etablissementSiege);
				}

				writeInteger(this.nombrePeriodesEtablissement, dos, oos);

				if (this.etatAdministratifUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.etatAdministratifUniteLegale);
				}

				if (this.statutDiffusionUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.statutDiffusionUniteLegale);
				}

				writeDate(this.dateCreationUniteLegale, dos, oos);

				writeInteger(this.categorieJuridiqueUniteLegale, dos, oos);

				writeString(this.denominationUniteLegale, dos, oos);

				writeString(this.sigleUniteLegale, dos, oos);

				writeString(this.denominationUsuelle1UniteLegale, dos, oos);

				writeString(this.denominationUsuelle2UniteLegale, dos, oos);

				writeString(this.denominationUsuelle3UniteLegale, dos, oos);

				writeString(this.sexeUniteLegale, dos, oos);

				writeString(this.nomUniteLegale, dos, oos);

				writeString(this.nomUsageUniteLegale, dos, oos);

				writeString(this.prenom1UniteLegale, dos, oos);

				writeString(this.prenom2UniteLegale, dos, oos);

				writeString(this.prenom3UniteLegale, dos, oos);

				writeString(this.prenom4UniteLegale, dos, oos);

				writeString(this.prenomUsuelUniteLegale, dos, oos);

				writeString(this.pseudonymeUniteLegale, dos, oos);

				writeString(this.activitePrincipaleUniteLegale, dos, oos);

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos, oos);

				writeString(this.identifiantAssociationUniteLegale, dos, oos);

				writeString(this.economieSocialeSolidaireUniteLegale, dos, oos);

				if (this.caractereEmployeurUniteLegale == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.caractereEmployeurUniteLegale);
				}

				writeString(this.trancheEffectifsUniteLegale, dos, oos);

				writeString(this.anneeEffectifsUniteLegale, dos, oos);

				writeInteger(this.nicSiegeUniteLegale, dos, oos);

				writeDate(this.dateDernierTraitementUniteLegale, dos, oos);

				writeString(this.categorieEntreprise, dos, oos);

				writeString(this.anneeCategorieEntreprise, dos, oos);

				writeString(this.complementAdresseEtablissement, dos, oos);

				writeString(this.numeroVoieEtablissement, dos, oos);

				writeString(this.indiceRepetitionEtablissement, dos, oos);

				writeString(this.typeVoieEtablissement, dos, oos);

				writeString(this.libelleVoieEtablissement, dos, oos);

				writeString(this.codePostalEtablissement, dos, oos);

				writeString(this.libelleCommuneEtablissement, dos, oos);

				writeString(this.libelleCommuneEtrangerEtablissement, dos, oos);

				writeString(this.distributionSpecialeEtablissement, dos, oos);

				writeString(this.codeCommuneEtablissement, dos, oos);

				writeString(this.codeCedexEtablissement, dos, oos);

				writeString(this.libelleCedexEtablissement, dos, oos);

				writeString(this.codePaysEtrangerEtablissement, dos, oos);

				writeString(this.libellePaysEtrangerEtablissement, dos, oos);

				writeString(this.complementAdresse2Etablissement, dos, oos);

				writeString(this.numeroVoie2Etablissement, dos, oos);

				writeString(this.indiceRepetition2Etablissement, dos, oos);

				writeString(this.typeVoie2Etablissement, dos, oos);

				writeString(this.libelleVoie2Etablissement, dos, oos);

				writeString(this.codePostal2Etablissement, dos, oos);

				writeString(this.libelleCommune2Etablissement, dos, oos);

				writeString(this.libelleCommuneEtranger2Etablissement, dos, oos);

				writeString(this.distributionSpeciale2Etablissement, dos, oos);

				writeString(this.codeCommune2Etablissement, dos, oos);

				writeString(this.codeCedex2Etablissement, dos, oos);

				writeString(this.libelleCedex2Etablissement, dos, oos);

				writeString(this.codePaysEtranger2Etablissement, dos, oos);

				writeString(this.libellePaysEtranger2Etablissement, dos, oos);

				writeString(this.dateFin, dos, oos);

				writeDate(this.dateDebut, dos, oos);

				if (this.etatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.etatAdministratifEtablissement);
				}

				if (this.changementEtatAdministratifEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				writeString(this.enseigne1Etablissement, dos, oos);

				writeString(this.enseigne2Etablissement, dos, oos);

				writeString(this.enseigne3Etablissement, dos, oos);

				if (this.changementEnseigneEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementEnseigneEtablissement);
				}

				writeString(this.denominationUsuelleEtablissement, dos, oos);

				if (this.changementDenominationUsuelleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				writeString(this.activitePrincipaleEtablissement, dos, oos);

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos, oos);

				if (this.changementActivitePrincipaleEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				if (this.caractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.caractereEmployeurEtablissement);
				}

				if (this.changementCaractereEmployeurEtablissement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.siren, dos, objectOut);

				writeInteger(this.nic, dos, objectOut);

				if (this.statutDiffusionEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.statutDiffusionEtablissement);
				}

				writeDate(this.dateCreationEtablissement, dos, objectOut);

				writeString(this.trancheEffectifsEtablissement, dos, objectOut);

				writeString(this.anneeEffectifsEtablissement, dos, objectOut);

				writeString(this.activitePrincipaleRegistreMetiersEtablissement, dos, objectOut);

				writeDate(this.dateDernierTraitementEtablissement, dos, objectOut);

				if (this.etablissementSiege == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.etablissementSiege);
				}

				writeInteger(this.nombrePeriodesEtablissement, dos, objectOut);

				if (this.etatAdministratifUniteLegale == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.etatAdministratifUniteLegale);
				}

				if (this.statutDiffusionUniteLegale == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.statutDiffusionUniteLegale);
				}

				writeDate(this.dateCreationUniteLegale, dos, objectOut);

				writeInteger(this.categorieJuridiqueUniteLegale, dos, objectOut);

				writeString(this.denominationUniteLegale, dos, objectOut);

				writeString(this.sigleUniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle1UniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle2UniteLegale, dos, objectOut);

				writeString(this.denominationUsuelle3UniteLegale, dos, objectOut);

				writeString(this.sexeUniteLegale, dos, objectOut);

				writeString(this.nomUniteLegale, dos, objectOut);

				writeString(this.nomUsageUniteLegale, dos, objectOut);

				writeString(this.prenom1UniteLegale, dos, objectOut);

				writeString(this.prenom2UniteLegale, dos, objectOut);

				writeString(this.prenom3UniteLegale, dos, objectOut);

				writeString(this.prenom4UniteLegale, dos, objectOut);

				writeString(this.prenomUsuelUniteLegale, dos, objectOut);

				writeString(this.pseudonymeUniteLegale, dos, objectOut);

				writeString(this.activitePrincipaleUniteLegale, dos, objectOut);

				writeString(this.nomenclatureActivitePrincipaleUniteLegale, dos, objectOut);

				writeString(this.identifiantAssociationUniteLegale, dos, objectOut);

				writeString(this.economieSocialeSolidaireUniteLegale, dos, objectOut);

				if (this.caractereEmployeurUniteLegale == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.caractereEmployeurUniteLegale);
				}

				writeString(this.trancheEffectifsUniteLegale, dos, objectOut);

				writeString(this.anneeEffectifsUniteLegale, dos, objectOut);

				writeInteger(this.nicSiegeUniteLegale, dos, objectOut);

				writeDate(this.dateDernierTraitementUniteLegale, dos, objectOut);

				writeString(this.categorieEntreprise, dos, objectOut);

				writeString(this.anneeCategorieEntreprise, dos, objectOut);

				writeString(this.complementAdresseEtablissement, dos, objectOut);

				writeString(this.numeroVoieEtablissement, dos, objectOut);

				writeString(this.indiceRepetitionEtablissement, dos, objectOut);

				writeString(this.typeVoieEtablissement, dos, objectOut);

				writeString(this.libelleVoieEtablissement, dos, objectOut);

				writeString(this.codePostalEtablissement, dos, objectOut);

				writeString(this.libelleCommuneEtablissement, dos, objectOut);

				writeString(this.libelleCommuneEtrangerEtablissement, dos, objectOut);

				writeString(this.distributionSpecialeEtablissement, dos, objectOut);

				writeString(this.codeCommuneEtablissement, dos, objectOut);

				writeString(this.codeCedexEtablissement, dos, objectOut);

				writeString(this.libelleCedexEtablissement, dos, objectOut);

				writeString(this.codePaysEtrangerEtablissement, dos, objectOut);

				writeString(this.libellePaysEtrangerEtablissement, dos, objectOut);

				writeString(this.complementAdresse2Etablissement, dos, objectOut);

				writeString(this.numeroVoie2Etablissement, dos, objectOut);

				writeString(this.indiceRepetition2Etablissement, dos, objectOut);

				writeString(this.typeVoie2Etablissement, dos, objectOut);

				writeString(this.libelleVoie2Etablissement, dos, objectOut);

				writeString(this.codePostal2Etablissement, dos, objectOut);

				writeString(this.libelleCommune2Etablissement, dos, objectOut);

				writeString(this.libelleCommuneEtranger2Etablissement, dos, objectOut);

				writeString(this.distributionSpeciale2Etablissement, dos, objectOut);

				writeString(this.codeCommune2Etablissement, dos, objectOut);

				writeString(this.codeCedex2Etablissement, dos, objectOut);

				writeString(this.libelleCedex2Etablissement, dos, objectOut);

				writeString(this.codePaysEtranger2Etablissement, dos, objectOut);

				writeString(this.libellePaysEtranger2Etablissement, dos, objectOut);

				writeString(this.dateFin, dos, objectOut);

				writeDate(this.dateDebut, dos, objectOut);

				if (this.etatAdministratifEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.etatAdministratifEtablissement);
				}

				if (this.changementEtatAdministratifEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementEtatAdministratifEtablissement);
				}

				writeString(this.enseigne1Etablissement, dos, objectOut);

				writeString(this.enseigne2Etablissement, dos, objectOut);

				writeString(this.enseigne3Etablissement, dos, objectOut);

				if (this.changementEnseigneEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementEnseigneEtablissement);
				}

				writeString(this.denominationUsuelleEtablissement, dos, objectOut);

				if (this.changementDenominationUsuelleEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementDenominationUsuelleEtablissement);
				}

				writeString(this.activitePrincipaleEtablissement, dos, objectOut);

				writeString(this.nomenclatureActivitePrincipaleEtablissement, dos, objectOut);

				if (this.changementActivitePrincipaleEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementActivitePrincipaleEtablissement);
				}

				if (this.caractereEmployeurEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.caractereEmployeurEtablissement);
				}

				if (this.changementCaractereEmployeurEtablissement == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.changementCaractereEmployeurEtablissement);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("siren=" + String.valueOf(siren));
			sb.append(",nic=" + String.valueOf(nic));
			sb.append(",siret=" + String.valueOf(siret));
			sb.append(",statutDiffusionEtablissement=" + String.valueOf(statutDiffusionEtablissement));
			sb.append(",dateCreationEtablissement=" + String.valueOf(dateCreationEtablissement));
			sb.append(",trancheEffectifsEtablissement=" + trancheEffectifsEtablissement);
			sb.append(",anneeEffectifsEtablissement=" + anneeEffectifsEtablissement);
			sb.append(",activitePrincipaleRegistreMetiersEtablissement="
					+ activitePrincipaleRegistreMetiersEtablissement);
			sb.append(",dateDernierTraitementEtablissement=" + String.valueOf(dateDernierTraitementEtablissement));
			sb.append(",etablissementSiege=" + String.valueOf(etablissementSiege));
			sb.append(",nombrePeriodesEtablissement=" + String.valueOf(nombrePeriodesEtablissement));
			sb.append(",etatAdministratifUniteLegale=" + String.valueOf(etatAdministratifUniteLegale));
			sb.append(",statutDiffusionUniteLegale=" + String.valueOf(statutDiffusionUniteLegale));
			sb.append(",dateCreationUniteLegale=" + String.valueOf(dateCreationUniteLegale));
			sb.append(",categorieJuridiqueUniteLegale=" + String.valueOf(categorieJuridiqueUniteLegale));
			sb.append(",denominationUniteLegale=" + denominationUniteLegale);
			sb.append(",sigleUniteLegale=" + sigleUniteLegale);
			sb.append(",denominationUsuelle1UniteLegale=" + denominationUsuelle1UniteLegale);
			sb.append(",denominationUsuelle2UniteLegale=" + denominationUsuelle2UniteLegale);
			sb.append(",denominationUsuelle3UniteLegale=" + denominationUsuelle3UniteLegale);
			sb.append(",sexeUniteLegale=" + sexeUniteLegale);
			sb.append(",nomUniteLegale=" + nomUniteLegale);
			sb.append(",nomUsageUniteLegale=" + nomUsageUniteLegale);
			sb.append(",prenom1UniteLegale=" + prenom1UniteLegale);
			sb.append(",prenom2UniteLegale=" + prenom2UniteLegale);
			sb.append(",prenom3UniteLegale=" + prenom3UniteLegale);
			sb.append(",prenom4UniteLegale=" + prenom4UniteLegale);
			sb.append(",prenomUsuelUniteLegale=" + prenomUsuelUniteLegale);
			sb.append(",pseudonymeUniteLegale=" + pseudonymeUniteLegale);
			sb.append(",activitePrincipaleUniteLegale=" + activitePrincipaleUniteLegale);
			sb.append(",nomenclatureActivitePrincipaleUniteLegale=" + nomenclatureActivitePrincipaleUniteLegale);
			sb.append(",identifiantAssociationUniteLegale=" + identifiantAssociationUniteLegale);
			sb.append(",economieSocialeSolidaireUniteLegale=" + economieSocialeSolidaireUniteLegale);
			sb.append(",caractereEmployeurUniteLegale=" + String.valueOf(caractereEmployeurUniteLegale));
			sb.append(",trancheEffectifsUniteLegale=" + trancheEffectifsUniteLegale);
			sb.append(",anneeEffectifsUniteLegale=" + anneeEffectifsUniteLegale);
			sb.append(",nicSiegeUniteLegale=" + String.valueOf(nicSiegeUniteLegale));
			sb.append(",dateDernierTraitementUniteLegale=" + String.valueOf(dateDernierTraitementUniteLegale));
			sb.append(",categorieEntreprise=" + categorieEntreprise);
			sb.append(",anneeCategorieEntreprise=" + anneeCategorieEntreprise);
			sb.append(",complementAdresseEtablissement=" + complementAdresseEtablissement);
			sb.append(",numeroVoieEtablissement=" + numeroVoieEtablissement);
			sb.append(",indiceRepetitionEtablissement=" + indiceRepetitionEtablissement);
			sb.append(",typeVoieEtablissement=" + typeVoieEtablissement);
			sb.append(",libelleVoieEtablissement=" + libelleVoieEtablissement);
			sb.append(",codePostalEtablissement=" + codePostalEtablissement);
			sb.append(",libelleCommuneEtablissement=" + libelleCommuneEtablissement);
			sb.append(",libelleCommuneEtrangerEtablissement=" + libelleCommuneEtrangerEtablissement);
			sb.append(",distributionSpecialeEtablissement=" + distributionSpecialeEtablissement);
			sb.append(",codeCommuneEtablissement=" + codeCommuneEtablissement);
			sb.append(",codeCedexEtablissement=" + codeCedexEtablissement);
			sb.append(",libelleCedexEtablissement=" + libelleCedexEtablissement);
			sb.append(",codePaysEtrangerEtablissement=" + codePaysEtrangerEtablissement);
			sb.append(",libellePaysEtrangerEtablissement=" + libellePaysEtrangerEtablissement);
			sb.append(",complementAdresse2Etablissement=" + complementAdresse2Etablissement);
			sb.append(",numeroVoie2Etablissement=" + numeroVoie2Etablissement);
			sb.append(",indiceRepetition2Etablissement=" + indiceRepetition2Etablissement);
			sb.append(",typeVoie2Etablissement=" + typeVoie2Etablissement);
			sb.append(",libelleVoie2Etablissement=" + libelleVoie2Etablissement);
			sb.append(",codePostal2Etablissement=" + codePostal2Etablissement);
			sb.append(",libelleCommune2Etablissement=" + libelleCommune2Etablissement);
			sb.append(",libelleCommuneEtranger2Etablissement=" + libelleCommuneEtranger2Etablissement);
			sb.append(",distributionSpeciale2Etablissement=" + distributionSpeciale2Etablissement);
			sb.append(",codeCommune2Etablissement=" + codeCommune2Etablissement);
			sb.append(",codeCedex2Etablissement=" + codeCedex2Etablissement);
			sb.append(",libelleCedex2Etablissement=" + libelleCedex2Etablissement);
			sb.append(",codePaysEtranger2Etablissement=" + codePaysEtranger2Etablissement);
			sb.append(",libellePaysEtranger2Etablissement=" + libellePaysEtranger2Etablissement);
			sb.append(",dateFin=" + dateFin);
			sb.append(",dateDebut=" + String.valueOf(dateDebut));
			sb.append(",etatAdministratifEtablissement=" + String.valueOf(etatAdministratifEtablissement));
			sb.append(",changementEtatAdministratifEtablissement="
					+ String.valueOf(changementEtatAdministratifEtablissement));
			sb.append(",enseigne1Etablissement=" + enseigne1Etablissement);
			sb.append(",enseigne2Etablissement=" + enseigne2Etablissement);
			sb.append(",enseigne3Etablissement=" + enseigne3Etablissement);
			sb.append(",changementEnseigneEtablissement=" + String.valueOf(changementEnseigneEtablissement));
			sb.append(",denominationUsuelleEtablissement=" + denominationUsuelleEtablissement);
			sb.append(",changementDenominationUsuelleEtablissement="
					+ String.valueOf(changementDenominationUsuelleEtablissement));
			sb.append(",activitePrincipaleEtablissement=" + activitePrincipaleEtablissement);
			sb.append(",nomenclatureActivitePrincipaleEtablissement=" + nomenclatureActivitePrincipaleEtablissement);
			sb.append(",changementActivitePrincipaleEtablissement="
					+ String.valueOf(changementActivitePrincipaleEtablissement));
			sb.append(",caractereEmployeurEtablissement=" + String.valueOf(caractereEmployeurEtablissement));
			sb.append(",changementCaractereEmployeurEtablissement="
					+ String.valueOf(changementCaractereEmployeurEtablissement));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(siretsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.siret, other.siret);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				siretsStruct sirets = new siretsStruct();

				/**
				 * [tAdvancedHash_sirets begin ] start
				 */

				ok_Hash.put("tAdvancedHash_sirets", false);
				start_Hash.put("tAdvancedHash_sirets", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_sirets";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "sirets");
				}

				int tos_count_tAdvancedHash_sirets = 0;

				// connection name:sirets
				// source node:tFileInputDelimited_1 - inputs:(after_tHashInput_4)
				// outputs:(sirets,sirets) | target node:tAdvancedHash_sirets - inputs:(sirets)
				// outputs:()
				// linked node: tMap_4 - inputs:(clients_siret_siren,sirets)
				// outputs:(to_mysql,to_postgres)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sirets = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<siretsStruct> tHash_Lookup_sirets = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<siretsStruct>getLookup(matchingModeEnum_sirets);

				globalMap.put("tHash_Lookup_sirets", tHash_Lookup_sirets);

				/**
				 * [tAdvancedHash_sirets begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/siret.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/siret.csv", "ISO-8859-15",
								";", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						sirets = null;

						sirets = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						sirets = new siretsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.siren = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"siren", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.siren = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.nic = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"nic", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.nic = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.siret = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"siret", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.siret = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.statutDiffusionEtablissement = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"statutDiffusionEtablissement", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.statutDiffusionEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.dateCreationEtablissement = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dateCreationEtablissement", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.dateCreationEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							sirets.trancheEffectifsEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							sirets.anneeEffectifsEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							sirets.activitePrincipaleRegistreMetiersEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.dateDernierTraitementEtablissement = ParserUtils.parseTo_Date(temp,
											"yyyy-MM-dd'T'HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dateDernierTraitementEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.dateDernierTraitementEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.etablissementSiege = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"etablissementSiege", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.etablissementSiege = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.nombrePeriodesEtablissement = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"nombrePeriodesEtablissement", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.nombrePeriodesEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.etatAdministratifUniteLegale = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"etatAdministratifUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.etatAdministratifUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.statutDiffusionUniteLegale = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"statutDiffusionUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.statutDiffusionUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.dateCreationUniteLegale = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dateCreationUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.dateCreationUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.categorieJuridiqueUniteLegale = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"categorieJuridiqueUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.categorieJuridiqueUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							sirets.denominationUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							sirets.sigleUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							sirets.denominationUsuelle1UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							sirets.denominationUsuelle2UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							sirets.denominationUsuelle3UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							sirets.sexeUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							sirets.nomUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							sirets.nomUsageUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							sirets.prenom1UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							sirets.prenom2UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							sirets.prenom3UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							sirets.prenom4UniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							sirets.prenomUsuelUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							sirets.pseudonymeUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							sirets.activitePrincipaleUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							sirets.nomenclatureActivitePrincipaleUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							sirets.identifiantAssociationUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							sirets.economieSocialeSolidaireUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.caractereEmployeurUniteLegale = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"caractereEmployeurUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.caractereEmployeurUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 34;

							sirets.trancheEffectifsUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							sirets.anneeEffectifsUniteLegale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.nicSiegeUniteLegale = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"nicSiegeUniteLegale", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.nicSiegeUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 37;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.dateDernierTraitementUniteLegale = ParserUtils.parseTo_Date(temp,
											"yyyy-MM-dd HH:mm:ss");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dateDernierTraitementUniteLegale", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.dateDernierTraitementUniteLegale = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 38;

							sirets.categorieEntreprise = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							sirets.anneeCategorieEntreprise = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							sirets.complementAdresseEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 41;

							sirets.numeroVoieEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 42;

							sirets.indiceRepetitionEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 43;

							sirets.typeVoieEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 44;

							sirets.libelleVoieEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 45;

							sirets.codePostalEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 46;

							sirets.libelleCommuneEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 47;

							sirets.libelleCommuneEtrangerEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 48;

							sirets.distributionSpecialeEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 49;

							sirets.codeCommuneEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 50;

							sirets.codeCedexEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 51;

							sirets.libelleCedexEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 52;

							sirets.codePaysEtrangerEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 53;

							sirets.libellePaysEtrangerEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 54;

							sirets.complementAdresse2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 55;

							sirets.numeroVoie2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 56;

							sirets.indiceRepetition2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 57;

							sirets.typeVoie2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 58;

							sirets.libelleVoie2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 59;

							sirets.codePostal2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 60;

							sirets.libelleCommune2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 61;

							sirets.libelleCommuneEtranger2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 62;

							sirets.distributionSpeciale2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 63;

							sirets.codeCommune2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 64;

							sirets.codeCedex2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 65;

							sirets.libelleCedex2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 66;

							sirets.codePaysEtranger2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 67;

							sirets.libellePaysEtranger2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 68;

							sirets.dateFin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 69;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.dateDebut = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dateDebut", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.dateDebut = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 70;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.etatAdministratifEtablissement = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"etatAdministratifEtablissement", "sirets", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								sirets.etatAdministratifEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 71;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.changementEtatAdministratifEtablissement = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"changementEtatAdministratifEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.changementEtatAdministratifEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 72;

							sirets.enseigne1Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 73;

							sirets.enseigne2Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 74;

							sirets.enseigne3Etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 75;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.changementEnseigneEtablissement = ParserUtils.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"changementEnseigneEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.changementEnseigneEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 76;

							sirets.denominationUsuelleEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 77;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.changementDenominationUsuelleEtablissement = ParserUtils
											.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"changementDenominationUsuelleEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.changementDenominationUsuelleEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 78;

							sirets.activitePrincipaleEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 79;

							sirets.nomenclatureActivitePrincipaleEtablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 80;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.changementActivitePrincipaleEtablissement = ParserUtils
											.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"changementActivitePrincipaleEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.changementActivitePrincipaleEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 81;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.caractereEmployeurEtablissement = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"caractereEmployeurEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.caractereEmployeurEtablissement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 82;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									sirets.changementCaractereEmployeurEtablissement = ParserUtils
											.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"changementCaractereEmployeurEtablissement", "sirets", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								sirets.changementCaractereEmployeurEtablissement = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							sirets = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "sirets"
						if (sirets != null) {

							/**
							 * [tAdvancedHash_sirets main ] start
							 */

							currentComponent = "tAdvancedHash_sirets";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "sirets"

								);
							}

							siretsStruct sirets_HashRow = new siretsStruct();

							sirets_HashRow.siren = sirets.siren;

							sirets_HashRow.nic = sirets.nic;

							sirets_HashRow.siret = sirets.siret;

							sirets_HashRow.statutDiffusionEtablissement = sirets.statutDiffusionEtablissement;

							sirets_HashRow.dateCreationEtablissement = sirets.dateCreationEtablissement;

							sirets_HashRow.trancheEffectifsEtablissement = sirets.trancheEffectifsEtablissement;

							sirets_HashRow.anneeEffectifsEtablissement = sirets.anneeEffectifsEtablissement;

							sirets_HashRow.activitePrincipaleRegistreMetiersEtablissement = sirets.activitePrincipaleRegistreMetiersEtablissement;

							sirets_HashRow.dateDernierTraitementEtablissement = sirets.dateDernierTraitementEtablissement;

							sirets_HashRow.etablissementSiege = sirets.etablissementSiege;

							sirets_HashRow.nombrePeriodesEtablissement = sirets.nombrePeriodesEtablissement;

							sirets_HashRow.etatAdministratifUniteLegale = sirets.etatAdministratifUniteLegale;

							sirets_HashRow.statutDiffusionUniteLegale = sirets.statutDiffusionUniteLegale;

							sirets_HashRow.dateCreationUniteLegale = sirets.dateCreationUniteLegale;

							sirets_HashRow.categorieJuridiqueUniteLegale = sirets.categorieJuridiqueUniteLegale;

							sirets_HashRow.denominationUniteLegale = sirets.denominationUniteLegale;

							sirets_HashRow.sigleUniteLegale = sirets.sigleUniteLegale;

							sirets_HashRow.denominationUsuelle1UniteLegale = sirets.denominationUsuelle1UniteLegale;

							sirets_HashRow.denominationUsuelle2UniteLegale = sirets.denominationUsuelle2UniteLegale;

							sirets_HashRow.denominationUsuelle3UniteLegale = sirets.denominationUsuelle3UniteLegale;

							sirets_HashRow.sexeUniteLegale = sirets.sexeUniteLegale;

							sirets_HashRow.nomUniteLegale = sirets.nomUniteLegale;

							sirets_HashRow.nomUsageUniteLegale = sirets.nomUsageUniteLegale;

							sirets_HashRow.prenom1UniteLegale = sirets.prenom1UniteLegale;

							sirets_HashRow.prenom2UniteLegale = sirets.prenom2UniteLegale;

							sirets_HashRow.prenom3UniteLegale = sirets.prenom3UniteLegale;

							sirets_HashRow.prenom4UniteLegale = sirets.prenom4UniteLegale;

							sirets_HashRow.prenomUsuelUniteLegale = sirets.prenomUsuelUniteLegale;

							sirets_HashRow.pseudonymeUniteLegale = sirets.pseudonymeUniteLegale;

							sirets_HashRow.activitePrincipaleUniteLegale = sirets.activitePrincipaleUniteLegale;

							sirets_HashRow.nomenclatureActivitePrincipaleUniteLegale = sirets.nomenclatureActivitePrincipaleUniteLegale;

							sirets_HashRow.identifiantAssociationUniteLegale = sirets.identifiantAssociationUniteLegale;

							sirets_HashRow.economieSocialeSolidaireUniteLegale = sirets.economieSocialeSolidaireUniteLegale;

							sirets_HashRow.caractereEmployeurUniteLegale = sirets.caractereEmployeurUniteLegale;

							sirets_HashRow.trancheEffectifsUniteLegale = sirets.trancheEffectifsUniteLegale;

							sirets_HashRow.anneeEffectifsUniteLegale = sirets.anneeEffectifsUniteLegale;

							sirets_HashRow.nicSiegeUniteLegale = sirets.nicSiegeUniteLegale;

							sirets_HashRow.dateDernierTraitementUniteLegale = sirets.dateDernierTraitementUniteLegale;

							sirets_HashRow.categorieEntreprise = sirets.categorieEntreprise;

							sirets_HashRow.anneeCategorieEntreprise = sirets.anneeCategorieEntreprise;

							sirets_HashRow.complementAdresseEtablissement = sirets.complementAdresseEtablissement;

							sirets_HashRow.numeroVoieEtablissement = sirets.numeroVoieEtablissement;

							sirets_HashRow.indiceRepetitionEtablissement = sirets.indiceRepetitionEtablissement;

							sirets_HashRow.typeVoieEtablissement = sirets.typeVoieEtablissement;

							sirets_HashRow.libelleVoieEtablissement = sirets.libelleVoieEtablissement;

							sirets_HashRow.codePostalEtablissement = sirets.codePostalEtablissement;

							sirets_HashRow.libelleCommuneEtablissement = sirets.libelleCommuneEtablissement;

							sirets_HashRow.libelleCommuneEtrangerEtablissement = sirets.libelleCommuneEtrangerEtablissement;

							sirets_HashRow.distributionSpecialeEtablissement = sirets.distributionSpecialeEtablissement;

							sirets_HashRow.codeCommuneEtablissement = sirets.codeCommuneEtablissement;

							sirets_HashRow.codeCedexEtablissement = sirets.codeCedexEtablissement;

							sirets_HashRow.libelleCedexEtablissement = sirets.libelleCedexEtablissement;

							sirets_HashRow.codePaysEtrangerEtablissement = sirets.codePaysEtrangerEtablissement;

							sirets_HashRow.libellePaysEtrangerEtablissement = sirets.libellePaysEtrangerEtablissement;

							sirets_HashRow.complementAdresse2Etablissement = sirets.complementAdresse2Etablissement;

							sirets_HashRow.numeroVoie2Etablissement = sirets.numeroVoie2Etablissement;

							sirets_HashRow.indiceRepetition2Etablissement = sirets.indiceRepetition2Etablissement;

							sirets_HashRow.typeVoie2Etablissement = sirets.typeVoie2Etablissement;

							sirets_HashRow.libelleVoie2Etablissement = sirets.libelleVoie2Etablissement;

							sirets_HashRow.codePostal2Etablissement = sirets.codePostal2Etablissement;

							sirets_HashRow.libelleCommune2Etablissement = sirets.libelleCommune2Etablissement;

							sirets_HashRow.libelleCommuneEtranger2Etablissement = sirets.libelleCommuneEtranger2Etablissement;

							sirets_HashRow.distributionSpeciale2Etablissement = sirets.distributionSpeciale2Etablissement;

							sirets_HashRow.codeCommune2Etablissement = sirets.codeCommune2Etablissement;

							sirets_HashRow.codeCedex2Etablissement = sirets.codeCedex2Etablissement;

							sirets_HashRow.libelleCedex2Etablissement = sirets.libelleCedex2Etablissement;

							sirets_HashRow.codePaysEtranger2Etablissement = sirets.codePaysEtranger2Etablissement;

							sirets_HashRow.libellePaysEtranger2Etablissement = sirets.libellePaysEtranger2Etablissement;

							sirets_HashRow.dateFin = sirets.dateFin;

							sirets_HashRow.dateDebut = sirets.dateDebut;

							sirets_HashRow.etatAdministratifEtablissement = sirets.etatAdministratifEtablissement;

							sirets_HashRow.changementEtatAdministratifEtablissement = sirets.changementEtatAdministratifEtablissement;

							sirets_HashRow.enseigne1Etablissement = sirets.enseigne1Etablissement;

							sirets_HashRow.enseigne2Etablissement = sirets.enseigne2Etablissement;

							sirets_HashRow.enseigne3Etablissement = sirets.enseigne3Etablissement;

							sirets_HashRow.changementEnseigneEtablissement = sirets.changementEnseigneEtablissement;

							sirets_HashRow.denominationUsuelleEtablissement = sirets.denominationUsuelleEtablissement;

							sirets_HashRow.changementDenominationUsuelleEtablissement = sirets.changementDenominationUsuelleEtablissement;

							sirets_HashRow.activitePrincipaleEtablissement = sirets.activitePrincipaleEtablissement;

							sirets_HashRow.nomenclatureActivitePrincipaleEtablissement = sirets.nomenclatureActivitePrincipaleEtablissement;

							sirets_HashRow.changementActivitePrincipaleEtablissement = sirets.changementActivitePrincipaleEtablissement;

							sirets_HashRow.caractereEmployeurEtablissement = sirets.caractereEmployeurEtablissement;

							sirets_HashRow.changementCaractereEmployeurEtablissement = sirets.changementCaractereEmployeurEtablissement;

							tHash_Lookup_sirets.put(sirets_HashRow);

							tos_count_tAdvancedHash_sirets++;

							/**
							 * [tAdvancedHash_sirets main ] stop
							 */

							/**
							 * [tAdvancedHash_sirets process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_sirets";

							/**
							 * [tAdvancedHash_sirets process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_sirets process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_sirets";

							/**
							 * [tAdvancedHash_sirets process_data_end ] stop
							 */

						} // End of branch "sirets"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/romain/Talend/TOS_DI-20211109_1610-V8.0.1/workspace/siret.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_sirets end ] start
				 */

				currentComponent = "tAdvancedHash_sirets";

				tHash_Lookup_sirets.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "sirets");
				}

				ok_Hash.put("tAdvancedHash_sirets", true);
				end_Hash.put("tAdvancedHash_sirets", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_sirets end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_sirets finally ] start
				 */

				currentComponent = "tAdvancedHash_sirets";

				/**
				 * [tAdvancedHash_sirets finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final GET_DATAS GET_DATASClass = new GET_DATAS();

		int exitCode = GET_DATASClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = GET_DATAS.class.getClassLoader()
					.getResourceAsStream("iiidata/get_datas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = GET_DATAS.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("baer_api", "id_Password");
					if (context.getStringValue("baer_api") == null) {
						context.baer_api = null;
					} else {
						String pwd_baer_api_value = context.getProperty("baer_api");
						context.baer_api = null;
						if (pwd_baer_api_value != null) {
							if (context_param.containsKey("baer_api")) {// no need to decrypt if it come from program
																		// argument or parent job runtime
								context.baer_api = pwd_baer_api_value;
							} else if (!pwd_baer_api_value.isEmpty()) {
								try {
									context.baer_api = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_baer_api_value);
									context.put("baer_api", context.baer_api);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("baer_api")) {
				context.baer_api = (java.lang.String) parentContextMap.get("baer_api");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("baer_api");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : GET_DATAS");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 458911 characters generated by Talend Open Studio for Data Integration on the
 * January 10, 2022 at 6:07:21 PM CET
 ************************************************************************************************/